См. исходник (ENG): https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc
________________________________________________________________________________________________________________________
****** Обработка исключений в Spring MVC ******

Spring MVC предоставляет несколько взаимодополняющих подходов к обработке исключений, но, обучая Spring MVC, я часто
обнаруживаю, что мои ученики их сбивают с толку или им некомфортно. Сегодня я покажу вам различные доступные варианты.

Наша цель — по возможности не обрабатывать исключения явно в методах контроллера. Это сквозная проблема, которую лучше
решать отдельно в специальном коде.

Существует три варианта:
- для каждого исключения;
- для каждого контроллера;
- глобально;

Демонстрационное приложение, показывающее обсуждаемые здесь моменты, можно найти по адресу:
http://github.com/paulc4/mvc-Exceptions.

Подробности смотрите в примере приложения и ответе:
- https://github.com/paulc4/mvc-exceptions ;
- http://mvc-exceptions-v2.cfapps.io/ ;

!!! ПРИМЕЧАНИЕ. Демонстрационные приложения были переработаны и обновлены (апрель 2018 г.) для использования
                Spring Boot 2.0.1, надеюсь их проще использовать и понимать. Я также исправил несколько неработающих
                ссылок (спасибо за отзыв, извините, это заняло некоторое время).

________________________________________________________________________________________________________________________
*** Spring Boot ***

Spring Boot - https://spring.io/projects/spring-boot - позволяет настроить проект Spring с минимальной конфигурацией, и
вполне вероятно, что вы используете его, если вашему приложению меньше нескольких лет. Spring MVC не предлагает готовых
страниц ошибок по умолчанию (резервных). Самым распространенным способом установки страницы ошибок по умолчанию всегда
был SimpleMappingExceptionResolver(фактически, начиная с Spring V1). Мы обсудим это позже.

Однако Spring Boot предоставляет резервную страницу обработки ошибок.

При запуске Spring Boot пытается найти сопоставление для /error. По соглашению, URL - /error адрес, заканчивающийся на,
соответствует логическому представлению с тем же именем: error. В демонстрационном приложении это представление, в свою
очередь, сопоставляется с error.html шаблоном Thymeleaf.

(При использовании JSP он будет отображаться в error.jsp соответствии с настройками вашего InternalResourceViewResolver).

Фактическое сопоставление будет зависеть от того, что во ViewResolver (если таковое имеется) установлено вами или
Spring Boot.

Если (view-resolver mapping) сопоставление преобразователя представления для /error не найдено, Spring Boot определяет
свою собственную резервную страницу ошибки - так называемую «Страницу ошибок Whitelabel» (минимальная страница,
содержащая только информацию о статусе HTTP и любые сведения об ошибке, например сообщение из неперехваченного
исключения).

Если в примере приложения вы шаблон error.html, скажем, переименуете в error2.html, а затем перезапустите его, вы
увидите, что он используется.

Если вы делаете запрос RESTful (в HTTP-запросе указан желаемый тип ответа, отличный от HTML), Spring Boot возвращает
JSON-представление той же информации об ошибке, которую он помещает на страницу ошибки «Whitelabel».

************************************************************************************************************************
$> curl -H "Accept: application/json" http://localhost:8080/no-such-page

{
 "timestamp":"2018-04-11T05:56:03.845+0000",
 "status":404,
 "error":"Not Found",
 "message":"No message available","path":"/no-such-page"
}
************************************************************************************************************************

Spring Boot также устанавливает для контейнера страницу ошибок по умолчанию, эквивалентную директиве <error-page>
(web.xml хотя и реализованную совсем по-другому). Об исключениях, возникающих за пределами среды Spring MVC, например,
из фильтра сервлетов, по-прежнему сообщается на странице резервной ошибки Spring Boot. В примере приложения также
показан пример этого.

Более подробное обсуждение обработки ошибок Spring Boot можно найти в конце этой статьи.

Остальная часть этой статьи применима независимо от того, используете ли вы Spring со Spring Boot или без него.

Нетерпеливые разработчики REST могут сразу перейти к разделу - "Ошибки и REST" см. ниже, посвященному пользовательским
ответам на ошибки REST. Однако затем им следует прочитать всю статью, поскольку большая часть ее в равной степени
применима ко всем веб-приложениям, как REST, так и любым другим.

________________________________________________________________________________________________________________________
*** Использование кодов состояния HTTP ***

Обычно любое необработанное исключение, возникающее при обработке веб-запроса, заставляет сервер возвращать ответ -
HTTP 500. Однако, любое исключение, которое вы пишете самостоятельно, может быть помечено аннотацией - @ResponseStatus.
Та в свою очередь поддерживает все коды состояния HTTP, определенные спецификацией HTTP. Когда аннотированное исключение
генерируется из метода контроллера и не обрабатывается где-либо еще, оно автоматически вызывает возврат соответствующего
HTTP-ответа с указанным кодом состояния.

Например, вот исключение для отсутствующего заказа.

************************************************************************************************************************
 @ResponseStatus(value=HttpStatus.NOT_FOUND, reason="No such Order")  // 404
 public class OrderNotFoundException extends RuntimeException {
     // ...
 }
************************************************************************************************************************

А вот метод контроллера, использующий его:

************************************************************************************************************************
 @RequestMapping(value="/orders/{id}", method=GET)
 public String showOrder(@PathVariable("id") long id, Model model) {
     Order order = orderRepository.findOrderById(id);

     if (order == null) throw new OrderNotFoundException(id);

     model.addAttribute(order);
     return "orderDetail";
 }
************************************************************************************************************************

Будет возвращен знакомый ответ HTTP 404, если URL-адрес, обрабатываемый этим методом, включает неизвестный идентификатор
заказа.

________________________________________________________________________________________________________________________
*** Обработка исключений на основе контроллера ***

*** Использование @ExceptionHandler ***

Вы можете добавить дополнительные методы аннотированные как @ExceptionHandler к любому контроллеру, чтобы специально
обрабатывать исключения, возникающие с методами обработки запросов в том же контроллере, помеченных как @RequestMapping.

Такие методы могут:
- Обработка исключений без @ResponseStatus аннотаций (обычно предопределенные исключения, которые вы не писали);
- Перенаправить пользователя в специальный просмотр ошибок;
- Создать полностью индивидуальный ответ на ошибку;

Следующий контроллер демонстрирует эти три варианта:

************************************************************************************************************************
@Controller
public class ExceptionHandlingController {

  /* @RequestHandler methods */
  ...

  /* Exception handling methods */

  /* Convert a predefined exception to an HTTP Status code */
  @ResponseStatus(value=HttpStatus.CONFLICT,
                  reason="Data integrity violation")  // Вернет - 409
  @ExceptionHandler(DataIntegrityViolationException.class)
  public void conflict() {

    /* Nothing to do */

  }

  /* Specify name of a specific view that will be used to display the error: */
  @ExceptionHandler({SQLException.class,DataAccessException.class})
  public String databaseError() {
    /*
    Нечего не делать. Возвращает имя логического представления страницы ошибки,
    переданное к преобразователю(ам) представления обычным способом.

    Обратите внимание, что исключение НЕ доступно для этого представления
    (оно не добавляется в модель), но
    см. «Расширение ExceptionHandlerExceptionResolver» ниже.
    */
    return "databaseError";
  }

  /*
  Полный контроль - настройте модель и сами верните имя представления. Или
  рассмотрим создание подклассов ExceptionHandlerExceptionResolver (см.ниже)
  */
  @ExceptionHandler(Exception.class)
  public ModelAndView handleError(HttpServletRequest req, Exception ex) {
    logger.error("Request: " + req.getRequestURL() + " raised " + ex);

    ModelAndView mav = new ModelAndView();
    mav.addObject("exception", ex);
    mav.addObject("url", req.getRequestURL());
    mav.setViewName("error");
    return mav;
  }
}
************************************************************************************************************************

В любом из этих методов вы можете выполнить дополнительную обработку — наиболее распространенным примером является
регистрация исключения.

Методы-обработчики имеют гибкие сигнатуры, поэтому вы можете передавать очевидные объекты, связанные с сервлетами,
такие, как HttpServletRequest и/или HttpServletResponseHttpSessionPrinciple

________________________________________________________________________________________________________________________
!!! Важное примечание: Модель не может быть параметром какого-либо метода @ExceptionHandler. Вместо этого настройте
                       модель внутри метода, используя ModelAndView, как показано выше с помощью handleError() !!!
________________________________________________________________________________________________________________________

*** Исключения и представления ***

Будьте осторожны при добавлении исключений в модель. Ваши пользователи не хотят видеть веб-страницы, содержащие сведения
об исключениях Java и трассировки стека. У вас могут быть политики безопасности, которые прямо запрещают размещать любую
информацию об исключениях на странице ошибок. Еще одна причина убедиться, что вы переопределили страницу ошибок
Spring Boot white-label.

Убедитесь, что исключения регистрируются с пользой, чтобы их можно было проанализировать после события вашей командой
поддержки и разработки.

Помните, что следующее может быть удобно, но это не лучшая практика в производстве.

Для облегчения тестирования может оказаться полезным скрыть сведения об исключении в исходном коде страницы в виде
комментария. Если вы используете JSP, вы можете сделать что-то подобное, чтобы вывести исключение и соответствующую
трассировку стека (другой вариант — использование скрытого).<div>

************************************************************************************************************************
  <h1>Error Page</h1>
  <p>Application has encountered an error. Please contact support on ...</p>

  <!--
    Failed URL: ${url}
    Exception:  ${exception.message}
        <c:forEach items="${exception.stackTrace}" var="ste">    ${ste}
    </c:forEach>
  -->
************************************************************************************************************************

Эквивалент Thymeleaf см. в файле support.html:
- https://github.com/paulc4/mvc-exceptions/blob/master/src/main/resources/templates/support.html
в демонстрационном приложении:

************************************************************************************************************************
<!DOCTYPE html SYSTEM "http://www.thymeleaf.org/dtd/xhtml1-strict-thymeleaf-spring4-4.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:th="http://www.thymeleaf.org">

<head th:substituteby="header :: copy"></head>

<body>
	<h1>Support Friendly Error Page</h1>

	<!--
	      As we are using Thymeleaf, you might consider using
	      ${#httpServletRequest.requestURL}. But that returns the path
	      to this error page.  Hence we explicitly add the url to the
	      Model in some of the example code.
	-->
	<p th:if="${url}">
		<b>Page:</b> <span th:text="${url}">Page URL</span>
	</p>

	<p th:if="${timestamp}" id='created'>
		<b>Occurred:</b> <span th:text="${timestamp}">Timestamp</span>
	</p>

	<p th:if="${status}">
		<b>Response Status:</b> <span th:text="${status}">status-code</span> <span
			th:if="${error}" th:text="'('+${error}+')'">error ...</span>
	</p>

	<p>Application has encountered an error. Please contact support on
		...</p>

	<p>Support may ask you to right click to view page source.</p>

    <!--
         Hidden Exception Details  - this is not a recommendation, but here
         is how you could hide an exception in the page using Thymeleaf
    -->
	<div th:utext="'&lt;!--'" th:remove="tag"></div>
	<div th:utext="'Failed URL: ' +  ${url}" th:remove="tag">${url}</div>
	<div th:utext="'Exception: ' + ${exception.message}" th:remove="tag">${exception.message}</div>
	<ul th:remove="tag">
		<li th:each="ste : ${exception.stackTrace}" th:remove="tag"><span
			th:utext="${ste}" th:remove="tag">${ste}</span></li>
	</ul>
	<div th:utext="'--&gt;'" th:remove="tag"></div>


	<div th:substituteby="footer :: copy"></div>

</body>
</html>
************************************************************************************************************************

Результат выглядит следующим образом см. DOC/Exception_Handling/Example_support-error-page.png

________________________________________________________________________________________________________________________
*** Глобальная обработка исключений ***

*** Использование классов @ControllerAdvice ***

ControllerAdvice позволяет вам использовать одни и те же методы обработки исключений, но применять их ко всему
приложению, а не только к отдельному контроллеру. Вы можете думать о них как о перехватчике, управляемом аннотациями.

Любой класс, помеченный с помощью, @ControllerAdvice становится 'советом контроллера', и поддерживаются три типа
методов:
- Методы обработки исключений, помеченные @ExceptionHandler;
- Методы улучшения модели (для добавления дополнительных данных в модель), помеченные как @ModelAttribute.
  Обратите внимание, что эти атрибуты недоступны представлениям обработки исключений - exception handling views.
- Методы инициализации связующего (используемые для настройки обработки форм), помеченные с помощью @InitBinder.

Мы собираемся рассмотреть только обработку исключений — дополнительную информацию о методах можно найти в
руководстве по @ControllerAdvice - https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller.html

Любой из обработчиков исключений, которые вы видели выше, может быть определен в классе controller-advice, но теперь
они применяются к исключениям, создаваемым любым контроллером.

Вот простой пример:

************************************************************************************************************************
@ControllerAdvice
class GlobalControllerExceptionHandler {
    @ResponseStatus(HttpStatus.CONFLICT)  // 409
    @ExceptionHandler(DataIntegrityViolationException.class)
    public void handleConflict() {
        // Nothing to do
    }
}
************************************************************************************************************************

Если вы хотите иметь обработчик по умолчанию для любого исключения, есть небольшая проблема. Вам необходимо убедиться,
что аннотированные исключения обрабатываются платформой.

Код выглядит следующим образом:

************************************************************************************************************************
@ControllerAdvice
class GlobalDefaultExceptionHandler {

  public static final String DEFAULT_ERROR_VIEW = "error";

  @ExceptionHandler(value = Exception.class)
  public ModelAndView
  defaultErrorHandler(HttpServletRequest req,
                      Exception e) throws Exception {
    /*
    Если исключение помечено @ResponseStatus, повторно создайте его и позвольте платформе
    обработать его - как в примере OrderNotFoundException см. в начале этой статьи.

    AnnotationUtils — это служебный класс Spring Framework.
    */
    if (AnnotationUtils.findAnnotation
                (e.getClass(), ResponseStatus.class) != null)
      throw e;

    /* В противном случае настройте и отправьте пользователя к представлению ошибок по умолчанию */
    ModelAndView mav = new ModelAndView();
    mav.addObject("exception", e);
    mav.addObject("url", req.getRequestURL());
    mav.setViewName(DEFAULT_ERROR_VIEW);
    return mav;
  }
}
************************************************************************************************************************

Идем глубже.

________________________________________________________________________________________________________________________
*** HandlerExceptionResolver ***

Любой bean-компонент Spring-а, объявленный в DispatcherServlet контексте приложения, который реализует,
HandlerExceptionResolver будет использоваться для перехвата и обработки любого исключения, возникшего
в системе MVC и не обработанного контроллером.

Интерфейс выглядит следующим образом:

************************************************************************************************************************
public interface HandlerExceptionResolver {
    ModelAndView resolveException(HttpServletRequest request,
                                  HttpServletResponse response,
                                  Object handler,
                                  Exception ex);
}
************************************************************************************************************************

Ссылается handler на контроллер, сгенерировавший исключение (помните, что @Controller экземпляры - это только один тип
обработчика, поддерживаемый Spring MVC. Например: HttpInvokerExporter и WebFlow Executor также являются типами
обработчиков.

За кулисами MVC по умолчанию создает три таких преобразователя. Именно эти преобразователи реализуют описанное выше
поведение:
- ExceptionHandlerExceptionResolver - сопоставляет не перехваченные исключения с подходящими @ExceptionHandler методов
                                      как в обработчике (контроллере), так и в любых advice controllers.
- ResponseStatusExceptionResolver - ищет не перехваченные исключения, аннотированные @ResponseStatus.
- DefaultHandlerExceptionResolver - преобразует стандартные исключения Spring и преобразует их в коды состояния HTTP
                                    (об этом выше не упомянуто, поскольку, это внутреннее свойство Spring MVC).
- HandlerExceptionResolverComposite - Они объединяются и обрабатываются в указанном порядке - для этого Spring создает
                                      специальный компонент. Обратите внимание, что сигнатура метода resolveException
                                      не включает расширение Model. Вот почему @ExceptionHandler методы не могут быть
                                      внедрены в модель.

При желании вы можете реализовать свою собственную HandlerExceptionResolver систему обработки исключений. Обработчики
обычно реализуют интерфейс Spring Ordered, поэтому вы можете определить порядок выполнения обработчиков.

________________________________________________________________________________________________________________________
*** SimpleMappingExceptionResolver ***

Spring уже давно предоставляет простую, но удобную реализацию, HandlerExceptionResolver-а, которая, возможно, уже
используется в вашем приложении - SimpleMappingExceptionResolver.

Он предоставляет возможности:
- Сопоставлять имена классов исключений для просмотра имен — просто укажите имя класса, пакет не требуется.
- Указывать страницу ошибок по умолчанию (резервную) для любого исключения, которое больше нигде не обрабатывается.
- Регистрировать сообщение (по умолчанию это не включено).
- Задавать имя атрибута exception, который нужно добавить в модель, чтобы его можно было использовать внутри
  представления (например, JSP).

По умолчанию этот атрибут называется exception. Установите значение null, чтобы отключить. Помните, что представления,
возвращаемые из @ExceptionHandler методов, не имеют доступа к исключению, но представления, определенные как
SimpleMappingExceptionResolver имеют таковой.

Вот типичная конфигурация с использованием конфигурации Java:

************************************************************************************************************************
@Configuration
@EnableWebMvc
/*
При желании настройте параметры Spring MVC по умолчанию
(если вы не используете Spring Boot и не указали
@EnableWebMvc где-либо еще)
*/
public class MvcConfiguration extends WebMvcConfigurerAdapter {
  @Bean(name="simpleMappingExceptionResolver")
  public SimpleMappingExceptionResolver
                  createSimpleMappingExceptionResolver() {
    SimpleMappingExceptionResolver r =
                new SimpleMappingExceptionResolver();

    Properties mappings = new Properties();
    mappings.setProperty("DatabaseException", "databaseError");
    mappings.setProperty("InvalidCreditCardException", "creditCardError");

    r.setExceptionMappings(mappings);  // None by default
    r.setDefaultErrorView("error");    // No default
    r.setExceptionAttribute("ex");     // Default is "exception"
    r.setWarnLogCategory("example.MvcLogger");     // No default
    return r;
  }
  ...
}
************************************************************************************************************************

Или используя конфигурацию XML:

************************************************************************************************************************
  <bean id="simpleMappingExceptionResolver" class=
     "org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="exceptionMappings">
      <map>
         <entry key="DatabaseException" value="databaseError"/>
         <entry key="InvalidCreditCardException" value="creditCardError"/>
      </map>
    </property>

    <!-- See note below on how this interacts with Spring Boot -->
    <property name="defaultErrorView" value="error"/>
    <property name="exceptionAttribute" value="ex"/>

    <!-- Name of logger to use to log exceptions. Unset by default,
           so logging is disabled unless you set a value. -->
    <property name="warnLogCategory" value="example.MvcLogger"/>
  </bean>
************************************************************************************************************************

Свойство defaultErrorView особенно полезно, поскольку оно гарантирует, что любое не перехваченное исключение создает
подходящую страницу ошибки, определенную приложением. (По умолчанию для большинства серверов приложений отображается
трассировка стека Java, чего ваши пользователи никогда не должны видеть).

Spring Boot предоставляет другой способ сделать то же самое со своей страницей ошибок «white label».

________________________________________________________________________________________________________________________
*** Расширение SimpleMappingExceptionResolver ***

Расширение SimpleMappingExceptionResolver распространено по нескольким причинам:
- Вы можете использовать конструктор для прямой установки свойств — например, чтобы включить ведение журнала исключений
  и настроить использование средства ведения журнала.
- Переопределите сообщение журнала по умолчанию, переопределив buildLogMessage. Реализация по умолчанию всегда
  возвращает этот фиксированный текст: "Выполнение обработчика привело к исключению"
- Чтобы сделать дополнительную информацию доступной для представления ошибок путем переопределения doResolveException.

Например:

************************************************************************************************************************
public class MyMappingExceptionResolver extends SimpleMappingExceptionResolver {
  public MyMappingExceptionResolver() {

    /* Включите ведение журнала, указав имя используемого средства ведения журнала */
    setWarnLogCategory(MyMappingExceptionResolver.class.getName());
  }

  @Override
  public String buildLogMessage(Exception e, HttpServletRequest req) {
    return "MVC exception: " + e.getLocalizedMessage();
  }

  @Override
  protected ModelAndView doResolveException(HttpServletRequest req,
        HttpServletResponse resp, Object handler, Exception ex) {

    /* Вызов суперметода для получения ModelAndView */
    ModelAndView mav = super.doResolveException(req, resp, handler, ex);

    /*
    Делаем полный URL доступным для представления – обратите внимание,
    что ModelAndView использует addObject(), но Модель использует
    addAttribute(). Они работают одинаково.
    */
    mav.addObject("url", request.getRequestURL());
    return mav;
  }
}
************************************************************************************************************************

Этот код находится в демонстрационном приложении как exampleSimpleMappingExceptionResolver:
https://github.com/paulc4/mvc-exceptions/blob/master/src/main/java/demo/example/ExampleSimpleMappingExceptionResolver.java

________________________________________________________________________________________________________________________
*** Расширение ExceptionHandlerExceptionResolver ***

Таким же образом можно расширить ExceptionHandlerExceptionResolver и переопределить его метод -
doResolveHandlerMethodException. У него почти такая же подпись (только вместо HandlerMethod у него она Handler).

Чтобы убедиться, что он используется, также установите для унаследованного свойства порядка (например, в конструкторе
вашего нового класса) значение меньше MAX_INT, чтобы оно запускалось до экземпляра ExceptionHandlerExceptionResolver
по умолчанию (проще создать собственный экземпляр обработчика, чем пытаться изменить/заменить созданный Spring-ом).
Дополнительную информацию см. в разделе exampleExceptionHandlerExceptionResolver в демонстрационном приложении -
https://github.com/paulc4/mvc-exceptions/blob/master/src/main/java/demo/example/ExampleExceptionHandlerExceptionResolver.java

Или см. код ниже:

************************************************************************************************************************
package demo.example;

import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver;

import demo.config.ExceptionConfiguration;

 /*
  Не используется в этом приложении, но является примером расширения <tt>ExceptionHandlerExceptionResolver</tt>
  для предоставления дополнительной информации в модель для просмотра. Чтобы использовать, добавьте метод @Bean в
  {@link ExceptionConfiguration} для возврата экземпляра.

  @автор Пол Чепмен (автор этой статьи)
 */
public class ExampleExceptionHandlerExceptionResolver extends
		                                    ExceptionHandlerExceptionResolver {

	/*
    По умолчанию <tt>ExceptionHandlerExceptionResolver</tt> имеет порядок MAX_INT.
    (самый низкий приоритет — см. {@link Ordered#LOWEST_PRECEDENCE). Конструктор
    дает этому немного более высокий приоритет, поэтому он запускается первым.
    Также включает запись в логгер этого класса по умолчанию.
	*/
	public ExampleExceptionHandlerExceptionResolver() {

		/* Включаем логирование по умолчанию */
		setWarnLogCategory(getClass().getName());

		/*
		Убедитесь, что этот обработчик запускается до обработчика
		по умолчанию ExceptionHandlerExceptionResolver
		*/
		setOrder(LOWEST_PRECEDENCE - 1);
	}

	/*
	Переопределите значение по умолчанию, чтобы создать
	сообщение журнала с динамическим содержимым.
	*/
	@Override
	public String buildLogMessage(Exception e, HttpServletRequest req) {
		return "MVC exception: " + e.getLocalizedMessage();
	}

	/*
    Этот метод использует newee API и получает метод-обработчик.
    (обычно метод <tt>@Controller</tt>), который сгенерировал
    исключение)
	*/
	@Override
	protected ModelAndView doResolveHandlerMethodException(
			HttpServletRequest request, HttpServletResponse response,
			HandlerMethod handlerMethod, Exception exception) {

		/* Получить ModelAndView для использования */
		ModelAndView mav = super.doResolveHandlerMethodException(request,
				response, handlerMethod, exception);

		/* Сделаем больше информации доступной для view */
		mav.addObject("exception", exception);
		mav.addObject("url", request.getRequestURL());
		mav.addObject("timestamp", new Date());
		mav.addObject("status", 500);
		return mav;
	}
}
************************************************************************************************************************

________________________________________________________________________________________________________________________
***Ошибки и REST ***

Запросы RESTful GET также могут генерировать исключения, и мы уже видели, как мы можем возвращать стандартные коды
ответов HTTP Error. Однако что делать, если вы хотите вернуть информацию об ошибке? Это очень легко сделать. Сначала
определите класс ошибки:

************************************************************************************************************************
public class ErrorInfo {
    public final String url;
    public final String ex;

    public ErrorInfo(String url, Exception ex) {
        this.url = url;
        this.ex = ex.getLocalizedMessage();
    }
}
************************************************************************************************************************

Теперь мы можем вернуть экземпляр из обработчика следующим образом @ResponseBody:

************************************************************************************************************************
@ResponseStatus(HttpStatus.BAD_REQUEST)
@ExceptionHandler(MyBadDataException.class)
@ResponseBody
public ErrorInfo handleBadRequest(HttpServletRequest req, Exception ex) {
    return new ErrorInfo(req.getRequestURL(), ex);
}
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Что и когда использовать? ***

Как обычно, Spring любит предлагать вам выбор, так что же вам делать?
Вот несколько практических правил, однако, если вы предпочитаете конфигурацию XML или аннотации, это тоже нормально:
- Если вы пишете исключения, рассмотрите возможность добавления @ResponseStatus к ним.
- Для всех остальных исключений реализуйте @ExceptionHandler метод класса @ControllerAdvice или используйте экземпляр
  SimpleMappingExceptionResolver. Вполне возможно, что вы уже настроили свое приложение с SimpleMappingExceptionResolver,
  и в этом случае может быть проще добавить в него новые классы исключений, чем реализовать @ControllerAdvice.
- Для обработки исключений, специфичных для контроллера, добавьте @ExceptionHandler методы в ваш контроллер.
- Предупреждение. Будьте осторожны, смешивая слишком много этих опций в одном приложении. Если одно и то же исключение
  можно передать несколькими способами, вы можете не получить желаемого поведения. @ExceptionHandler методы контроллера
  всегда выбираются раньше, чем методы любого @ControllerAdvice экземпляра. Не определено, в каком порядке
  обрабатываются controller-advice.

________________________________________________________________________________________________________________________
*** Простое приложение ***

Демонстрационное приложение можно найти на github - https://github.com/paulc4/mvc-exceptions. Он использует Spring Boot
и Thymeleaf для создания простого веб-приложения. Приложение пересматривалось дважды (октябрь 2014 г., апрель 2018 г.)
и теперь (надеюсь) стало лучше и проще для понимания. Основы остаются прежними. Он использует Spring Boot V2.0.1 и
Spring V5.0.5, но код также применим к Spring 3.x и 4.x.

Демо-версия работает на Cloud Foundry по адресу - http://mvc-Exceptions-v2.cfapps.io/

________________________________________________________________________________________________________________________
*** О демо-версии ***

Приложение проводит пользователя через 5 демонстрационных страниц, освещая различные методы обработки исключений:
- 1. - Контроллер с @ExceptionHandler методами обработки собственных исключений.
- 2. - Контроллер, который генерирует исключения для обработки глобального ControllerAdvice.
- 3. - Использование SimpleMappingExceptionResolver для обработки исключений
- 4. - То же, что и демо 3, но SimpleMappingExceptionResolver для сравнения отключено.
- 5. - Показывает, как Spring Boot генерирует страницу ошибки.

Описание наиболее важных файлов приложения и их отношения к каждой демо-версии можно найти в README.md проекта -
https://github.com/paulc4/mvc-exceptions/blob/master/README.md

Домашняя страница - http://github.com/paulc4/mvc-exceptions/blob/master/src/main/resources/templates/index.html,
которая:
- Ссылается на каждую демонстрационную страницу;
- Ссылается (внизу страницы) на конечные точки Spring Boot для тех, кто интересуется Spring Boot;

Каждая демонстрационная страница содержит несколько ссылок, каждая из которых намеренно вызывает исключения. Вам нужно
будет каждый раз нажимать кнопку «Назад» в браузере, чтобы вернуться на демонстрационную страницу. Благодаря Spring Boot
вы можете запустить эту демонстрацию как приложение Java (оно запускает встроенный контейнер Tomcat). Для запуска
приложения вы можете использовать один из следующих вариантов (второй — благодаря плагину Spring Boot maven):

mvn exec:java
mvn spring-boot:run

На выбор. URL-адрес домашней страницы будет  http://localhost:8080

________________________________________________________________________________________________________________________
*** Содержимое страницы ошибки ***

Также в демонстрационном приложении я показываю, как создать «готовую к поддержке» страницу ошибок с трассировкой стека,
скрытой в исходном коде HTML (в виде комментария). В идеале служба поддержки должна получать эту информацию из журналов,
но жизнь не всегда идеальна. В любом случае, на этой странице показано, как базовый метод обработки ошибок handleError
создает свой собственный ModelAndView, чтобы предоставить дополнительную информацию на странице ошибок.

См.:
- ExceptionHandlingController.handleError() на github -
https://github.com/paulc4/mvc-exceptions/blob/master/src/main/java/demo1/web/ExceptionHandlingController.java

- GlobalControllerExceptionHandler.handleError() на github -
https://github.com/paulc4/mvc-exceptions/blob/master/src/main/java/demo2/web/GlobalExceptionHandlingControllerAdvice.java

________________________________________________________________________________________________________________________
*** Spring загрузка и обработка ошибок ***

Spring Boot - https://spring.io/projects/spring-boot - позволяет настроить проект Spring с минимальной настройкой.
Spring Boot автоматически создает разумные значения по умолчанию, когда обнаруживает определенные ключевые классы и
пакеты в пути к классам.

Например, если он видит, что вы используете среду сервлетов, то настраивает Spring MVC с наиболее часто используемыми
преобразователями представлений, сопоставлениями обработчиков и т. д. Если он видит JSP и/или Thymeleaf, он настраивает
эти технологии просмотра.

________________________________________________________________________________________________________________________
*** Страница резервной ошибки ***

Как Spring Boot поддерживает обработку ошибок по умолчанию, описанную в начале этой статьи?

- 1. - В случае какой-либо необработанной ошибки Spring Boot выполняет внутреннюю переадресацию в /error.
- 2. - Spring Boot настраивает BasicErrorController для обработки любого запроса к /error. Контроллер добавляет информацию об
       ошибках во внутреннюю модель и возвращает error имя логического представления.
- 3. - Если какие-либо преобразователи представлений настроены, они попытаются использовать соответствующее
       представление ошибок.
- 4. - В противном случае страница ошибок по умолчанию предоставляется с использованием специального View объекта
       (что делает ее независимой от любой используемой вами системы разрешения представления).
- 5. - Spring Boot настраивает BeanNameViewResolver так, чтобы его /error можно было сопоставить с View тем же именем.
- 6. - Если вы посмотрите класс Spring Boot - ErrorMvcAutoConfiguration, вы увидите, что defaultErrorView возвращается
       как компонент с именем error. Это объект View, найденный BeanNameViewResolver.

Страница ошибки «Whitelabel» намеренно минималистична и некрасива. Вы можете переопределить её:

- 1. - Определив шаблон ошибки — в нашей демонстрации мы используем Thymeleaf, поэтому шаблон ошибки находится внутри
       src/main/resources/templates/error.html (это местоположение задается свойством Spring Boot в
       spring.thymeleaf.prefix — аналогичные свойства существуют для других поддерживаемых технологий просмотра на
       стороне сервера, таких как JSP или Mustache).
- 2. - Если вы не используете рендеринг на стороне сервера:
        - 2.1 - Определите свою собственную View как bean с именем - error.
        - 2.2 - Или отключите страницу ошибок «Whitelabel» загрузки Spring, установив свойство -
                server.error.whitelabel.enabled в false. Вместо этого используется страница ошибок вашего контейнера
                по умолчанию.

По соглашению свойства Spring Boot обычно устанавливаются в файле application.properties или application.yml.

________________________________________________________________________________________________________________________
*** Интеграция с SimpleMappingExceptionResolver ***

Что делать, если вы уже используете SimpleMappingExceptionResolver настройку представления ошибок по умолчанию? Просто
используйте setDefaultErrorView() для определения того же представления, которое использует Spring Boot - error.

!!! Обратите внимание, что в демо-версии defaultErrorView свойство SimpleMappingExceptionResolver намеренно установлено
    не в значение - error, а в значение defaultErrorPage, чтобы вы могли видеть, когда обработчик генерирует страницу с
    ошибкой и когда за это отвечает Spring Boot. Обычно оба будут установлены на error.

________________________________________________________________________________________________________________________
*** Обработка исключений на уровне контейнера ***

Об исключениях, возникающих за пределами Spring Framework, например, из фильтра сервлетов, также сообщается на резервной
странице ошибок Spring Boot.

Для этого Spring Boot должен зарегистрировать страницу ошибок по умолчанию для контейнера. В сервлете 2 есть
<error-page> директива, которую вы можете добавить web.xml для этого. К сожалению, Servlet 3 не предлагает
эквивалент Java API.

Вместо этого Spring Boot делает следующее:
- Для приложения Jar со встроенным контейнером оно регистрирует страницу ошибок по умолчанию, используя API-интерфейс
  конкретного контейнера.
- Для приложения Spring Boot, развернутого как традиционный файл WAR, фильтр сервлетов используется для перехватывания
  исключения, возникающие в дальнейшем, и обрабатывать их.

________________________________________________________________________________________________________________________
См. комментарии к статье в исходнике.