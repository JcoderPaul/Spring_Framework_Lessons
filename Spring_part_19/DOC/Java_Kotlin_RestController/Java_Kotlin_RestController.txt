См. исходник (RUS): https://habr.com/ru/articles/480158/
________________________________________________________________________________________________________________________
****** Умеем ли мы готовить Java, Kotlin RestController? ******

Практически любой программист на java в своей жизни писал RestController, но мало кто задумывается правильно ли он это
делает. Даже если вы опытный программист, у вас могут возникнуть вопросы, на которые я постараюсь ответить. В статье
будут затронуты такие фреймворки как spring boot версии 1.5 и 2.0, а также quarkus — недавно появившийся соперник
spring boot от red hat.

________________________________________________________________________________________________________________________
*** Проблема ***

Долгое время программировал на java и spring boot 1.5. Но возникла потребность написать новый проект:
- Имею json для интеграции 1600 строк, некоторые классы имеют 100 полей;
- Захотелось опробовать Kotlin и Quarkus;
- Написать rest controller, который бы умел работать с kotlin data class без аннотаций и без привлечения магии lombok.
  Хочется, чтобы data class был небольшого размера;

Вы наверное догадались, что kotlin data class — это неизменяемый класс, или immutable. Класс у которого конструктор
содержит все поля. Я большой приверженец такой концепции. Т.е. после создания класса, его нельзя изменить, в нем нет
сеттеров. Как в мире докер image не может быть изменен, так и дата класс, который попал в контроллер, это то, чего
нельзя менять.

Давайте рассмотрим возможные пути решения проблемы, точнее как в современных проектах можно написать контроллер.

________________________________________________________________________________________________________________________
*** Стандартный вариант. вручную на spring или spring boot 1.5 ***

Rest контроллеры появились достаточно давно, и типичным примером их использования на java, который есть во всех
туториалах является следующий пример, создаем простейший контроллер:

************************************************************************************************************************
@RestController
public class FruitController {
   @PostMapping("/fruit")
   public void greeting(@RequestBody Fruit request) {
      System.out.println(request);
   }
}
************************************************************************************************************************

И создаем POJO (plain old java object):

************************************************************************************************************************
public class Fruit {
    public String name;
    public String description;
    public Fruit() {
    }
    public Fruit(String name, String description) {
        this.name = name;
        this.description = description;
    }
}
************************************************************************************************************************

Тут могут быть вариации с private полями и getters/setters или lombok аннотациями, не в этом суть. Замечательно, мы
создали первый REST контроллер и он работает. Для 90% случаев рабочий вариант. Можно здесь и остановиться.

Однако!!! Проблемы:
- Нарушена концепция immutable;
- Немного многословный класс данных;

________________________________________________________________________________________________________________________
*** Можем ли мы сделать immutable? ***

Естественной реакцией на эту проблему будет решение удалить конструктор по умолчанию и запретить редактировать поля
класса.

************************************************************************************************************************
@Getter
public class Fruit {
    private String name;
    private String description;
//    public Fruit() {
//    }
    public Fruit(String name, String description) {
        this.name = name;
        this.description = description;
    }
}
************************************************************************************************************************

Но теперь возникает проблема, оказывается, что библиотека (скорее всего jackson) не может создать класс. Наиболее
вероятно мы увидим ошибку вроде - 'No default constructor found'. Значит jackson сначала создавал класс с помощью
конструктора без параметров, а потом вызывал getter/setter. Какой ужас.

Но, ведь есть же конструктор со всеми параметрами? К сожалению, когда класс откомпилирован, параметры выглядят примерно
так см. DOC/Java_Kotlin_RestController/1_Parameters.png

Т.е. во время выполнения java ничего не знает об именах параметров в конструкторе. Компилятор их теряет.

________________________________________________________________________________________________________________________
*** Второй вариант Spring или Spring Boot 1.5 + аннотации как спасенье ***

Итак, мы осознали, что хотим immutable class, и знаем что пользуемся jackson. Тогда на помощь приходят анотатации.

************************************************************************************************************************
@Getter
public class Fruit {
    private String name;
    private String description;

    @JsonCreator
    public Fruit(@JsonProperty("name") String name, @JsonProperty("description")String description) {
        this.name = name;
        this.description = description;
    }
}
************************************************************************************************************************

В данный момент в нашем проекте на Spring Boot 1.5 этими аннотациями буквально пестрит все.

А если вы возьмете популярный генератор jsonschema2pojo, то он сгенерирует еще больше аннотаций. Честно говоря, мне они
не нравятся. Попробуйте скопировать туда:

************************************************************************************************************************
{
	"description": "description",
	"name": "name"
}
************************************************************************************************************************

На выходе получаем (можно зажмуриться и пролистать):

************************************************************************************************************************
@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
        "description",
        "name"
})
public class Example {

    @JsonProperty("description")
    private String description;
    @JsonProperty("name")
    private String name;

    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    @JsonProperty("description")
    public void setDescription(String description) {
        this.description = description;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("name")
    public void setName(String name) {
        this.name = name;
    }
}
************************************************************************************************************************

Минусы: С аннотациями сильно раздувается класс. Очень многословно, на любителя.

________________________________________________________________________________________________________________________
*** Третий вариант Spring или Spring Boot 1.5 + флаг Lombok ***

Спасибо пользователю '@Throwable' - https://habr.com/ru/users/Throwable/publications/articles/, я процитирую из
комментария:

«Если Вы используете Lombok, то есть лучший способ — прописать в lombok.config:
lombok.allArgsConstructor.addConstructorProperties = true
Это сгенерит на конструкторе @java.beans.ConstructorProperties, который Jackson умеет понимать.»

Замечательный вариант. Он наверняка бы спас меня от многословности аннотаций.

Минусы:
- Но я хочу использовать Kotlin без Lombok;
- Я узнал этот вариант слишком поздно;

________________________________________________________________________________________________________________________
*** Четвертый вариант Spring boot 2.0 ***

************************************************************************************************************************
@Getter
public class Fruit {
    private String name;
    private String description;
    public Fruit( String name, String description) {
        this.name = name;
        this.description = description;
    }
}
************************************************************************************************************************

На удивление Spring Boot 2.0 спокойно работает с таким immutable классом. А также с его братом близнецом kotlin data
class

************************************************************************************************************************
data class Fruit(
 val name : String,
 val description : String)
************************************************************************************************************************

Казалось бы java в рантайме не знает имен параметров в конструкторе, но почему то Spring Boot 2.0 уже умеет работать с
data class.

Итак, заглянем в spring-boot-starter-parent, там добавилась поддержка Kotlin:

************************************************************************************************************************
<plugin>
             <groupId>org.jetbrains.kotlin</groupId>
...
              <configuration>
                        <javaParameters>true</javaParameters>
              </configuration>
</plugin>
<plugin>
              <artifactId>maven-compiler-plugin</artifactId>
              <configuration>
                        <parameters>true</parameters>
              </configuration>
</plugin>
************************************************************************************************************************

Расшифровываю. Для того чтобы имена параметров в конструкторе класса не терялись при рантайме компилятору необходимо
передать флаг - javac-parameters, и Spring Boot 2.0 это и делает.

Пример проекта на Spring Boot 2 - https://github.com/serg-bs/kotlin-data-class-spring

________________________________________________________________________________________________________________________
*** Пятый вариант - Quarkus + Kotlin ***

У Quarkus есть пример REST Service-а - https://quarkus.io/guides/rest-json, аналог моего первого варианта. Т.е. REST
контроллер по старинке. Однако, если вы хотите использовать его с Kotlin вам придется добавить флаги как это сделал
Spring Boot 2. Описание проблемы тут - https://github.com/quarkusio/quarkus/issues/6041. Пример, как добавить в Quarkus
поддержку kotlin data class - https://github.com/serg-bs/kotlin-quarkus-example.

________________________________________________________________________________________________________________________
*** Выводы ***

Можно пользоваться первым простейшим вариантом создания REST контроллеров, но я бы посоветовал бы двигаться в сторону
immutable классов. Пишите на Kotlin и вам не понадобится Lombok. Код должен стать легче и проще. Я уверен, что
создатели Spring-a осознано шли на добавление javac-parameters в опции компилятора и в этом не должно быть криминала.

________________________________________________________________________________________________________________________
См. комментарии к статье в русском исходнике.