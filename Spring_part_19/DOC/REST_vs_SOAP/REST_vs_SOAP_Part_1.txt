См. исходник (RUS): https://habr.com/ru/articles/131343/
________________________________________________________________________________________________________________________
****** REST vs SOAP. Часть 1. Почувствуйте разницу ******

Некоторое время назад я гуглил интернет по поводу “REST vs SOAP”, прочитал пару статей и вроде бы все понял, но не
почувствовал от этого никакого удовлетворения. Что-то было не так, то ли я не почувствовал основную идею, то ли просто
читал, одновременно слушая новый музон и думая о новой фиче в проекте. Как появилось время, решил восполнить этот
пробел, заодно написав полезную статью по этому поводу.

Я понял о REST примерно следующее:
- Все является ресурсами с уникальным идентификатором (URL);
- Все операции клиента с сервером stateless, т.е. сервер не должен хранить вообще никакой информации о клиенте – никакой
  сессии;
- Все запросы можно поделить на 4 типа в соответствии с CRUD, причем каждому типу сопоставляется HTTP метод: Post, Get,
  Put и Delete;
- Вся логика крутится вокруг ресурсов, а не операций;

Вот с такими воспоминаниями я начал бороздить просторы интернета. Первой мыслью было, а почему выбрано название REST?
Representational State Transfer, в переводе википедии «передача состояния представления», странно, никакой картинки в
голове не вырисовывается даже при четвертом вчитывании. Конечно, есть попытки ответить на мой вопрос и даже
рассказывается то, как Рой Филдинг (человек, сформулировавший принципы REST) сам объяснял происхождение названия.

Мысль сводится к тому, что запрос ресурса с сервера переводит клиентское приложение в определенное состояние (state), а
запрос следующего ресурса меняет состояние приложения (transfer). А “Representational” означает то, что ресурс
возвращается не просто так, а в каком-то представлении, например в представлении для машины или в представлении для
человека.

Сложно, как по мне, и сбивает с толку, т.к. состояние – это как раз то, что отсутвует в отношениях клиент-сервер в
архитектуре REST. Я бы назвал как-то вроде «Стандартизированное оперирование данными», вот только сначала надо что-то
придумать, а потом уже яркое название выбирать. А Филдинг в своей диссертации признается, что название придумано не для
того, чтобы было понятно, о чем речь, а «призвано вызвать представление о том, как ведет себя хорошо спроектированное
веб-приложение». Ок, не будем обижаться на уважаемого человека, мы тоже в дипломных работах часто формулировали все так,
чтобы было как можно непонятнее и нельзя было придраться. Нашлась и неплохая формулировка идеи по-русски –
«представление данных в удобном для клиента формате». Справедливости ради надо отметить, что пока я формулировал свои
доводы о нелогичности названия, я увидел в нем некоторую логику, по крайней мере в английском варианте.

Важно понимать, что REST – это не протокол и не стандарт, а архитектурный стиль. У этого стиля есть свои принципы.
Позволю себе скопировать их с понравившегося источника (https://www.infoq.com/articles/rest-introduction/) и
прокомментировать:
- Give every “thing” an ID - Очень желательно, чтобы любое 'нечто' имело свой ID.
- Link things together - Например, в страницу (представление) о Mercedes C218 хорошо бы добавить ссылку на страницу
                         конкретно о двигателе данной модели, чтобы желающие могли сразу туда перейти, а не тратить
                         время на поиск этой самой страницы.
- Use standard methods - Имеется в виду, экономьте свои силы и деньги заказчика, используйте стандартные методы HTTP,
                         например GET: http://www.example.com/cars/00345, для получения данных вместо определения
                         собственных методов вроде getCar?id=00345.
- Resources can have multiple representations - Одни и те же данные можно вернуть в XML или JSON для программной
                                                обработки или обернутыми в красивый дизайн для просмотра человеком.
- Communicate statelessly - Да, RESTful сервис должен быть как идеальный суд – его не должно интересовать ни прошлое
                            подсудимого (клиента), ни будущее – он просто выносит приговор (отвечает на запрос и все).

Только что употребленный термин RESTful (веб-)сервис всего лишь означает сервис, реализованный с использованием
принципов REST. Так что же нам дает следование этим самым принципам REST? Для начала я бы назвал простоту основным
преимуществом архитектуры REST. Простоту идеи, простоту разработки и добавления функциональности к RESTful приложениям.

Идея настолько проста и универсальна, что ее даже сложно сначала уловить. Мы не добавляем никакого нового слоя в наш и
без того многослойный программерский пирог, а просто используем уже давно признанные стандарты. Поэтому, чтобы ответить
на вопрос о преимуществах и недостатках и чтобы анализ имел больше смысла, предлагаю перейти к сравнению подходов SOAP
и REST.

________________________________________________________________________________________________________________________
1. SOAP – это целое семейство протоколов и стандартов, откуда напрямую вытекает, что это более тяжеловесный и сложный
   вариант с точки зрения машинной обработки. Поэтому REST работает быстрее.

2. SOAP используют HTTP как транспортный протокол, в то время как REST базируется на нем. Это означает, что все
   существующие наработки на базе протокола HTTP: кеширование на уровне сервера, масштабирование, продолжают так же
   работать в REST архитектуре, а для SOAP необходимо искать другие средства. Взамен этого SOAP сервисы получают такое
   мифическое свойство, как возможность работать с любым протоколом транспортного уровня вместо HTTP, однако
   практической пользы от него зачастую не больше, чем сотрудникам Челябинского трубопрокатного завода от большого
   количесва статей в википедиях на мертвых языках.

3. Есть мнение, что разработка RESTful сервисов намного проще. Наверное, это правда, если использовать Notepad в
   качестве основной среды разработки, но вот с использованием наших чудесных средств разработки, я позволю себе
   усомниться в верности этого утверждения.

4. В первом гугловском результате по запросу «REST vs SOAP» акцентируется внимание на том, что ответ REST может быть
   представлен в различных форматах, а SOAP привязан к XML. Это действительно важный фактор, достаточно представить себе
   вызов сервиса из JavaScript, ответ на который мы определенно хотим получать в JSON.

5. «REST vs SOAP» можно перефразировать в «Простота vs Стандарты», что проявляется в том, что:
   - Для SOAP мы имеем протокол WSDL для исчерпывающего описания веб-сервиса, который с использованием все тех же
     чудесных средств разработки волшебным образом делает почти всю работу за нас.
   - Со стороны REST мы имеем загадочный и неиспользуемый протокол WADL, который, в принципе, и не нужен – он мешает
     простоте.

6. Второй аспект предыдущего пункта – обработка ошибок. В SOAP она полностью стандартизована, а REST может использовать
   давно известные коды ошибок HTTP (если здесь Вас посетила мысль, что это же очевидно и зачем я это пишу, то значит
   Вы внимательно читаете статью).

7. То, с чего можно было бы начать, но я припас напоследок. Это одна из ключевых мыслей!!!

   *********************************************************************************************************************
      SOAP работает с операциями, а REST – с ресурсами.
   *********************************************************************************************************************

   Этот факт в совокупности с отсутствием клиентского состояния у RESTful сервисов приводит нас к тому, что такие вещи,
   как транзакции или другая сложная логика должна реализовываться «SOAP-но».

Приведу пару примеров на понимание разницы между подходами:
- Букмекерская контора заказала сервис для работы с футбольной статистикой. Пользовательский функционал – получить
  список матчей, получить детали о матче. Для редакторов – редактировать (Create, Edit, Delete) список матчей,
  редактировать детали матча. Для такой задачи однозначно надо выбирать подход REST и получать бенефиты от его простоты
  и естественности во взаимодействии с HTTP. Не нужны нам здесь SOAP-конверты, SOAP-главпочтамты и SOAP-авиапочта,
  которая может использовать любую марку самолета.

  Нам всего лишь надо реализовать следующее (Что происходит при обращении с использованием методов HTTP):
___________________________________________________________________________________________________
        URL            |      GET        |        POST        |       PUT        |     DELETE     |
___________________________________________________________________________________________________
example.com/matches    | Получаем список |   Создаем список   | Обновляем список | Удаляем список |
                       |     матчей      |       матчей       |      матчей      |     матчей     |
___________________________________________________________________________________________________
example.com/matches/28 | Получаем детали | Создаем информацию | Обновляем детали |  Удаляем матч  |
                       | матча с ID = 28 | о матче с ID = 28  | матча с ID = 28  |                |
___________________________________________________________________________________________________

Все очень просто! Теперь пример посложнее. Та же букмекерская контора захотела API для ставок на live матчи. Эта
процедура включает в себя многочисленные проверки, например, продолжает ли ставка быть актуальной, не изменился ли
коэффициент, не превышена ли максимальная сумма ставки для маркета. После этого происходит денежная транзакция,
результаты которой записываются в основную и в резервные базы данных. Лишь после этого клиенту приходит ответ об
успешности операции. Здесь явно прослеживается ориентация на операции, имеются повышенные требования к безопасности
и устойчивости приложения, поэтому целесообразно использовать SOAP.

И еще пару задач для того, чтобы почувствовать тему:
- Футбольный клуб заказывает CMS для подробных сведений об игроках команды-неприятеля. Нужен функционал добавления
  характеристик игрока простыми пользователями прямо во время матча с последующей интеграцией с табло стадиона, на
  котором необходимо в реальном времени отображать комментарии.
- Мексиканский наркобарон заказывает API для учета продаж героина в Юго-Западных штатах США. Он особо просит мобильное
  приложение под эту задачу, т.к. его бизнес часто проходит на открытом воздухе, где нету других вариантов выхода в
  сеть.
- Анонимный миллиардер очень хочет такую программу, которая бы ему показывала всех его любовниц в городе, в котором он
  сейчас находится и то, какой текущий статус отношений. Он хочет интегрировать эту программу с уже существующим его
  личным десктопным приложением для подбора мест для отдыха, он очень хочет большую красную надпись о возможных
  неприятностях в окошке, где предлагаются варианты авиаперелета.

Какие подходы Вы бы использовали в данных задачах?

Хотел я еще написать про то, что все это дает .NET разработчику и, как это использовать в своих целях, однако вижу, что
индекс нудности статьи приближается к критическому, поэтому буду закругляться. С целью понижения все того же показателя
я намеренно избегал аспектов безопасности и, например, ответа на вопрос ”А как вообще возможна аутентификация в
архитектуре REST, если читателю на протяжении всей этой статьи внушалось, что RESTful сервис должен быть stateless?”.

А выводы статьи будут следующими:
- Филдинг со своими принципами REST ничего не изобрел, а просто собрал в одну диссертацию то, что уже существовало в
  каком-то виде и изложил то, как можно получать максимальную выгоду из уже сформировавшейся архитектуры сети.
- SOAP и REST – не конкуренты. Они представляют разные весовые категории и вряд ли найдется задача, для которой будет
  сложно сказать, какой подход рациональнее использовать – SOAP или REST. Поэтому «религиозные» убеждения в вопросах
  выбора архитектуры для веб-сервиса вряд ли будут полезны.

________________________________________________________________________________________________________________________
См. комментарии к статье в исходнике.