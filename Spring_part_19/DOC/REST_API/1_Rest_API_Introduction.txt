См. исходник (RUS): https://habr.com/ru/articles/483202/
См. оригинал (ENG): https://www.springboottutorial.com/introduction-to-rest-api
________________________________________________________________________________________________________________________
****** Введение в REST API — RESTful веб-сервисы ******

REST - означает REpresentational State Transfer (Википедия: «передача состояния представления»). Это популярный
архитектурный подход для создания API в современном мире.

________________________________________________________________________________________________________________________
*** Что такое REST? ***

REST расшифровывается как REpresentational State Transfer. Это был термин, первоначально введен Роем Филдингом
(Roy Fielding), который также был одним из создателей протокола HTTP. Отличительной особенностью сервисов REST
является то, что они позволяют наилучшим образом использовать протокол HTTP. Теперь давайте кратко рассмотрим HTTP.

________________________________________________________________________________________________________________________
*** Краткий обзор HTTP ***

Давайте сначала откроем браузер и зайдем на веб-страницу: см. DOC/REST_API/ARTICLE_IMAGE/1_IMG_1.png
А затем щелкните на одной из страниц результатов: см. DOC/REST_API/ARTICLE_IMAGE/1_IMG_2.png
Далее мы можем нажать на ссылку на странице, на которой мы оказались: см. DOC/REST_API/ARTICLE_IMAGE/1_IMG_3.png
И перейти на другую страницу: см. DOC/REST_API/ARTICLE_IMAGE/1_IMG_4.png

Вот как мы обычно просматриваем веб страницы.

Когда мы просматриваем страницы в Интернете, за кулисами происходит много вещей. Ниже приведено упрощенное представление
о том, что происходит между браузером и серверами, работающими на посещаемых веб-сайтах:
см. DOC/REST_API/ARTICLE_IMAGE/1_IMG_5_SERVER_BROWSER_COMMUNICATION.png

________________________________________________________________________________________________________________________
*** Протокол HTTP ***

Когда вы вводите в браузере URL-адрес, например www.google.com, на сервер отправляется запрос на веб-сайт,
идентифицированный URL-адресом. Затем этот сервер формирует и выдает ответ. Важным является формат этих запросов и
ответов. Эти форматы определяются протоколом HTTP — Hyper Text Transfer Protocol.

Когда вы набираете URL в браузере, он отправляет запрос GET на указанный сервер. Затем сервер отвечает HTTP-ответом,
который содержит данные в формате HTML — Hyper Text Markup Language. Затем браузер получает этот HTML-код и отображает
его на экране.

Допустим, вы заполняете форму, присутствующую на веб-странице, со списком элементов. В таком случае, когда вы нажимаете
кнопку «Submit» (Отправить), HTTP-запрос POST отправляется на сервер.

________________________________________________________________________________________________________________________
*** HTTP и RESTful веб-сервисы ***

HTTP обеспечивает базовый уровень для создания веб-сервисов. Поэтому важно понимать HTTP. Вот несколько ключевых
абстракций:
- Ресурс - Ключевая абстракция, на которой концентрируется протокол HTTP. Ресурс — это все, что вы хотите показать
           внешнему миру через ваше приложение. Например, если мы пишем приложение для управления задачами, экземпляры
           ресурсов будут следующие:
            - Конкретный пользователь;
            - Конкретная задача;
            - Список задач;
- URI ресурса - Когда вы разрабатываете RESTful сервисы, вы должны сосредоточить свое внимание на ресурсах приложения.
                Способ, которым мы идентифицируем ресурс для предоставления, состоит в том, чтобы назначить ему URI -
                универсальный идентификатор ресурса. Например:
                    - Создать пользователя: POST /users
                    - Удалить пользователя: DELETE /users/1
                    - Получить всех пользователей: GET /users
                    - Получить одного пользователя: GET /users/1

________________________________________________________________________________________________________________________
*** REST и Ресурсы ***

Важно отметить, что с REST вам нужно думать о приложении с точки зрения ресурсов:
- Определите, какие ресурсы вы хотите открыть для внешнего мира;
- Используйте глаголы, уже определенные протоколом HTTP, для выполнения операций с этими ресурсами;

Вот как обычно реализуется служба REST:
- Формат обмена данными: здесь нет никаких ограничений. JSON — очень популярный формат, хотя можно использовать и
  другие, такие как XML;
- Транспорт: всегда HTTP. REST полностью построен на основе HTTP;
- Определение сервиса: не существует стандарта для этого, а REST является гибким. Это может быть недостатком в некоторых
  сценариях, поскольку потребляющему приложению может быть необходимо понимать форматы запросов и ответов. Однако широко
  используются такие языки определения веб-приложений, как WADL (Web Application Definition Language) и Swagger.

REST фокусируется на ресурсах и на том, насколько эффективно вы выполняете операции с ними, используя HTTP.

________________________________________________________________________________________________________________________
*** Компоненты HTTP ***

HTTP определяет следующую структуру запроса:
- строка запроса (request line) — определяет тип сообщения;
- заголовки запроса (header fields) — характеризуют тело сообщения, параметры передачи и прочие сведения;
- тело сообщения (body) — необязательное;

HTTP определяет следующую структуру ответного сообщения (response):
- строка состояния (status line), включающая код состояния и сообщение о причине;
- поля заголовка ответа (header fields);
- дополнительное тело сообщения (body);

________________________________________________________________________________________________________________________
*** Методы HTTP-запроса ***

Метод, используемый в HTTP-запросе, указывает, какое действие вы хотите выполнить с этим запросом. Важные примеры:
- GET: получить подробную информацию о ресурсе;
- POST: создать новый ресурс;
- PUT: обновить существующий ресурс;
- DELETE: Удалить ресурс;

________________________________________________________________________________________________________________________
*** Код статуса ответа HTTP ***

Код состояния всегда присутствует в ответе HTTP. Типичные примеры:
- 200 — успех;
- 404 — страница не найдена;
- и т.п. см.:
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html
https://en.wikipedia.org/wiki/List_of_HTTP_status_codes

________________________________________________________________________________________________________________________
*** Резюме ***

В REST - HTTP является основным строительным блоком сервисов. HTTP — это протокол, который используется для определения
структуры запросов и ответов браузера. Мы видели, что HTTP имеет дело главным образом с ресурсами, доступными на
веб-серверах.

Ресурсы идентифицируются с помощью URI, а операции над этими ресурсами выполняются с использованием глаголов,
определенных протоколом HTTP.

Службы REST наилучшим образом используют функции, предлагаемые HTTP, для предоставления ресурсов внешнему миру. REST не
накладывает никаких ограничений на форматы представления ресурсов или на определение сервиса.

________________________________________________________________________________________________________________________
*** Дополнительное чтение ***

Foundations of RESTful Architecture - https://dzone.com/refcardz/rest-foundations-restful?chapter=1
Developing REST APIs - https://dzone.com/articles/developing-rest-apis
________________________________________________________________________________________________________________________
См. комментарии к статье в русском исходнике.