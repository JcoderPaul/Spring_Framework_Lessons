См. исходник (RUS): https://habr.com/ru/articles/483322/
См. оригинал (ENG): https://www.springboottutorial.com/rest-api-code-first-approach
________________________________________________________________________________________________________________________
****** Разработка REST API - что такое Code First подход? ******

Разработка хорошего REST API важна для того, чтобы иметь хорошие микросервисы. Подход Code-First фокусируется на
генерации контракта из кода. Это наилучший из возможных подходов?

________________________________________________________________________________________________________________________
*** Что такое Code-First подход? ***

Всякий раз, когда вы разрабатываете сервис, такой как REST API или SOAP API, вы можете выбрать один из двух подходов:
- Code First и генерируйте контракт из кода;
- Contract First и разработка кода на основе контракта;

Давайте начнем с быстрого примера для Code First.

________________________________________________________________________________________________________________________
*** Spring Boot Code First пример REST API ***

Мы разрабатываем RESTful веб-сервис, используя Spring Boot Framework для генерации API. Например, в API
retrieveAllUsers() - мы открываем URI «/users» и возвращаем всех пользователей (ресурс / users), вызывая метод сервиса,
когда мы переходим по URL, то возвращаем всех пользователей: см. DOC/REST_API/ARTICLE_IMAGE/4_IMG_8_ALL_USERS.png

Аналогичным образом определены и другие сервисные методы, каждый из которых имеет свой собственный URI. В этом примере
мы берем код и генерируем из него документацию. В этой документации указано, как пользователь может использовать сервис.
Для этого мы используем формат документации Swagger: см. DOC/REST_API/ARTICLE_IMAGE/4_IMG_9_SWAGGER_API_TITLE.png

Swagger позволяет нам генерировать документацию из кода. Например, вот что Swagger генерирует для запроса на получение
всех пользователей: см. DOC/REST_API/ARTICLE_IMAGE/4_IMG_10_SWAGGER_RESPONSE.png

Он выводит тип получаемого нами ответного сообщения и сопровождающий его статус ответа. Вы даже можете вызвать этот
сервис из Swagger и получить ответ: см. DOC/REST_API/ARTICLE_IMAGE/4_IMG_11_SWAGGER_RESPONSE_BODY.png

Вы также можете отправить запрос POST в "/users": см. DOC/REST_API/4_IMAGE/HTTP_IMG_12_SWAGGER_POST_RESPONSE.png

Swagger сообщит нам, как структурировать сообщение запроса и указать внутри него отдельные форматы полей. Он также
сообщит вам тип ответа, который вы получите, вместе с кодом ответа. То, что Swagger генерирует из кода, называется
контрактом.

________________________________________________________________________________________________________________________
*** Преимущества Code First ***

Основные преимущества этого подхода:
- Контракты с минимальными усилиями: генерация контракта не требует дополнительных усилий. Это всего лишь побочный
  продукт разработки сервиса, так как он может быть автоматически сгенерирован из кода;
- Синхронизация кода и контракта: поскольку контракт генерируется из кода, они всегда синхронизируются друг с другом;

________________________________________________________________________________________________________________________
*** Недостатки Code First ***

Недостатки этого подхода заключаются в следующем:
- Нет параллельной разработки. Производитель услуг и потребители услуг не могут разрабатывать параллельно. Сначала
  необходимо разработать сервис, затем сгенерировать контракт, и только после этого можно написать код потребителя,
  который будет придерживаться контракта. Без понимания контракта потребитель не может быть разработан.
- Нет цели для команд. Поскольку договор не может быть известен до того, как сервис будет разработан, не существует
  цели для различных заинтересованных сторон в разработке. Следовательно, есть все шансы, что направления будут
  отклоняться, и будут внесены ненужные изменения, что приведет к напрасной трате усилий.
- Нет кроссплатформенной совместимости. На некоторых старых платформах не так просто сгенерировать контракт из кода.
  В результате этого для сгенерированных контрактов довольно часто возникает несовместимость между платформами.

________________________________________________________________________________________________________________________
*** Дополнительное чтение ***

How to Develop a RESTful Web Service in ASP.NET Web API -
https://dzone.com/articles/step-by-step-how-to-develop-a-restful-web-service
________________________________________________________________________________________________________________________
См. комментарии к статье в русском исходнике.