****** Команды Docker для управления образами ******

Значимая единица в Docker — образы. Управление ими во многом похоже на управление контейнерами, но есть ряд отличий,
которые важно учитывать. Причем как в командах, так и в опциях.

У описанных ниже команд есть общий синтаксис, который выглядит так:
- $ docker image [название команды].

Названия, собственно, ниже:
------------------------------------------------------------------------------------------------------------------------
- build — собирает образ с нуля.

          С помощью этой команды можно собрать образ, используя заранее подобранные параметры. Собираются одни из данных,
          хранящихся в файлах Dockerfile. Они находятся по определенным URL или заранее загружены в файловую систему.

          Синтаксис следующий: docker image build [опции] название и адрес файла Dockerfile, из которого будет собран образ.

          Например, если вы хотите собрать образ с названием Timeweb и тегом host в директории moy_repositoriy, то надо
          ввести в терминал:

                docker image build -t moy_repositoriy/timeweb:host

          Образами можно делиться через сервис Docker Hub. Тогда ими смогут пользоваться другие пользователи Docker, указав
          при сборке соотвествующий адрес. Для входа в Hub используется команда docker login.

------------------------------------------------------------------------------------------------------------------------
- push — отправляет образ в реестр.

         После сборки образа на диске хостинга его можно разместить в Docker Hub с помощью отдельной команды.

         Синтаксис следующий: docker image push [опции] название и адрес, где будет размещен образ

         К примеру, чтобы отправить в хаб образ Timeweb, который мы создали ранее, нужно ввести в терминал:

                docker image push moy_repositoriy/timeweb:host

         Он будет размещен по адресу, указанному в команде push. После этого его смогут вытащить другие пользователи.

------------------------------------------------------------------------------------------------------------------------
- pull — загружает готовый образ с необходимыми для работы параметрами.

         В Docker Hub находится большой список уже готовых образов, которые были созданы другими пользователями. Чтобы не
         собирать новые из Dockerfile, можно скачать уже имеющиеся и работать с ними. Чтобы их вытащить, нужна команда pull.

         Синтаксис следующий: docker image pull [опции] название и адрес, где будет размещен образ.

         К примеру, чтобы вытащить c docker хаба образ Timeweb, который мы создали ранее, нужно ввести в терминал:

                docker image pull moy_repositoriy/timeweb:host

         Аналогичным образом его смогут вытаскивать другие пользователи, обращаясь к адресу и названию образа, которые вы
         указывали.

------------------------------------------------------------------------------------------------------------------------
- ls — показывает все существующие образы.

       Команда docker image ls отвечает за отображение в терминале дополнительной информации об образах. Она показывает
       их список (как и в случае с контейнерами) и информацию о размере каждого.

       Синтаксис следующий: docker image pull [опции][адрес репозитория:тег].

       К текущей команде можно добавить другие данные с помощью отдельных ключей:
       - a - увеличивает список отображаемых образов за счет отображения даже промежуточных;
       - digests - добавляет в вывод команды еще и дайджесты;
       - f - фильтрует выдачу по заранее определенным условиям;
       - format - меняет формат отображения данных на основе шаблона Go;
       – no-trunc - отключает усечение информации в терминале;
       - q - показывает ID вместо названий образов;

------------------------------------------------------------------------------------------------------------------------
- history — показывает каждый слой образа в ретроспективе, отображая ряд полезных сведений.

            Показывает своего рода историю образа. Речь идет о «слоях», то есть промежуточных вариациях образа, входящих
            в его состав. Команда history показывает их названия, размер и дату создания.

            Синтаксис следующий: docker history [опции] название образа.

            Например, чтобы отобразить слои образа Timeweb, введем в терминал:

                    docker image history timeweb

------------------------------------------------------------------------------------------------------------------------
- inspect — рассказывает все, что известно об образе, включая данные, касающиеся отдельных слоев.

            Отображает подробную информацию из Docker после обращения к конкретному образу.

            Синтаксис следующий: docker inspect [опции] название или ID контейнера [название контейнера или образа].

            По умолчанию отображает данные в формате JSON. Можно использовать дополнительные опции –format для смены
            формата данных. Опция -s показывает размер инспектируемых элементов.

            docker inspect –format=‘{{.Config.Image}}’
            $INSTANCE_ID — пример вывода информации о названии образа

            docker inspect –format=‘{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}’
            $INSTANCE_ID — пример вывода информации об IP-адресе

------------------------------------------------------------------------------------------------------------------------
- rm — удаляет образ Docker из системы.

       Команда удаления одного или нескольких образов Docker, найденных на диске вашего хостинга.

       Синтаксис следующий: docker rm [опции] название и путь до образа.

       Чтобы удалить образ Timeweb из системы, нужно ввести:

                docker rm moy_repositoriy/testing_timeweb:host

       Эта команда позволяет выбирать только образы, которые хранятся локально. Удаленные элементы из репозитория удалить
       не получится.

       Чтобы удалить все локальные образы, обнаруженные в системе, введем в терминал:

                docker image rm $(docker images -a -q)

------------------------------------------------------------------------------------------------------------------------
- images — списком показывает все образы Docker, найденные на диске.

           Команда показывает все образы Docker, которые расположены на жестком диске вашего сервера (или локально).

           Вывод команды docker images выглядит примерно так:
           _______________________________________________________________
            REPOSITORY  |  TAG     |  IMAGE ID     | CREATED      |  SIZE
           _______________________________________________________________
            fedora      |  new     |  990fqD00124  | 12 hours ago | 209MB
            httpd       |  new     |  24eaet001s0s | 24 hours ago | 152MB
            ubuntu      |  recent  |  30e102f4fas2 | 1 week ago   | 179MB
            postgres    |  latest  |  f7d9a0d4223b | 6 weeks ago  | 417MB
           _______________________________________________________________

           Здесь отображаются следующие данные, касающиеся образа:
           - REPOSITORY — это репозиторий, в котором хранится образ.
           - TAG — привязанный к образу тег (прописывается в конце команды после двоеточия,
                   например, docker image build moy_repositoriy/testing_timeweb:host.
           - IMAGE ID — код образа, используемый вместо имени.
           - CREATED — время создания (срок жизни), показывает, как давно был создан образ,
                       неделю назад, 12 часов назад и т.п.
           - SIZE — пространство, которое образ занимает на диске.

------------------------------------------------------------------------------------------------------------------------

****** Общие команды Docker ******

Это общие операции, не привязанные к работе с конкретными сущностями типа образов и контейнеров. Но они тоже пригодятся
при использовании Docker:
- $ docker version — показывает техническую информацию о самом Docker. Как о клиенте, так и о сервере. Она отобразит
                     версию клиента и сервера Docker.
- $ docker login — авторизует пользователя в реестре Docker. Позволяет авторизоваться в реестре образов Docker Hub.
                   Загружать туда образы и выгружать уже готовые к себе.
- $ docker system prune — выполняет некую чистку, удалив из системы контейнеры, которые уже не используются, ненужные
                          сети и образы без имен и меток. По умолчанию эта команда удаляет только данные без тегов, но
                          можно настроить ее так, чтобы из системы были удалены все неиспользуемые элементы.

                          Допустим, чтобы стереть из Docker все образы и сверху зацепить еще тома, то надо ввести в
                          терминал:

                          docker system prune –all –volumes