- описание не полное запустить команду: docker help

****** Команды для управления контейнерами ******

Управление контейнерами и образами в Docker мало чем отличается от управления другими приложениями в терминале Linux.
Принцип тот же – вводим текст и получаем результат. Сначала надо указать ключевое слово Docker, потом указать команду,
которую надо выполнить, а затем объект применения команды, аргументы, опции и прочие дополнения. Типичная операция,
выполняемая в Docker, выглядит вот так:

        docker container start

Для того чтобы обратиться к конкретному контейнеру или образу в Docker, используются их ID или названия, придуманные
разработчиком. Допустим, для создания и запуска контейнера с названием new_container надо ввести:

        docker container run new_container

У команд существуют опции и аргументы. Контейнер — ключевая единица в Docker (наряду с Образом-Image).

У описанных ниже команд есть общий синтаксис, который выглядит так:
docker container [название команды].

Названия, собственно, ниже:
------------------------------------------------------------------------------------------------------------------------
- create — создает контейнер из выбранного образа.

           Из названия понятно, что речь идет о создании нового контейнера. Это основная функция Docker, с нее
           начинается его работа. Синтаксис следующий:

                docker create [опции] название образа [дополнительные команды][аргументы].

           В квадратных скобках указываются опциональные компоненты команды. Использовать их необязательно, но можно
           оптимизировать создаваемый контейнер под свои задачи.

           К примеру, добавить ссылку на другой контейнер с помощью тега –link. Или подключить Standard Input с помощью
           команды:

                docker create -a STDIN [название образа]

           Либо создать контейнер из образа операционной системы Ubuntu, добавив подключение к терминалу и запуск bash
           при каждом старте Docker:

                docker create -t -I ubuntu bash

           Только при наличии терминала можно управлять контейнером. Поэтому его нужно обязательно запрашивать при
           каждом запуске.

------------------------------------------------------------------------------------------------------------------------
- start — активирует уже существующий контейнер.

          В отличие от предыдущей команды, эта запускает контейнер, который существует, но находится в нерабочем
          состоянии. Синтаксис следующий:

                docker start [опции] название или ID контейнера [название или ID контейнера].

          Вводим команду, а потом указываем название контейнера, чтобы его запустить:

                docker start 49920 /* docker start 49920 */

                docker start testing_docker /* старт через название testing_docker */

          Какой из вариантов использовать, решает разработчик, ориентируясь на собственные предпочтения. Технических
          отличий нет.

------------------------------------------------------------------------------------------------------------------------
- run — создает новый контейнер и сразу включает его.

        Комбинирует две вышеописанные команды (create + start). Сначала создает новый контейнер, а потом тут же его
        включает. Синтаксис следующий:

                docker run [опции] название образа [команды][аргументы].

        Практика та же, что мы видели в синтаксисе команды docker create. Разница в одном слове и доступных опциях.

        Чтобы создать контейнер из образа Ubuntu и тут же взять контроль над ним через командную строку, нужно сделать
        запрос терминала через опции команды, к примеру:

                docker run -it ubuntu root@d8e1140989525:/#

        Используется для подключения к контейнеру с возможностью передавать ему команды после создания.

------------------------------------------------------------------------------------------------------------------------
- ls (- ps) — отображают все существующие контейнеры.

              Обе команды выполняют одну и ту же задачу. Просто одна из них использовалась раньше, а другая появилась
              позднее.

              Команда docker ps отображает в терминале все запущенные контейнеры. При добавлении опции -a в список
              попадают все контейнеры, созданные в системе (спящие и запущенные).

              В вывод команды попадают следующие параметры:
              ID — то есть кодовое значение конкретного контейнера.
              IMAGE — образ, используемый контейнером.
              COMMAND — список команд, которые должны выполняться сразу после запуска.
              CREATED — статус и время, когда контейнер бы создан (допустим, «35 минут назад»).
              STATUS — текущее состояние – включен ли и время работы с последнего запуска. Тут может отображаться код
                       выхода и время, когда он произошел.
              PORTS — порты, используемые контейнером из списка.
              NAMES — более понятные в сравнении с ID имена, которые можно точно так же использовать для исполнения
                      команд или поиска.

              При желании можно использовать опцию volume, чтобы в терминале отображались только тома, являющиеся
              предпочтительным механизмом хранения данных в Docker.

Пример:

$ docker ps

CONTAINER ID   IMAGE      COMMAND                  CREATED          STATUS          PORTS                    NAMES
5657620e4ed1   postgres   "docker-entrypoint.s…"   50 seconds ago   Up 48 seconds   0.0.0.0:5433->5432/tcp   my-postgres

------------------------------------------------------------------------------------------------------------------------
- inspect — подробнее рассказывает о выбранном контейнере.

            Отображает подробную информацию из Docker после обращения к конкретному контейнеру. Синтаксис следующий:

                    docker inspect [опции] название или ID контейнера [название или ID контейнера].

            По умолчанию отображает данные в формате JSON. Можно использовать дополнительную опцию –format для смены
            формата данных.

                    docker inspect –format=‘{{range .NetworkSettings.Networks}}{{.MacAddress}}{{end}}’
                    $INSTANCE_ID — пример вывода информации о MAC-адресе

                    docker inspect –format=‘{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} ->
                                                               {{(index $conf 0).HostPort}} {{end}}’
                    $INSTANCE_ID — пример вывода информации о портах

------------------------------------------------------------------------------------------------------------------------
- logs — выводит в консоль логи (то есть журнал событий).

         Одна из команд, позволяющая подробнее ознакомиться с тем, как работает Docker. Точнее одна из его запущенных
         единиц. Показывает, как функционирует контейнер и что в текущий момент с ним происходит. Выводит некий журнал
         данных.

         Если указать ключ –follow и название контейнера, то в терминал в реальном времени будут выводиться логи Docker.
         Так можно беспрерывно наблюдать за его работой и возможным появлением ошибок.

------------------------------------------------------------------------------------------------------------------------
- stop — пытается остановить выбранный контейнер, отправив ему сигнал SIGTERM, требующий завершить всю активность и
         сохранить пользовательские данные. Если ответ занимает слишком много времени, то следом посылает сигнал SIGKILL,
         чтобы «убить» процесс без сохранения данных.

         Выполняет функцию остановки работы контейнера. Синтаксис следующий:

                docker stop [опции] название или ID контейнера [название или ID контейнера].

         Например, чтобы выключить контейнер с именем Timeweb, надо ввести в терминал:

                docker stop timeweb

         Аналогично с ID. Просто имя надо заменить на уникальный код, привязанный к контейнеру:

                 docker stop 14490

------------------------------------------------------------------------------------------------------------------------
- kill — выполняет ту же задачу, что и предыдущая команда -stop, но пропускает шаг с отправкой SIGTERM. Сразу выключает
         контейнер, игнорируя сохранение пользовательских данных.

------------------------------------------------------------------------------------------------------------------------
- rm — удаляет выбранный контейнер (он должен быть выключен, чтобы команда сработала).

       Команда удаления одного или нескольких контейнеров Docker, найденных на диске вашего хостинга. Синтаксис следующий:

            docker rm [опции] название или ID контейнера [название или ID контейнера].

       Чтобы удалить сразу несколько контейнеров с разными названиями и ID, нужно ввести:

            docker rm 45fs testing_timeweb

       Перед тем как удалить контейнер, нужно его выключить. Для этого надо воспользоваться командой:

            docker stop

------------------------------------------------------------------------------------------------------------------------
- restart - команда, связанная с рабочим состоянием. Она выполняет перезапуск выбранного контейнера.

            Синтаксис следующий:

                    docker restart [опции] название или ID контейнера [название или ID контейнера].

            Вводите команду, а потом указываете название контейнера, чтобы его перезапустить:

                    docker restart 49920 /* перезапуска через ID контейнера 49920 */

                    docker restart testing_timeweb /* перезапуска через название testing_timeweb */

------------------------------------------------------------------------------------------------------------------------