****** Annotation Interface DynamicPropertySource ******

Пакет: org.springframework.test.context

@Target(METHOD)
@Retention(RUNTIME)
@Documented
public @interface DynamicPropertySource
________________________________________________________________________________________________________________________

Аннотация уровня метода для интеграционных тестов, которым необходимо добавить свойства с динамическими значениями в
Environment набор PropertySources. Эта аннотация и ее вспомогательная инфраструктура изначально были разработаны для
того, чтобы свойства тестов на основе Testcontainers можно было легко использовать в интеграционных тестах Spring.
Однако эту функцию также можно использовать с любой формой внешнего ресурса, жизненный цикл которого поддерживается
вне файла ApplicationContext.

Методы, помеченные знаком, @DynamicPropertySource должны быть static и иметь один DynamicPropertyRegistry аргумент,
который используется для добавления пар имя-значение Environment в набор PropertySources. Значения являются динамическими
и предоставляются через объект Supplier, который вызывается только при разрешении свойства. Обычно ссылки на методы
используются для предоставления значений, как в примере ниже.

Начиная с Spring Framework 5.3.2, динамические свойства методов, помеченных с помощью, @DynamicPropertySource будут
наследоваться от включающих тестовых классов, аналогично наследованию от суперклассов и интерфейсов. Подробности см.
@NestedTestConfiguration.

!!! ПРИМЕЧАНИЕ !!! Если вы используете @DynamicPropertySource базовый класс и обнаруживаете, что тесты в подклассах
                   терпят неудачу из-за того, что динамические свойства изменяются между подклассами, вам может
                   потребоваться аннотировать свой базовый класс, как @DirtiesContext, чтобы гарантировать, что
                   каждый подкласс получит свой собственный ApplicationContext с правильными динамическими свойствами.

Приоритет: Динамические свойства имеют более высокий приоритет, чем свойства, загруженные из @TestPropertySource среды
           операционной системы, свойств системы Java или источников свойств, добавленных приложением декларативно с
           помощью @PropertySource или программно. Таким образом, динамические свойства можно использовать для
           выборочного переопределения свойств @TestPropertySource, загруженных через источники системных свойств и
           источники свойств приложений.

Пример:

************************************************************************************************************************
 @SpringJUnitConfig(...)
 @Testcontainers
 class ExampleIntegrationTests {

     @Container
     static GenericContainer redis =
         new GenericContainer("redis:5.0.3-alpine").withExposedPorts(6379);

     // ...

     @DynamicPropertySource
     static void redisProperties(DynamicPropertyRegistry registry) {
         registry.add("redis.host", redis::getHost);
         registry.add("redis.port", redis::getFirstMappedPort);
     }

 }
************************************************************************************************************************

________________________________________________________________________________________________________________________
См. так же: DynamicPropertyRegistry,
            ContextConfiguration,
            TestPropertySource,
            PropertySource,
            DirtiesContext
________________________________________________________________________________________________________________________
Офф. док (ENG):
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/DynamicPropertySource.html
________________________________________________________________________________________________________________________