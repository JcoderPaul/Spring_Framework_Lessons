Исходник (ENG): https://spring.io/projects/spring-data

-----------------------------------------------------------------------------------------------------------------
*** Spring Data ***

Spring Data - предоставить знакомую и согласованную модель программирования на основе Spring для доступа к данным,
сохраняя при этом особые характеристики базового хранилища данных.

Spring Data упрощает использование технологий доступа к данным, реляционных и нереляционных баз данных, map-reduce
(см. *) инфраструктур и облачных служб данных. Это зонтичный проект, который содержит множество подпроектов,
специфичных для конкретной базы данных. Проекты разрабатываются в сотрудничестве со многими компаниями и
разработчиками, стоящими за этими интересными технологиями.

(* - map-reduce - модель распределённых вычислений, представленная компанией Google, используемая для параллельных
                    вычислений над очень большими, вплоть до нескольких петабайт, наборами данных в компьютерных
                    кластерах.)

-----------------------------------------------------------------------------------------------------------------
Основные функции Spring Data:
- Мощный репозиторий и пользовательские абстракции отображения объектов.
- Динамическое создание запросов на основе имен методов хранилища.
- Реализация базовых классов предметной области, обеспечивающих базовые свойства.
- Поддержка прозрачного аудита (создано, последнее изменение)
- Возможность интеграции собственного кода репозитория.
- Простая интеграция Spring через JavaConfig и пользовательские пространства имен XML.
- Расширенная интеграция с контроллерами Spring MVC.
- Экспериментальная поддержка кросс-хранилищьного пространства данных (Это означает, что объект может частично
  храниться, например, в MySQL, а частично — в Neo4j. Что позволяет существующим приложениям на основе JPA
  использовать хранилища данных NoSQL для развития определенных частей своей модели данных. Возможные варианты
  использования включают добавление социальных сетей или геопространственной информации в существующие приложения.)

-----------------------------------------------------------------------------------------------------------------
Основные модули:
- Spring Data Commons — основные концепции Spring, лежащие в основе каждого модуля Spring Data.
- Spring Data JDBC — поддержка репозитория Spring Data для JDBC.
- Spring Data R2DBC — поддержка репозитория Spring Data для R2DBC.
- Spring Data JPA — поддержка репозитория Spring Data для JPA.
- Spring Data KeyValue — Map-репозитории и SPI на основе Spring Data для простого создания модуля Spring Data для
                         хранилищ «ключ-значение».
- Spring Data LDAP — поддержка репозитория Spring Data для Spring LDAP .
- Spring Data MongoDB — поддержка объектных документов и репозиториев для MongoDB на основе Spring.
- Spring Data Redis — простая настройка и доступ к Redis из приложений Spring.
- Spring Data REST — экспортирует репозитории Spring Data как ресурсы RESTful, управляемые гипермедиа.
- Spring Data для Apache Cassandra — простая настройка и доступ к Apache Cassandra или крупномасштабным,
                                     высоко-нагруженным, ориентированным на работу с данными приложениям Spring.
- Spring Data для Apache Geode — простая настройка и доступ к Apache Geode для высоко-согласованных, low latency
                                 (с малой задержкой) и ориентированных на работу с данными приложений Spring.

-----------------------------------------------------------------------------------------------------------------
Сторонние модули:
- Spring Data Aerospike — модуль Spring Data для Aerospike.
- Spring Data ArangoDB — модуль Spring Data для ArangoDB.
- Spring Data Couchbase — модуль Spring Data для Couchbase.
- Spring Data Azure Cosmos DB — модуль Spring Data для Microsoft Azure Cosmos DB.
- Spring Data Cloud Datastore — модуль Spring Data для хранилища данных Google.
- Spring Data Cloud Spanner — модуль Spring Data для Google Spanner.
- Spring Data DynamoDB — модуль Spring Data для DynamoDB.
- Spring Data Elasticsearch — модуль Spring Data для Elasticsearch.
- Spring Data Hazelcast — обеспечивает поддержку репозитория Spring Data для Hazelcast.
- Spring Data Jest — модуль Spring Data для Elasticsearch на основе REST-клиента Jest.
- Spring Data Neo4j — поддержка объектных графов на основе Spring и репозитории для Neo4j.
- Oracle NoSQL Database SDK для Spring Data — модуль Spring Data для базы данных Oracle NoSQL и облачной службы
                                              Oracle NoSQL.
- Spring Data Vault — репозитории Vault, построенные на основе Spring Data KeyValue.
- Spring Data YugabyteDB — модуль Spring Data для распределенной базы данных SQL YugabyteDB.

-----------------------------------------------------------------------------------------------------------------
Release train **

Spring Data — это зонтичный проект, состоящий из независимых проектов с разной периодичностью выпуска. Для
управления портфелем публикуется спецификация с тщательно подобранным набором зависимостей для отдельного
проекта. У выпусков есть названия, а не версии, чтобы избежать путаницы с подпроектами.

Имена представляют собой алфавитную последовательность (чтобы вы могли сортировать их в хронологическом порядке)
с именами известных ученых-компьютерщиков и разработчиков программного обеспечения. Когда точечные выпуски
отдельных проектов накапливаются до критической массы или если в одном из них обнаруживается критическая ошибка,
которая должна быть доступна всем, цепочка выпусков будет выпускать «служебные выпуски» с именами, заканчивающимися
на «-SRX», где «Х» — число.

На данный момент в состав релиза входят следующие модули:
- Spring Data Commons;
- Spring Data JPA;
- Spring Data JDBC/R2DBC;
- Spring Data KeyValue;
- Spring Data LDAP;
- Spring Data MongoDB;
- Spring Data Redis;
- Spring Data REST;
- Spring Data for Apache Cassandra;
- Spring Data for Apache Geode;
- Spring Data Couchbase (community module);
- Spring Data Elasticsearch (community module);
- Spring Data Neo4j (community module);

(** - Release Train — это процесс координации релизов между командами. Все релизы происходят по фиксированному
                      графику, независимо от того, готовы фичи или нет. Поезд не ждёт вас. Если вы опоздали, то
                      ждите следующего.)