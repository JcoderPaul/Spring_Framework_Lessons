Исходник всего материала (ENG):
https://www.petrikainulainen.net/writing-tests-for-data-access-code/

См. настройка Spring проекта: https://start.spring.io/
------------------------------------------------------------------------------------------------------------------------
 ****** Writing Tests for Data Access Code ******
*** Написание тестов для кода доступа к данным ***

Написание тестов для кода доступа к данным затруднено, поскольку нам приходится находить ответы на многие сложные
вопросы, такие как:
- Какие тесты нам следует написать?
- Как нам следует настроить наши тесты?
- Что нам следует протестировать?
- Как мы можем писать тесты, которые проверяют правильные вещи, и при этом их легко читать и поддерживать?

Дело в том, что если мы сделаем неправильный выбор, наши тесты могут оказаться бесполезными, трудными для чтения и
«невозможными» в обслуживании. К сожалению, учиться этому придется на собственном горьком опыте.

Это руководство из пяти частей:
- Модульные тесты, это бесполезная трата - описывается, почему нам не следует писать модульные тесты для нашего кода
                                           доступа к данным, и объясняется, почему нам следует заменить модульные тесты
                                           интеграционными тестами.
- "Зеленая сборка" недостаточно хороша - описывает три правила, которым мы должны следовать, если хотим гарантировать,
                                         что наш код доступа к данным работает при его развертывании в производственной
                                         среде.
- Не тестируйте инфраструктуру - объясняет, почему нам следует писать тесты только для нашего собственного кода, и
                                 помогает нам определить код, который мы должны протестировать.
- Не забывайте о базе данных - описывает, почему нам следует писать детерминированные тесты, которые используют реальную
                               схему базы данных и подтверждают правильные вещи. Этот раздел помогает нам достичь этих
                               целей.
- Данные имеют значение - описывает три наиболее распространенные ошибки, которые мы можем допустить при использовании
                          наборов данных DbUnit, и помогает нам их избежать.