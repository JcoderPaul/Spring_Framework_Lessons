Исходник всего материала (ENG):
https://www.petrikainulainen.net/programming/testing/writing-tests-for-data-access-code-green-build-is-not-good-enough/
https://github.com/pkainulainen/jooq-with-spring-examples/tree/master/jooq-only/src/integration-test/java/net/petrikainulainen/spring/jooq/todo/repository
https://www.petrikainulainen.net/using-jooq-with-spring/

См. настройка Spring проекта: https://start.spring.io/
------------------------------------------------------------------------------------------------------------------------
****** Writing Tests for Data Access Code - Green Build Is Not Good Enough ******
                  *** Зеленая сборка недостаточно хороша ***

Первое, что нам нужно сделать, прежде чем мы сможем начать писать интеграционные тесты для нашего кода доступа к данным,
это решить, как мы будем настраивать наши тестовые примеры. У нас есть два варианта: правильный и неправильный.

К сожалению, многие разработчики делают неправильный выбор. Как мы можем избежать той же ошибки?

Мы можем принимать правильные решения, следуя этим трем правилам:

------------------------------------------------------------------------------------------------------------------------
*** Правило 1: Мы должны протестировать наше приложение. ***

Это правило кажется очевидным. К сожалению, многие разработчики используют другую конфигурацию в своих интеграционных
тестах, потому что она позволяет их тестам пройти успешно.

Это ошибка!

Мы должны задать себе такой вопрос:
- Хотим ли мы проверить, работает ли наш код доступа к данным, когда мы используем конфигурацию, используемую в
  производственной среде, или мы просто хотим, чтобы наши тесты прошли успешно?

Я думаю, что ответ очевиден. Если мы используем другую конфигурацию в наших интеграционных тестах, мы не проверяем,
как наш код доступа к данным ведет себя в производственной среде. Мы проверяем, как он себя ведет, когда запускаются
интеграционные тесты.

Другими словами, мы не можем убедиться, что наш код доступа к данным работает должным образом, когда мы развертываем
наше приложение в производственной среде.

Звучит ли это как достойная цель?

Если мы хотим проверить, что наш код доступа к данным работает при использовании производственной конфигурации, мы
должны следовать этим простым правилам:
- Мы должны настроить наши тесты, используя тот же класс конфигурации или файл конфигурации, который настраивает уровень
  персистентности нашего приложения.
- Наши тесты должны использовать то же транзакционное поведение, что и наше приложение.

Эти правила имеют два основных преимущества:
- Поскольку наши интеграционные тесты используют точно такую же конфигурацию, что и наше приложение, и имеют такое же
  поведение транзакций, наши тесты помогают нам убедиться, что наш код доступа к данным работает должным образом при
  развертывании нашего приложения в производственной среде.
- Нам не нужно поддерживать разные конфигурации. Другими словами, если мы вносим изменения в нашу производственную
  конфигурацию, мы можем проверить, что это изменение ничего не нарушает, не внося никаких изменений в конфигурацию
  наших интеграционных тестов.

------------------------------------------------------------------------------------------------------------------------
*** Правило 2: Мы можем нарушить правило первое ***

В разработке программного обеспечения не существует универсальных истин. Каждое основное правило действует только при
определенных условиях. Если условия изменятся, нам придется переоценить эти принципы. Это относится и к первому правилу.

Это хорошая отправная точка, но иногда нам приходится ее ломать.

Если мы хотим внести в нашу конфигурацию изменение, специфичное для теста, мы должны выполнить следующие шаги:
- Выяснить причину изменения.
- Перечислить преимущества и недостатки изменений.
- Если преимущества перевешивают недостатки, нам разрешено изменить конфигурацию наших тестов.
- Задокументировать причину, по которой было внесено это изменение. Это очень важно, поскольку дает нам возможность
  отменить это изменение, если мы обнаружим, что его внесение было плохой идеей.

Например, мы хотим запускать наши интеграционные тесты для базы данных в памяти (in-memory database), когда эти тесты
запускаются в среде разработки development environment (developer’s personal computer) (так называемом персональном
компьютере разработчика), поскольку это сокращает цикл обратной связи. Единственным недостатком этого изменения является
то, что мы не можем быть на 100% уверены, что наш код работает в производственной среде, поскольку он использует
реальную базу данных.

Тем не менее, преимущества этого изменения перевешивают его недостатки, поскольку мы по-прежнему можем (и должны)
проводить интеграционные тесты с реальной базой данных. Хороший способ сделать это — настроить наш CI-сервер для
запуска этих тестов.

Это, конечно, очень простой (и, возможно, немного наивный) пример, и зачастую ситуации, с которыми мы сталкиваемся,
гораздо сложнее. Вот почему мы должны следовать этому правилу:
- Если есть сомнения, оставьте тестовую конфигурацию.

------------------------------------------------------------------------------------------------------------------------
*** Правило 3: Мы не должны писать транзакционные интеграционные тесты ***

Одна из самых опасных ошибок, которую мы можем совершить, это изменить транзакционное поведение нашего приложения в
наших интеграционных тестах. Если мы делаем наши тесты транзакционными, мы игнорируем границу транзакции нашего
приложения и гарантируем, что тестируемый код выполняется внутри транзакции. Это чрезвычайно вредно, поскольку помогает
нам лишь скрыть возможные ошибки, а не выявить их.

Если вы хотите узнать, как транзакционные тесты могут подорвать надежность вашего набора тестов, вам следует прочитать
сообщение в блоге под названием: (https://nurkiewicz.com/2011/11/spring-pitfalls-transactional-tests.html) -
Spring Ловушки: транзакционные тесты, которые Томаш Нуркевич считает вредными. Он предоставляет множество полезных
примеров ошибок, которые скрываются при написании тестов интеграции транзакций.

Мы еще раз должны задать себе этот вопрос:
- Хотим ли мы проверить, работает ли наш код доступа к данным, когда мы используем конфигурацию, используемую в
  производственной среде, или мы просто хотим, чтобы наши тесты прошли успешно?

И снова ответ очевиден.

Краткое содержание:
- Наша цель не состоит в том, чтобы проверить, что наш код доступа к данным работает правильно при запуске наших тестов.
  Наша цель — убедиться, что оно работает правильно при развертывании нашего приложения в производственной среде.
- Каждое конкретное изменение теста создает разницу между нашей тестовой конфигурацией и производственной конфигурацией.
  Если эта разница слишком велика, наши тесты бесполезны.
- Транзакционные интеграционные тесты вредны, поскольку они игнорируют транзакционное поведение нашего приложения и
  скрывают ошибки, а не выявляют их.

Самое важное, что мы узнали из этой статьи,это вопрос: - Хотим ли мы проверить, работает ли наш код доступа к данным,
когда мы используем конфигурацию, используемую в производственной среде, или мы просто хотим, чтобы наши тесты прошли
успешно?

Если мы продолжим задавать этот вопрос, остальное должно быть для нас очевидно.