Исходник всего материала (ENG):
https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/
https://github.com/pkainulainen/spring-data-jpa-examples/tree/master

См. настройка Spring проекта: https://start.spring.io/
------------------------------------------------------------------------------------------------------------------------
****** Spring Data JPA Tutorial: Creating Database Queries From Method Names ******

Создание запросов к базе данных из имен методов. Это очень интересный функционал, т.к. мы можем создавать методы запроса,
используя генерацию запросов на основе имени метода (т.е. исходя из названия метода см. ниже).

------------------------------------------------------------------------------------------------------------------------
*** Создание методов запроса ***

Генерация запроса по имени метода — это стратегия создания запроса, при которой вызываемый запрос извлекается из имени
                                    метода запроса.

Мы можем создать методы запроса, использующие эту стратегию, следуя этим правилам:
- Имя нашего метода запроса должно начинаться с одного из следующих префиксов:
    - find…By;
    - read…By;
    - query…By;
    - count…By;
    - get…By;

- Если мы хотим ограничить количество возвращаемых результатов запроса, мы можем добавить ключевое слово 'First' или
  'Top' перед первым словом 'By'. Если мы хотим получить более одного результата, нам нужно добавить необязательное
  числовое значение к ключевым словам 'First' и 'Top'. Например, findTopBy, findTop1By, findFirstBy и findFirst1By
  в данном случае, они возвращают первый объект, соответствующий указанным критериям поиска.

- Если мы хотим выбрать уникальные результаты, нам нужно добавить ключевое слово 'Distinct' перед первым словом 'By'.
  Например, findTitleDistinctBy или findDistinctTitleBy означает, что мы хотим выбрать все уникальные заголовки,
  найденные в базе данных.

- Мы должны добавить критерии поиска нашего метода запроса после первого слова. Мы можем указать критерии поиска,
  комбинируя выражения свойств (property expressions -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.query-methods.query-property-expressions)
  с поддерживаемыми ключевыми словами (supported keywords -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repository-query-keywords).

- Если наш метод запроса указывает X условий поиска, мы должны добавить к нему X параметров метода. Другими словами,
  количество параметров метода должно быть равно количеству условий поиска. Также параметры метода должны быть заданы в
  том же порядке, что и условия поиска.

- Мы должны установить тип возвращаемого значения метода запроса, следуя правилам, описанным в предыдущей части
  этого руководства см. DOC/SpringDataJPATutorial/5_IntroductionQueryMethods.txt.

Следующие примеры демонстрируют, как мы можем создавать простые методы запроса, используя генерацию запросов на основе
стратегии имени метода:

Пример 1. Если мы хотим создать метод запроса, который возвращает запись задачи, идентификатор которой указан в качестве
          параметра метода, нам необходимо добавить один из следующих методов запроса в интерфейс нашего репозитория:

************************************************************************************************************************
import org.springframework.data.repository.Repository;

import java.util.Optional;

interface TodoRepository extends Repository<Todo, Long> {

    /*
    Возвращает найденную запись задачи, используя ее идентификатор
    ID в качестве критерия поиска. Если запись задачи не найдена,
    этот метод возвращает NULL.
    */
    public Todo findById(Long id);

    /*
    Возвращает Optional объект который содержит найденную todo entries
    сущность используя ее ID, как критерий поиска. Если сущность найдена
    не будет, метод вернет пустой Optional объект.
    */
    public Optional<Todo> findById(Long id);
}
************************************************************************************************************************

Пример 2. Если мы хотим создать метод запроса, который возвращает записи задач, заголовок или описание которых задано в
          качестве параметра метода, нам необходимо добавить следующий метод запроса в интерфейс нашего репозитория:

************************************************************************************************************************
import org.springframework.data.repository.Repository;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    /*
    Возвращает todo entries сущность, чье title или description передается,
    как параметр метода. Если todo сущности не будут найдены, этот метод
    вернет пустой list.
    */
    public List<Todo> findByTitleOrDescription(String title, String description);
}
************************************************************************************************************************

Пример 3. Если мы хотим создать метод запроса, который возвращает количество записей задач (в нашем ежедневнике, такое
          у нас приложение), заголовок которых указан в качестве параметра метода, нам необходимо добавить следующий
          метод запроса в интерфейс нашего репозитория:

************************************************************************************************************************
import org.springframework.data.repository.Repository;

interface TodoRepository extends Repository<Todo, Long> {

    /* Возвращает количество todo entries сущностей, чьи title переданы, как параметр метода */
    public long countByTitle(String title);
}
************************************************************************************************************************

Пример 4. Если мы хотим вернуть отдельные записи задач, заголовок которых указан в качестве параметра метода, нам
          необходимо добавить следующий метод запроса в интерфейс нашего репозитория:

************************************************************************************************************************
import org.springframework.data.repository.Repository;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    /*
    Возвращает отдельные todo entries сущности, чьи title переданы в
    качестве параметров в метод. Если todo entries сущности не были
    найдены метод возвращает пустой list.
    */
    public List<Todo> findDistinctByTitle(String title);
}
************************************************************************************************************************

Пример 5. Если мы хотим вернуть первые 3 записи задач, заголовок которых указан в качестве параметра метода, нам
          необходимо добавить в интерфейс нашего репозитория один из следующих методов запроса:

************************************************************************************************************************
import org.springframework.data.repository.Repository;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    /*
    Возвращает первые три todo entries сущности (записи из БД),
    чьи title переданы в качестве параметров метода. Если todo
    entries сущности найдены не были, метод вернет пустой list.
    */
    public List<Todo> findFirst3ByTitleOrderByTitleAsc(String title);

    /*
    Возвращает TOP три todo entries сущности (записи из БД),
    чьи title переданы в качестве параметров метода. Если todo
    entries сущности найдены не были, метод вернет пустой list.
    */
    public List<Todo> findTop3ByTitleOrderByTitleAsc(String title);
}
************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------
Дополнительное чтение:
- Справочное руководство Spring Data JPA: 3.4.2 Создание запроса -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.query-methods.query-creation

- Справочное руководство Spring Data JPA: 3.4.3 Выражения свойств -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.query-methods.query-property-expressions

- Справочное руководство Spring Data JPA: 3.4.4 Обработка специальных параметров -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.special-parameters

- Справочное руководство Spring Data JPA: 3.4.5 Ограничение результатов запроса -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repositories.limit-query-result

- Справочное руководство Spring Data JPA: 4.3.2 Создание запроса -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#jpa.query-methods.query-creation

- Справочное руководство Spring Data JPA: Приложение C: Ключевые слова запроса к репозиторию -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#repository-query-keywords
------------------------------------------------------------------------------------------------------------------------

Давайте двинемся дальше и создадим метод запроса, отвечающий требованиям нашей функции поиска.

------------------------------------------------------------------------------------------------------------------------
*** Реализация функции поиска ***

Мы можем реализовать функцию поиска, выполнив следующие шаги:
- Шаг 1. - Создаем метод запроса, имя которого начинается с префикса findBy... .
- Шаг 2. - Убеждаемся, что метод запроса возвращает записи задач, описание которых содержит заданный поисковый запрос.
           Мы можем сделать это, добавив к имени метода выражение свойства: 'Description' и ключевое слово: 'Contains'.
- Шаг 3. - Настраиваем метод запроса так, чтобы он возвращал информацию о записи задачи, если условия поиска истинно на
           предыдущем шаге 2 или последующем шаге 4. Мы можем сделать это, добавив ключевое слово: 'Or' к имени метода.
- Шаг 4. - Убеждаемся, что метод запроса возвращает записи задач, заголовок которых содержит заданный поисковый запрос.
           Мы можем сделать это, добавив к имени метода выражение свойства: 'Title' и ключевое слово: 'contains'.
- Шаг 5. - Убеждаемся, что поиск нечувствителен к регистру. Мы можем сделать это, добавив ключевое слово 'AllIgnoreCase'
           к имени метода.
- Шаг 6. - Добавляем два параметра метода в метод запроса:
                - Spring Data JPA использует параметр метода descriptionPart, когда гарантирует, что описание
                  возвращаемой записи задачи содержит заданный поисковый запрос.
                - Spring Data JPA использует параметр метода titlePart, когда гарантирует, что заголовок возвращаемой
                  записи задачи содержит заданный поисковый запрос.
- Шаг 7. - Устанавливаем тип возвращаемого объекта List<Todo>.

Исходный код интерфейса нашего репозитория выглядит следующим образом:

************************************************************************************************************************
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.Repository;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    List<Todo> findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart,
                                                                     String titlePart);
}
************************************************************************************************************************

Давайте продолжим и выясним, когда нам следует создавать методы запроса, используя генерацию запросов на основе
стратегии имени метода.

------------------------------------------------------------------------------------------------------------------------
*** Когда нам следует использовать генерацию запросов на основе стратегии имени метода? ***

Стратегия генерации запросов имеет следующие преимущества:
- Создание простых запросов происходит быстро.
- Имя метода нашего метода запроса описывает выбранные значения и используемые условия поиска.

Однако, стратегия генерации запросов имеет следующие недостатки:
- Особенности парсера имен методов определяют, какие запросы мы можем создавать. Если анализатор имени метода не
  поддерживает необходимое ключевое слово, мы не сможем использовать эту стратегию.
- Имена методов сложных запросов длинные и некрасивые.
- Нет поддержки динамических запросов.

Когда мы подумаем о плюсах и минусах этой стратегии и еще раз взглянем на наши примеры, станет ясно, что длина имени
нашего метода запроса определяет, следует ли нам использовать эту стратегию.

К сожалению «сверхдлинные» имена методов быстро становятся нечитаемыми. Если мы сравним имя метода: findById с именем
метода: findByDescriptionContainsOrTitleContainsAllIgnoreCase, мы заметим, что первый очень легко читается. Второе имя
метода прочитать не так легко, как первое, но прочитать его тоже возможно (пока). Это пограничный случай!

Поскольку считается приличным писать код, который будет легко читать, существует мнение, что нам следует использовать
эту стратегию только тогда, когда мы создаем простые запросы, имеющие только одно или два условия поиска.

Давайте продолжим и подведем итог:
- Если мы хотим использовать стратегию генерации запросов по имени метода, имя нашего метода запроса должно начинаться
  со специального префикса.
- Мы можем выбрать уникальные результаты, используя ключевое слово Distinct.
- Мы можем ограничить количество возвращаемых результатов запроса, используя ключевое слово Top или First.
- Мы можем создавать условия поиска, используя выражения свойств и ключевые слова, поддерживаемые Spring Data JPA.
- Нам следует использовать генерацию запроса на основе стратегии имени метода только в том случае, если наш запрос
  прост и имеет только одно или два условия поиска.

В следующей части рассмотрим, как мы можем создавать методы запроса с помощью аннотации @Query:
DOC/SpringDataJPATutorial/7_QueriesWithAnnotation.txt