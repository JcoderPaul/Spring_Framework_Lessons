Исходник всего материала (ENG):
https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-part-six-sorting/
https://github.com/pkainulainen/spring-data-jpa-examples/tree/master

См. настройка Spring проекта: https://start.spring.io/
------------------------------------------------------------------------------------------------------------------------
    ****** Spring Data JPA Tutorial: Sorting ******
*** Учебное пособие по Spring Data JPA: Сортировка ***

Мы научились создавать как статические, так и динамические запросы к базе данных с помощью Spring Data JPA. Мы также
можем реализовать функцию поиска, которая игнорирует регистр и возвращает записи задач (TODO), заголовок или описание
которых содержит заданный поисковый запрос.

Однако мы не обратили внимания на одну очень важную вещь: Мы понятия не имеем, как можно сортировать результаты
запросов к нашей базе данных.

Устраним эту проблему. Мы научимся сортировать результаты запросов к базе данных и добавим поддержку сортировки в
функцию поиска нашего примера приложения.

------------------------------------------------------------------------------------------------------------------------
*** Сортировка результатов запроса по именам наших методов запроса ***

Если мы создаем запросы к базе данных, используя генерацию запросов на основе стратегии имени метода, мы можем
сортировать результаты запросов нашей базы данных, используя ключевое слово OrderBy. Мы можем использовать ключевое
слово OrderBy, выполнив следующие действия:
- Шаг 1.- Добавим ключевое слово OrderBy к имени метода нашего запроса.
- Шаг 2.- Добавим имя свойства к имени метода нашего метода запроса и преобразуйте его первую букву в верхний регистр.
  Если мы хотим упорядочить результаты нашего запроса, используя заголовок записи задачи, нам нужно добавить строку:
  Title к имени метода нашего метода запроса.
- Шаг 3.- Опишем направление сортировки. Если мы хотим отсортировать результаты запроса в порядке возрастания, нам нужно
  добавить ключевое слово Asc к имени метода нашего метода запроса. С другой стороны, если мы хотим отсортировать
  результаты запроса в порядке убывания, нам нужно добавить ключевое слово Desc к имени метода нашего метода запроса.
- Шаг 4.- Если нам нужно отсортировать результаты запроса, используя несколько свойств, нам придется вернуться к шагу 2.

Следующие примеры демонстрируют, как мы можем использовать ключевое слово OrderBy:

Пример 1. Мы создали метод запроса, который возвращает записи задач, заголовок которых указан в качестве параметра
          метода. Если мы хотим отсортировать результаты запроса этого метода запроса в порядке возрастания, используя
          значение поля заголовка, нам нужно использовать следующий код:

************************************************************************************************************************
import org.springframework.data.repository.Repository;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    List<Todo> findByTitleOrderByTitleAsc(String title);
}
************************************************************************************************************************

Пример 2. Мы создали метод запроса, который возвращает записи задач, заголовок которых указан в качестве параметра
          метода. Если мы хотим отсортировать результаты запроса этого метода запроса в порядке возрастания, используя
          значение поля заголовка, и в порядке убывания, используя значение поля описания, мы должны использовать
          следующий код:

************************************************************************************************************************
import org.springframework.data.repository.Repository;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    List<Todo> findByTitleOrderByTitleAscDescriptionDesc(String title);
}
************************************************************************************************************************

Пример 3. Функция поиска нашего примера приложения возвращает записи задач, заголовок или описание которых содержит
          заданный поисковый запрос. Если мы хотим отсортировать результаты поиска в порядке возрастания, используя
          значение поля заголовка, нам необходимо добавить следующий метод запроса в интерфейс нашего репозитория:

************************************************************************************************************************
import org.springframework.data.repository.Repository;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    List<Todo> findByDescriptionContainsOrTitleContainsAllIgnoreCaseOrderByTitleAsc(String descriptionPart,
                                                                                    String titlePart);
}
************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------
Дополнительное чтение:
- Как сортировать по нескольким свойствам в запросах, производных от Spring Data (JPA)? @Переполнение стека -
  https://stackoverflow.com/questions/25380984/how-to-sort-by-multiple-properties-in-spring-data-jpa-derived-queries/25388068#25388068
------------------------------------------------------------------------------------------------------------------------

Давайте выясним, как мы можем сортировать результаты запроса с помощью строк запроса.
------------------------------------------------------------------------------------------------------------------------
*** Сортировка результатов запроса с помощью строк запроса ***

Если мы создаем запросы к базе данных, используя именованные запросы или аннотацию @Query, мы можем указать логику
сортировки в строках наших запросов.

Если наши запросы к базе данных являются именованными запросами или собственными запросами, использующими аннотацию
@Query, мы должны указать логику сортировки в строках наших запросов. Функция поиска нашего примера приложения
нечувствительна к регистру. Он возвращает записи задач, заголовок или описание которых содержит заданный поисковый
запрос.

Следующие примеры демонстрируют, как мы можем сортировать результаты наших запросов, изменяя существующие запросы
JPQL и SQL:

Пример 1. Если мы хотим изменить существующий запрос JPQL для сортировки результатов запроса в порядке возрастания,
          используя значение поля заголовка, мы должны использовать предложение JPQL ORDER BY.

Модифицированный запрос JPQL выглядит следующим образом:

************************************************************************************************************************
SELECT t FROM Todo t WHERE
    LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR
    LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))
    ORDER BY t.title ASC
************************************************************************************************************************

Пример 2. Если мы хотим изменить существующий запрос SQL для сортировки результатов запроса в порядке возрастания,
          используя значение поля заголовка, нам нужно использовать предложение SQL ORDER BY.

************************************************************************************************************************
SELECT * FROM todos t WHERE
    LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR
    LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))
    ORDER BY t.title ASC
************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------
Дополнительное чтение:
- Условие JPQL ORDER BY - https://www.objectdb.com/java/jpa/query/jpql/order
- Условие SQL ORDER BY - https://www.w3schools.com/sql/sql_orderby.asp
------------------------------------------------------------------------------------------------------------------------

Давайте выясним, как можно сортировать результаты запроса с помощью класса Sort.

------------------------------------------------------------------------------------------------------------------------
*** Сортировка результатов запроса с помощью класса сортировки ***

Если наши запросы к базе данных не являются именованными запросами или нативными запросами (named queries or native
queries), использующими аннотацию @Query, мы можем отсортировать результаты их запросов с помощью класса Sort. По сути,
это класс спецификации, который описывает параметры сортировки запросов к базе данных.

Мы можем отсортировать результаты нашего запроса, выполнив следующие шаги:
- Шаг 1. - Получим объект Sort, описывающий параметры сортировки вызванного запроса к базе данных.
- Шаг 2. - Передадим объект Sort правильному методу репозитория в качестве параметра метода.

------------------------------------------------------------------------------------------------------------------------
*** Получение объекта сортировки ***

Мы можем получить объект Sort, используя два разных метода: мы можем указать параметры сортировки вручную или
использовать веб-поддержку Spring Data (https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#core.web).

------------------------------------------------------------------------------------------------------------------------
*** Указание параметров сортировки вручную ***

Если мы хотим указать параметры сортировки вручную, (service class) сервисный класс (или другой компонент), который
хочет отсортировать результаты запроса, возвращаемые репозиторием Spring Data JPA, должен создать объект Sort и
передать его вызываемому методу репозитория.

Исходный код класса RepositoryTodoSearchService, использующего этот метод, выглядит следующим образом:

************************************************************************************************************************
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
final class RepositoryTodoSearchService implements TodoSearchService {

    private final TodoRepository repository;

    @Autowired
    public RepositoryTodoSearchService(TodoRepository repository) {
        this.repository = repository;
    }

    @Transactional(readOnly = true)
    @Override
    public List<TodoDTO> findBySearchTerm(String searchTerm) {
        Sort sortSpec = orderBy();

        /* Получить результаты поиска, вызвав предпочтительный метод репозитория */
        List<Todo> searchResults = ...

        return TodoMapper.mapEntitiesIntoDTOs(searchResults);
    }

    private Sort orderBy() {
        /* Создаем здесь новый объект Sort */
    }
}
************************************************************************************************************************

Следующие примеры демонстрируют, как мы можем реализовать private метод orderBy() :

Пример 1: Если нам необходимо отсортировать результаты запроса в порядке возрастания, используя значение поля заголовка,
          нам необходимо создать объект Sort, используя следующий код:

************************************************************************************************************************
private Sort orderBy() {
    return new Sort(Sort.Direction.ASC, "title");
}
************************************************************************************************************************

Пример 2: Если нам необходимо отсортировать результаты запроса в порядке убывания, используя значения полей заголовка
          и описания, нам необходимо создать объект Sort, используя следующий код:

************************************************************************************************************************
private Sort orderBy() {
    return new Sort(Sort.Direction.DESC, "title", "description");
}
************************************************************************************************************************

Пример 3: Если мы хотим отсортировать результаты запроса в порядке убывания, используя значение поля описания, и в
          порядке возрастания, используя значение поля заголовка, нам необходимо создать объект Sort, используя
          следующий код:

************************************************************************************************************************
private Sort orderBy() {
    return new Sort(Sort.Direction.DESC, "description").and(new Sort(Sort.Direction.ASC, "title"));
}
************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------
Дополнительное чтение:
- Javadoc класса Sort - https://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/domain/Sort.html
------------------------------------------------------------------------------------------------------------------------

Давайте выясним, как мы можем получить объекты Sort с помощью веб-поддержки Spring Data.

------------------------------------------------------------------------------------------------------------------------
*** Использование веб-поддержки Spring Data ***

Мы можем включить веб-поддержку Spring Data, аннотируя наш класс конфигурации контекста приложения аннотацией
@EnableSpringDataWebSupport. Соответствующая часть класса PersistenceContext, которая настраивает уровень
персистентности нашего примера приложения, выглядит следующим образом:

************************************************************************************************************************
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.data.web.config.EnableSpringDataWebSupport;
import org.springframework.transaction.annotation.EnableTransactionManagement;


@Configuration
@EnableJpaAuditing(dateTimeProviderRef = "dateTimeProvider")
@EnableJpaRepositories(basePackages = {"net.petrikainulainen.springdata.jpa.todo"})
@EnableTransactionManagement
@EnableSpringDataWebSupport
class PersistenceContext {
}
************************************************************************************************************************

При этом регистрируется новый экземпляр SortHandlerMethodArgumentResolver, который может создавать объекты Sort на
основе параметров запроса или аннотаций @SortDefault. Это означает, что мы можем указать логику сортировки, задав
значение параметра запроса сортировки.

Справочная документация Spring Data JPA (https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/) описывает
содержимое параметра запроса сортировки следующим образом:

    Свойства, по которым следует сортировать в формате property,property(,ASC|DESC). Направление сортировки по
    умолчанию - по возрастанию. Если вы хотите изменить направление, используйте несколько параметров сортировки,
    например ?sort=firstname&sort=lastname,asc.

После того, как мы включили веб-поддержку Spring Data, мы можем внедрить объекты Sort в методы обработчика контроллера.
Исходный код класса TodoSearchController, использующего веб-поддержку Spring Data, выглядит следующим образом:

************************************************************************************************************************
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
final class TodoSearchController {

    private final TodoSearchService searchService;

    @Autowired
    public TodoSearchController(TodoSearchService searchService) {
        this.searchService = searchService;
    }

    @RequestMapping(value = "/api/todo/search", method = RequestMethod.GET)
    public List<TodoDTO> findBySearchTerm(@RequestParam("searchTerm") String searchTerm,
                                          Sort sort) {
        return searchService.findBySearchTerm(searchTerm, sort);
    }
}
************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------
Дополнительное чтение:
- Справочная документация Spring Data JPA: 3.7.1 Веб-поддержка -
  https://docs.spring.io/spring-data/jpa/docs/1.8.x/reference/html/#core.web

- Javadoc аннотации @EnableSpringDataWebSupport -
  https://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/config/EnableSpringDataWebSupport.html

- Javadoc класса SortHandlerMethodArgumentResolver -
  https://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/SortHandlerMethodArgumentResolver.html

- Javadoc аннотации @SortDefault -
  https://docs.spring.io/spring-data/data-commons/docs/current/api/org/springframework/data/web/SortDefault.html
------------------------------------------------------------------------------------------------------------------------

TodoSearchController получает информацию о возвращенных записях задач из объекта TodoSearchService. Класс
RepositoryTodoSearchService реализует интерфейс TodoSearchService, а его метод findBySearchTerm() просто передает
поисковый запрос и объект Sort вызываемому методу репозитория.

Исходный код класса RepositoryTodoSearchService выглядит следующим образом:

************************************************************************************************************************
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
final class RepositoryTodoSearchService implements TodoSearchService {

    private final TodoRepository repository;

    @Autowired
    public RepositoryTodoSearchService(TodoRepository repository) {
        this.repository = repository;
    }

    @Transactional(readOnly = true)
    @Override
    public List<TodoDTO> findBySearchTerm(String searchTerm, Sort sort) {
        //Obtain search results by invoking the preferred repository method.
        List<Todo> searchResults = ...

        return TodoMapper.mapEntitiesIntoDTOs(searchResults);
    }
}
************************************************************************************************************************

Давайте выясним, как мы можем использовать объект Sort.

------------------------------------------------------------------------------------------------------------------------
*** Использование объекта Sort ***

После того, как мы создали объект Sort вручную или получили его с помощью веб-поддержки Spring Data, нам необходимо
создать запрос к базе данных, который сортирует результаты запроса с помощью объекта Sort.

Начнем с того, что выясним, как можно отсортировать все объекты, найденные в базе данных.

------------------------------------------------------------------------------------------------------------------------
*** Сортировка всех объектов ***

Если мы хотим отсортировать все объекты, найденные в базе данных, мы можем использовать один из следующих методов:
- ВО-ПЕРВЫХ, если мы создали интерфейс нашего репозитория, расширив интерфейс CrudRepository, мы можем изменить его,
             чтобы расширить только интерфейс PagingAndSortingRepository.

Соответствующая часть интерфейса нашего репозитория выглядит следующим образом:

************************************************************************************************************************
import org.springframework.data.repository.PagingAndSortingRepository;

interface TodoRepository extends PagingAndSortingRepository<Todo, Long> {

}
************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------
Дополнительное чтение:
- Javadoc PagingAndSortingRepository -
  https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html
------------------------------------------------------------------------------------------------------------------------

Интерфейс PagingAndSortingRepository объявляет один метод, который мы можем использовать, когда хотим получить все
объекты, найденные в базе данных, и отсортировать их:
- Iterable<T> findAll(Sort sort) - метод возвращает все сущности, найденные в базе данных, и сортирует их, используя
                                   параметры сортировки, указанные объектом Sort.

Другими словами, если мы хотим получить отсортированный список всех сущностей, найденных в базе данных, нам нужно
использовать метод Iterable<T> findAll(Sort sort) вместо метода Iterable<T> findAll().

- ВО-ВТОРЫХ, если мы создали интерфейс репозитория путем расширения интерфейса репозитория, мы можем объявить метод
             findAll(Sort sort) в интерфейсе нашего репозитория.

Соответствующая часть интерфейса нашего репозитория выглядит следующим образом:

************************************************************************************************************************
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.Repository;

import java.util.List;
import java.util.Optional;

interface TodoRepository extends Repository<Todo, Long> {

    void delete(Todo deleted);

    List<Todo> findAll(Sort sort);

    Optional<Todo> findOne(Long id);

    void flush();

    Todo save(Todo persisted);
}
************************************************************************************************************************

Теперь мы можем получить отсортированный список всех объектов, найденных в базе данных, вызвав метод findAll() и передав
объект Sort в качестве параметра метода.

Давайте выясним, как мы можем сортировать результаты запросов к базе данных, которые используют генерацию запросов на
основе стратегии имени метода.

------------------------------------------------------------------------------------------------------------------------
*** Сортировка результатов запросов, использующих генерацию запроса на основе стратегии имени метода ***

Если мы создаем запросы к базе данных на основе имени метода нашего метода запроса, мы можем сортировать результаты
запроса, добавляя новый параметр метода ( объект Sort ) к методу запроса.

Функция поиска нашего примера приложения нечувствительна к регистру. Он возвращает записи задач, заголовок или описание
которых содержит заданный поисковый запрос. Если наш метод запроса использует генерацию запроса на основе стратегии
имени метода, его исходный код выглядит следующим образом:

************************************************************************************************************************
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.Repository;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    List<Todo> findByDescriptionContainsOrTitleContainsAllIgnoreCase(String descriptionPart,
                                                                     String titlePart,
                                                                     Sort sort);
}
************************************************************************************************************************

Давайте выясним, как мы можем сортировать результаты запросов JPQL, созданных с использованием аннотации @Query.

------------------------------------------------------------------------------------------------------------------------
*** Сортировка результатов запросов JPQL, использующих аннотацию @Query ***

Если мы создаем запросы к базе данных, используя JPQL и аннотацию @Query, мы можем сортировать результаты запроса,
добавляя новый параметр метода ( объект Sort ) к методу запроса.

Если мы создаем собственный запрос с аннотацией @Query, мы не можем сортировать результаты запроса с помощью класса
Sort. Нам необходимо добавить логику сортировки в SQL-запросе.

Функция поиска нашего примера приложения нечувствительна к регистру. Он возвращает записи задач, заголовок или описание
которых содержит заданный поисковый запрос. Если наш метод запроса использует аннотацию @Query, его исходный код
выглядит следующим образом:

************************************************************************************************************************
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.Repository;
import org.springframework.data.repository.query.Param;

import java.util.List;

interface TodoRepository extends Repository<Todo, Long> {

    @Query("SELECT t FROM Todo t WHERE " +
            "LOWER(t.title) LIKE LOWER(CONCAT('%',:searchTerm, '%')) OR " +
            "LOWER(t.description) LIKE LOWER(CONCAT('%',:searchTerm, '%'))")
    List<Todo> findBySearchTerm(@Param("searchTerm") String searchTerm, Sort sort);
}
************************************************************************************************************************

Давайте выясним, как мы можем сортировать результаты запросов критериев JPA.

------------------------------------------------------------------------------------------------------------------------
*** Сортировка результатов запросов JPA Criteria API ***

Если мы создаем запросы к базе данных с помощью JPA Criteria API, наш интерфейс репозитория должен расширять интерфейс
JpaSpecificationExecutor<T>. Этот интерфейс объявляет один метод, который мы можем использовать, когда хотим
отсортировать результаты запросов критериев JPA:
- List <T> findAll(Specification<T> spec, Sort sort) - метод возвращает все сущности, которые удовлетворяют условиям,
                                                       заданным объектом Specification. Он сортирует возвращаемые
                                                       сущности, используя объект Sort, заданный в качестве параметра
                                                       метода.

Другими словами, мы можем сортировать результаты запросов JPA Criteria API, используя метод
List<T> findAll(Specification<T> spec, Sort sort) вместо метода List<T> findAll(Specification<T> spec).

Исходный код класса RepositoryTodoSearchService, который сортирует результаты нашего запроса с помощью объекта Sort,
выглядит следующим образом:

************************************************************************************************************************
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static net.petrikainulainen.springdata.jpa.todo.TodoSpecifications.titleOrDescriptionContainsIgnoreCase;

@Service
final class RepositoryTodoSearchService implements TodoSearchService {

    private final TodoRepository repository;

    @Autowired
    public RepositoryTodoSearchService(TodoRepository repository) {
        this.repository = repository;
    }

    @Transactional(readOnly = true)
    @Override
    public List<TodoDTO> findBySearchTerm(String searchTerm, Sort sort) {
        Specification<Todo> searchSpec = titleOrDescriptionContainsIgnoreCase(searchTerm);
        List<Todo> searchResults = repository.findAll(searchSpec, sort);
        return TodoMapper.mapEntitiesIntoDTOs(searchResults);
    }
}
************************************************************************************************************************

Давайте выясним, как мы можем сортировать результаты запросов к базе данных, созданных с помощью QueryDsl.

------------------------------------------------------------------------------------------------------------------------
*** Сортировка результатов запросов Querydsl ***

Если мы создаем запросы к базе данных с помощью Querydsl, наш интерфейс репозитория должен расширять интерфейс
QueryDslPredicateExecutor<T>. Этот интерфейс объявляет один метод, который мы можем использовать, когда хотим
отсортировать результаты вызванного запроса:
- Iterable<T> findAll(Predicate predicate, OrderSpecifier<?>...orders) - метод возвращает все сущности, которые
                                                                         удовлетворяют условиям поиска, заданным
                                                                         объектом Predicate, и сортирует результаты
                                                                         запроса, используя параметры сортировки,
                                                                         заданные объектами OrderSpecifier.

Это означает, что мы можем отсортировать результаты существующего запроса QueryDsl, выполнив следующие действия:
- Укажем параметры сортировки, создав новые объекты OrderSpecifier.
- Вызовем метод findAll() и передадим объекты Predicate и OrderSpecier в качестве параметров метода.

Например, если мы хотим изменить метод findBySearchTerm() класса RepositoryTodoSearchService для сортировки результатов
запроса в порядке возрастания, используя значение поля заголовка, нам необходимо внести следующие изменения в класс
RepositoryTodoSearchService:
- Добавить в класс private метод orderByTitleAsc() и реализовать его, вернув объект OrderSpecifier, который указывает,
  что результаты поиска сортируются в порядке возрастания с использованием значения поля заголовка.
- Внести следующие изменения в метод findBySearchTerm():
        - Получить объект OrderSpecifier, вызвав метод orderByTitleAsc().
        - Вызвать метод Iterable<T> findAll(Predicate predicate, OrderSpecifier<?>...orders) интерфейса
          QueryDslPredicateExecutor вместо метода Iterable<T> findAll(Predicate predicate). Передать объекты
          Predicate и OrderSpecifier в качестве параметров метода.

Исходный код класса RepositoryTodoSearchService выглядит следующим образом:

************************************************************************************************************************
import com.mysema.query.types.OrderSpecifier;
import com.mysema.query.types.Predicate predicate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static net.petrikainulainen.springdata.jpa.todo.TodoPredicates.titleOrDescriptionContainsIgnoreCase;

@Service
final class RepositoryTodoSearchService implements TodoSearchService {

    private final TodoRepository repository;

    @Autowired
    public RepositoryTodoSearchService(TodoRepository repository) {
        this.repository = repository;
    }

    @Transactional(readOnly = true)
    @Override
    public List<TodoDTO> findBySearchTerm(String searchTerm) {
        Predicate searchPred = titleOrDescriptionContainsIgnoreCase(searchTerm);
        OrderSpecifier sortSpec = orderByTitleAsc();
        Iterable<Todo> searchResults = repository.findAll(searchPred, sortSpec);
        return TodoMapper.mapEntitiesIntoDTOs(searchResults);
    }

    private OrderSpecifier<String> orderByTitleAsc() {
        return QTodo.todo.title.asc();
    }
}
************************************************************************************************************************

------------------------------------------------------------------------------------------------------------------------
Дополнительное чтение:
- Javadoc класса OrderSpecifier -
  http://querydsl.com/static/querydsl/3.4.3/apidocs/com/mysema/query/types/OrderSpecifier.html

- Javadoc интерфейса QueryDslPredicateExecutor -
  https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/querydsl/QuerydslPredicateExecutor.html
------------------------------------------------------------------------------------------------------------------------

Давайте выясним, какой метод сортировки нам следует использовать.

------------------------------------------------------------------------------------------------------------------------
*** Какой метод сортировки нам следует использовать? ***

Иногда техника, которую мы используем для создания запросов к базе данных, вынуждает нас использовать определенный
метод сортировки.

Например:
- Если наши запросы к базе данных являются именованными запросами или собственными запросами, использующими аннотацию
  @Query, мы должны добавить логику сортировки в строки наших запросов.
- Если мы создаем запросы к базе данных с помощью JPA Criteria API, нам придется сортировать результаты запроса с
  помощью класса Sort.
- Если мы создаем запросы к базе данных с помощью Querydsl, нам придется сортировать результаты запроса с помощью
  класса OrderSpecifier.

Однако, если у нас есть выбор, нам следует поместить логику генерации запросов и логику сортировки в одно и то же
место, поскольку это облегчает чтение нашего кода.

Это значит, что:
- Если мы создаем запросы к базе данных с использованием SQL или JPQL, нам следует добавить логику сортировки в
  строки наших запросов.
- Если мы создаем запросы к базе данных, используя генерацию запросов на основе стратегии имени метода, мы должны
  использовать тот же метод для сортировки результатов нашего запроса (добавьте ключевое слово OrderBy к имени метода).
  Если мы не хотим использовать этот метод, поскольку имя метода нашего запроса становится слишком длинным, нам следует
  переписать наш запрос, используя аннотацию @Query.

Тем не менее, есть несколько ситуаций, когда нам необходимо разделить логику генерации запросов и логику сортировки:
- Если нам нужно разбить результаты запросов к базе данных на страницы, мы должны отсортировать их с помощью класса
  Sort.
- Если нам необходимо поддерживать динамическую сортировку (т. е. направление сортировки и используемые поля могут
  быть изменены), мы должны сортировать результаты нашего запроса с помощью класса Sort, поскольку это единственный
  способ, который позволяет нам выполнить это требование.

Давайте подведем итог:
- Мы можем создавать объекты Sort вручную или получать их с помощью веб-поддержки Spring Data.
- Мы можем настроить веб-поддержку Spring Data, аннотируя наш класс конфигурации контекста приложения аннотацией
  @EnableSpringDataWebSupport.
- Мы можем создавать объекты OrderSpecifier, используя типы запросов Querydsl.
- Если метод, который мы используем для создания запросов к базе данных, не требует от нас использования определенного
  метода сортировки, нам следует поместить логику генерации запросов и логику сортировки в одно и то же место.
- Если нам необходимо разбивать результаты запросов к базе данных на страницы или поддерживать динамическую
  сортировку, мы должны сортировать результаты запроса с помощью класса Sort.

