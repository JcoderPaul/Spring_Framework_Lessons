Исходник всего материала (ENG): https://www.petrikainulainen.net/spring-data-jpa-tutorial/
------------------------------------------------------------------------------------------------------------------------
****** Spring Data JPA Tutorial: Introduction ******

Создание репозиториев, использующих Java Persistence API, — это громоздкий процесс, занимающий много времени и требующий
большого количества стандартного кода. Мы можем устранить некоторый шаблонный код, выполнив следующие действия:
- Создать абстрактный базовый класс репозитория, который предоставляет операции CRUD для сущностей.
- Создать конкретный класс репозитория, расширяющий абстрактный базовый класс репозитория.

Проблема этого подхода в том, что нам все равно придется написать код, который создает запросы к базе данных и вызывает
их. Что еще хуже, нам приходится делать это каждый раз, когда мы хотим создать новый запрос к базе данных. Это пустая
трата времени.

Данную проблему, написания 'рутинного' кода, решает Spring Data JPA. Он помогает нам сделать практически все необходимое
'из коробки'. На веб-сайте проекта Spring Data JPA указано, что:

************************************************************************************************************************
Реализация уровня доступа к данным приложения долгое время была обременительной. Для выполнения простых запросов, а также
разбиения на страницы и аудита необходимо написать слишком много шаблонного кода. Spring Data JPA стремится значительно
улучшить реализацию уровней доступа к данным, сокращая усилия до того количества, которое действительно необходимо. Как
разработчик, вы пишете интерфейсы своего репозитория, включая собственные методы поиска, а Spring автоматически
предоставит реализацию.
************************************************************************************************************************

Нужно помнить, что Spring Data JPA не является поставщиком JPA - это библиотека/фреймворк, который добавляет дополнительный
уровень абстракции поверх нашего провайдера JPA. Если мы решим использовать Spring Data JPA, уровень репозитория нашего
приложения будет содержать три уровня, которые описаны ниже:
- Spring Data JPA обеспечивает поддержку создания репозиториев JPA путем расширения интерфейсов репозитория Spring Data.
- Spring Data Commons предоставляет инфраструктуру, которая совместно используется проектами Spring Data, специфичными
  для хранилища данных.
- Поставщик JPA реализует API сохранения Java.

На следующем рисунке показана структура уровней нашего репозитория:
DOC/SpringDataJPATutorial/ArticlesPictures/SpringDataJpaLayers.png

На первый взгляд кажется, что Spring Data JPA усложняет наше приложение, и в некотором смысле это правда. Это добавляет
дополнительный уровень к нашему уровню репозитория, но в то же время освобождает нас от написания какого-либо шаблонного
кода.

------------------------------------------------------------------------------------------------------------------------
*** Введение в репозитории данных Spring ***

Сила Spring Data JPA заключается в абстракции репозитория, которая предоставляется проектом Spring Data Commons и
расширяется за счет конкретных подпроектов хранилища данных.

Мы можем использовать Spring Data JPA, не обращая внимания на фактическую реализацию абстракции репозитория, но мы
должны быть знакомы с интерфейсами репозитория Spring Data. Эти интерфейсы описаны ниже:

1. - Во-первых, проект *** Spring Data Commons *** предоставляет следующие интерфейсы:
- Интерфейс Repository<T, ID extends Serializable> - это интерфейс маркер, который имеет две цели:
    1. Он фиксирует тип управляемого объекта и тип идентификатора объекта.
    2. Это помогает контейнеру Spring обнаруживать «конкретные» интерфейсы репозитория во время сканирования
       пути к классам.
- Интерфейс CrudRepository<T, ID extends Serializable> - предоставляет операции CRUD для управляемого объекта.
- Интерфейс PagingAndSortingRepository<T, ID extends Serializable> - объявляет методы, используемые для сортировки и
                                                                     разбиения на страницы сущностей, полученных из БД.

- Интерфейс QueryDslPredicateExecutor<T> - не является «интерфейсом репозитория». Он объявляет методы, используемые для
                                           извлечения сущностей из базы данных с помощью объектов Predicate QueryDsl.

2. - Во-вторых, проект *** Spring Data JPA *** предоставляет следующие интерфейсы:
- Интерфейс JpaRepository<T, ID extends Serializable> — это специальный интерфейс репозитория JPA, который объединяет
                                                        методы, объявленные общими интерфейсами репозитория, в одном
                                                        интерфейсе.

- Интерфейс JpaSpecificationExecutor<T> - не является «интерфейсом репозитория». Он объявляет методы, используемые для
                                          извлечения сущностей из базы данных с помощью объектов спецификации <T>,
                                          использующих JPA criteria API.

Иерархия репозитория выглядит следующим образом см.:
DOC/SpringDataJPATutorial/ArticlesPictures/RepositoryInterfaceHierarchy.png

И так, по сути, нам нужно выполнить следующие шаги:
- Шаг 1. Создать интерфейс репозитория и расширьте один из интерфейсов репозитория, предоставляемых Spring Data.
- Шаг 2. Добавить пользовательские методы запроса в созданный интерфейс репозитория (если они нам нужны).
- Шаг 3. Внедрить интерфейс репозитория в другой компонент и использовать реализацию, автоматически предоставляемую
         Spring-ом.

------------------------------------------------------------------------------------------------------------------------
Повторим:
- Spring Data JPA не является поставщиком JPA. Он просто «прячет» Java Persistence API (и поставщика JPA) за абстракцией
  репозитория.
- Spring Data предоставляет несколько интерфейсов репозитория, которые используются для разных целей (см. выше).

------------------------------------------------------------------------------------------------------------------------
В следующей части описывается, как мы можем получить необходимые зависимости см.:
DOC/SpringDataJPATutorial/2_GettingRequiredDependencies.txt

