См. исходник (ENG) - :
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/WebMvcConfigurer.html
________________________________________________________________________________________________________________________
****** Interface WebMvcConfigurer ******

Пакет: org.springframework.web.servlet.config.annotation

public interface WebMvcConfigurer
________________________________________________________________________________________________________________________
Определяет методы обратного вызова для настройки конфигурации на основе Java для Spring MVC, включенной через
@EnableWebMvc.

@EnableWebMvcКлассы конфигурации с аннотациями могут реализовывать этот интерфейс для обратного вызова и предоставления
возможности настроить конфигурацию по умолчанию.
________________________________________________________________________________________________________________________
*** Методы ***

- default void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) - Добавьте преобразователи для
  поддержки типов аргументов метода пользовательского контроллера. Это не отменяет встроенную поддержку разрешения
  аргументов метода обработчика. Чтобы настроить встроенную поддержку разрешения аргументов, выполните настройку
  RequestMappingHandlerAdapter напрямую.

- default void addCorsMappings(CorsRegistry registry) - Настройте «глобальную» обработку запросов между источниками.
  Настроенные сопоставления CORS применяются к аннотированным контроллерам, функциональным конечным точкам и статическим
  ресурсам. Контроллеры с аннотациями могут дополнительно объявлять более детальную конфигурацию через файлы
  @CrossOrigin. В таких случаях объявленная здесь «глобальная» конфигурация CORS соответствует combined локальной
  конфигурации CORS, определенной в методе контроллера.

- default void addFormatters(FormatterRegistry registry) - Добавьте Converters и Formatters в дополнение к
                                                           зарегистрированным по умолчанию.

- default void addInterceptors(InterceptorRegistry registry) - Добавьте перехватчики жизненного цикла Spring MVC для
  предварительной и последующей обработки вызовов методов контроллера и запросов обработчиков ресурсов. Перехватчики
  можно зарегистрировать для применения ко всем запросам или ограничить их подмножеством шаблонов URL-адресов.

- default void addResourceHandlers(ResourceHandlerRegistry registry) - Добавьте обработчики для обслуживания статических
                                                                       ресурсов, таких как изображения, файлы JS и CSS,
                                                                       из определенных мест в корне веб-приложения, пути
                                                                       к классам и других.

- default void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers) - Добавьте обработчики для
  поддержки типов возвращаемых значений метода пользовательского контроллера. Использование этой опции не отменяет
  встроенную поддержку обработки возвращаемых значений. Чтобы настроить встроенную поддержку обработки возвращаемых
  значений, настройте RequestMappingHandlerAdapter напрямую.

- default void addViewControllers(ViewControllerRegistry registry) - Настройте простые автоматизированные контроллеры,
  предварительно настроенные с помощью кода состояния ответа и/или представления для отображения тела ответа. Это
  полезно в тех случаях, когда нет необходимости в специальной логике контроллера — например, отображать домашнюю
  страницу, выполнять простые перенаправления URL-адресов сайтов, возвращать статус 404 с содержимым HTML, статус
  204 без содержимого и т. д.

- default void configureAsyncSupport(AsyncSupportConfigurer configurer) - Настройте параметры асинхронной обработки
                                                                          запросов.

- default void configureContentNegotiation(ContentNegotiationConfigurer configurer) - Настройте параметры согласования
                                                                                      контента.

- default void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) - Настройте обработчик для
  делегирования необработанных запросов путем пересылки на сервлет «по умолчанию» контейнера сервлетов. Обычным случаем
  использования этого является то, что DispatcherServlet сопоставляется с "/", таким образом переопределяя стандартную
  обработку статических ресурсов контейнером сервлетов.

- default void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) - Настройте преобразователи
  исключений. Данный список начинается пустым. Если его оставить пустым, платформа настраивает набор преобразователей
  по умолчанию,
  см. WebMvcConfigurationSupport.addDefaultHandlerExceptionResolvers(List,
                                                                     org.springframework.web.accept.ContentNegotiationManager).
  Или, если в список добавляются какие-либо преобразователи исключений, приложение фактически берет на себя управление и
  должно предоставить полностью инициализированные преобразователи исключений.

  В качестве альтернативы вы можете использовать extendHandlerExceptionResolvers(List) команду, которая позволяет
  расширить или изменить список преобразователей исключений, настроенных по умолчанию.

- default void configureMessageConverters(List<HttpMessageConverter<?>> converters) - Настройте HttpMessageConverters
  для чтения из тела запроса и для записи в тело ответа. По умолчанию все встроенные преобразователи настраиваются,
  если в пути к классам присутствуют соответствующие сторонние библиотеки, такие как Jackson JSON, JAXB2 и другие.

  Обратите внимание, что использование этого метода отключает регистрацию конвертера по умолчанию. Однако в приложении
  Spring Boot добавляются WebMvcAutoConfiguration все HttpMessageConverter компоненты, а также преобразователи по
  умолчанию. Следовательно, в загрузочном приложении используйте HttpMessageConverters. В качестве альтернативы для
  любого сценария используйте extendMessageConverters(java.util.List) для изменения настроенного списка преобразователей
  сообщений.

- default void configurePathMatch(PathMatchConfigurer configurer) - Помогите настроить HandlerMapping параметры
                                                                    сопоставления путей, например, использовать ли
                                                                    PathPatterns сопоставление с анализируемым или
                                                                    строковым шаблоном с помощью PathMatcher, следует
                                                                    ли сопоставлять конечные косые черты и т. д.

- default void configureViewResolvers(ViewResolverRegistry registry) - Настройте преобразователи представлений для
                                                                       преобразования имен представлений на основе
                                                                       строк, возвращаемых контроллерами, в конкретные
                                                                       View реализации для выполнения рендеринга.

- default void extendHandlerExceptionResolvers(List<HandlerExceptionResolver> resolvers) - Расширение или изменение
  списка преобразователей исключений, настроенных по умолчанию. Это может быть полезно для вставки собственного
  преобразователя исключений, не мешая работе по умолчанию.

- default void extendMessageConverters(List<HttpMessageConverter<?>> converters) - Расширьте или измените список
  преобразователей после того, как он был либо configured инициализирован списком по умолчанию. Обратите внимание,
  что порядок регистрации преобразователя важен. Особенно в тех случаях, когда клиенты принимают MediaType.ALL
  настроенные ранее преобразователи, будут предпочтительнее.

- default MessageCodesResolver getMessageCodesResolver() - Предоставьте возможность MessageCodesResolver создания кодов
  сообщений на основе кодов ошибок привязки данных и проверки. Оставьте возвращаемое значение, чтобы null сохранить
  значение по умолчанию.

- default Validator getValidator() - Предоставьте собственный вариант Validator вместо созданного по умолчанию.
  Реализация по умолчанию, предполагающая, что JSR-303 находится в пути к классам, следующая:
  OptionalValidatorFactoryBean. Оставьте возвращаемое значение, чтобы null сохранить значение по умолчанию.
________________________________________________________________________________________________________________________