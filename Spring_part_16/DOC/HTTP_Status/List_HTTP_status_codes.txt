См. исходный (ENG): https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
________________________________________________________________________________________________________________________
****** Список кодов состояния HTTP ******

Это список кодов состояния ответа протокола передачи гипертекста (HTTP). Коды состояния выдаются сервером в ответ на
запрос клиента, сделанный серверу. Он включает в себя коды из запроса комментариев IETF (RFC), других спецификаций и
некоторые дополнительные коды, используемые в некоторых распространенных приложениях HTTP. Первая цифра кода состояния
указывает один из пяти стандартных классов ответов. Показанные необязательные фразы сообщений являются типичными, но
может быть предоставлена любая удобочитаемая альтернатива или не предоставлена вообще.

Если не указано иное, код состояния является частью стандарта HTTP.

Управление по присвоению номеров в Интернете (IANA) ведет официальный реестр кодов состояния HTTP.

Все коды состояния ответа HTTP разделены на пять классов или категорий. Первая цифра кода состояния определяет класс
ответа, а последние две цифры не играют никакой классифицирующей или категоризирующей роли. Стандартом определены пять
классов:

- 1xx информационный ответ – запрос получен, обработка продолжается;
- 2xx успешный – запрос был успешно получен, понят и принят;
- 3xx перенаправление – для завершения запроса необходимо предпринять дальнейшие действия;
- 4xx ошибка клиента — запрос содержит неверный синтаксис или не может быть выполнен;
- 5xx ошибка сервера — серверу не удалось выполнить очевидно действительный запрос;
________________________________________________________________________________________________________________________
*** 1xx информационный ответ ***

Информационный ответ свидетельствует о том, что запрос получен и понят. Он выдается на временной основе, пока
продолжается обработка запроса. Он предупреждает клиента дождаться окончательного ответа. Сообщение состоит только
из строки состояния и необязательных полей заголовка и завершается пустой строкой. Поскольку стандарт HTTP/1.0 не
определяет никаких кодов состояния 1xx, серверы не должны отправлять ответ 1xx клиенту, совместимому с HTTP/1.0,
за исключением экспериментальных условий.

*** 100 Продолжить
Сервер получил заголовки запроса, и клиент должен приступить к отправке тела запроса (в случае запроса, для которого
необходимо отправить тело; например, запрос POST ). Отправка большого тела запроса на сервер после того, как запрос
был отклонен из-за неподходящих заголовков, была бы неэффективной. Чтобы сервер проверил заголовки запроса, клиент
должен отправить его Expect: 100-continue в качестве заголовка в своем первоначальном запросе и получить 100 Continue
в ответ код состояния перед отправкой тела. Если клиент получает код ошибки, например 403 (запрещено) или 405 (метод
не разрешен), ему не следует отправлять тело запроса. В ответе 417 Expectation Failed указывается, что запрос следует
повторить без Expect заголовка, поскольку он указывает на то, что сервер не поддерживает ожидания (это относится,
например, к серверам HTTP/1.0).

*** 101 протокол коммутации
Запрашивающая сторона попросила сервер переключить протоколы, и сервер согласился это сделать.

*** 102 Обработка ( WebDAV ; RFC 2518)
Запрос WebDAV может содержать множество подзапросов, включающих операции с файлами, выполнение которых требует
длительного времени. Этот код указывает, что сервер получил и обрабатывает запрос, но ответа пока нет. Это
предотвращает тайм-аут клиента и предположение о том, что запрос потерян. Код состояния устарел.

*** 103 ранние подсказки (RFC 8297)
Используется для возврата некоторых заголовков ответа перед окончательным HTTP-сообщением.

________________________________________________________________________________________________________________________
*** 2хх успех ***

Этот класс кодов состояния указывает, что действие, запрошенное клиентом, было получено, понято и принято.

*** 200 ОК
Стандартный ответ на успешные HTTP-запросы. Фактический ответ будет зависеть от используемого метода запроса. В запросе
GET ответ будет содержать объект, соответствующий запрошенному ресурсу. В запросе POST ответ будет содержать объект,
описывающий или содержащий результат действия.

*** 201 Создано
Запрос был выполнен, что привело к созданию нового ресурса.

*** 202 Принято
Запрос принят в обработку, но обработка не завершена. В конечном итоге запрос может быть обработан, а может и не быть
обработан, и может быть запрещен при обработке.

*** 203 Неавторитетная информация (начиная с HTTP/1.1)
Сервер представляет собой трансформирующий прокси (например, веб-ускоритель ), который получил от своего источника
200 ОК, но возвращает измененную версию ответа источника.

*** 204 Нет содержания
Сервер успешно обработал запрос и не возвращает никакого контента.

*** 205 Сбросить содержимое
Сервер успешно обработал запрос, просит запрашивающую сторону сбросить представление документа и не возвращает никакого
содержимого.

*** 206 Частичное содержание
Сервер доставляет только часть ресурса (обслуживание байтов) из-за заголовка диапазона, отправленного клиентом.
Заголовок диапазона используется HTTP-клиентами для возобновления прерванной загрузки или разделения загрузки на
несколько одновременных потоков.

*** 207 мультистатус (WebDAV; RFC 4918)
Следующее тело сообщения по умолчанию представляет собой сообщение XML и может содержать несколько отдельных кодов
ответа, в зависимости от количества подзапросов.

*** 208 уже сообщалось (WebDAV; RFC 5842)
Члены привязки DAV уже были перечислены в предыдущей части ответа (многостатусного) и больше не включаются.

*** 226 использовано IM (RFC 3229)
Сервер выполнил запрос ресурса, и ответ представляет собой результат одной или нескольких манипуляций с экземпляром,
примененных к текущему экземпляру.

________________________________________________________________________________________________________________________
*** 3xx перенаправление ***

Этот класс кода состояния указывает, что клиент должен предпринять дополнительные действия для выполнения запроса.
Многие из этих кодов состояния используются при перенаправлении URL-адресов.

Пользовательский агент может выполнить дополнительное действие без взаимодействия с пользователем, только если во
втором запросе используется метод GET или HEAD. Пользовательский агент может автоматически перенаправить запрос.
Пользовательский агент должен обнаружить и вмешаться, чтобы предотвратить циклические перенаправления.

*** 300 варианты выбора
Указывает несколько вариантов ресурса, из которых клиент может выбирать (посредством согласования содержимого на
основе агента). Например, этот код можно использовать для представления нескольких вариантов формата видео, для
перечисления файлов с разными расширениями имен файлов или для устранения неоднозначности в смысле слов.

*** 301 Переехал навсегда
Этот и все будущие запросы должны быть направлены на данный URI.

*** 302 Найдено (ранее «Временно перемещено»)
Говорит клиенту просмотреть (перейти) другой URL-адрес. Спецификация HTTP/1.0 требовала от клиента выполнения
временного перенаправления с использованием того же метода (исходная описывающая фраза была «Временно перемещено»),
но популярные браузеры реализовали 302 перенаправления, изменив метод на GET. Поэтому в HTTP/1.1 добавлены коды
состояния 303 и 307, чтобы различать эти два поведения.

*** 303 См. «Другое» (начиная с HTTP/1.1).
Ответ на запрос можно найти по другому URI с помощью метода GET. При получении в ответ на POST (или PUT/DELETE) клиент
должен предположить, что сервер получил данные, и должен выдать новый запрос GET к данному URI.

*** 304 Не изменено
Указывает, что ресурс не был изменен с момента версии, указанной в заголовках запроса If-Modified-Since или
If-None-Match. В таком случае нет необходимости повторно передавать ресурс, поскольку у клиента все еще есть ранее
загруженная копия.

*** 305 Использовать прокси (начиная с HTTP/1.1)
Запрошенный ресурс доступен только через прокси, адрес которого указан в ответе. По соображениям безопасности многие
HTTP-клиенты (например, Mozilla Firefox и Internet Explorer) не подчиняются этому коду состояния.

*** 306 Переключить прокси
Больше не используется. Первоначально означало «Последующие запросы должны использовать указанный прокси».

*** 307 Временное перенаправление (начиная с HTTP/1.1)
В этом случае запрос следует повторить с другим URI; однако будущие запросы по-прежнему должны использовать исходный
URI. В отличие от того, как исторически был реализован 302, метод запроса не может быть изменен при повторной отправке
исходного запроса. Например, запрос POST должен быть повторен с использованием другого запроса POST.

*** 308 постоянный редирект
Этот и все будущие запросы должны быть направлены на данный URI. 308 аналогичен поведению 301, но не позволяет изменять
метод HTTP. Так, например, отправка формы на постоянно перенаправляемый ресурс может продолжаться гладко.

________________________________________________________________________________________________________________________
*** 4xx ошибки клиента ***

Этот класс кода состояния предназначен для ситуаций, в которых ошибка, по-видимому, была вызвана клиентом. За
исключением ответа на запрос HEAD, сервер должен включать объект, содержащий объяснение ошибочной ситуации и того,
является ли она временным или постоянным состоянием. Эти коды состояния применимы к любому методу запроса.
Пользовательские агенты должны отображать пользователю любую включенную сущность.

*** 400 ошибка, неверный запрос
Сервер не может или не будет обрабатывать запрос из-за очевидной ошибки клиента (например, неправильного синтаксиса
запроса, слишком большого размера, недопустимого кадрирования сообщения запроса или обманной маршрутизации запроса).

*** 401 Несанкционированный
Аналогично 403 Forbidden, но специально для использования, когда требуется аутентификация, но она не удалась или еще
не была предоставлена. Ответ должен включать поле заголовка WWW-Authenticate, содержащее запрос, применимый к
запрошенному ресурсу. См. базовую аутентификацию доступа и дайджест-аутентификацию доступа. 401 семантически означает
«неавторизованный», у пользователя нет действительных учетных данных для аутентификации для целевого ресурса.
Некоторые сайты неправильно выдают HTTP 401, когда IP-адрес запрещен на веб-сайте (обычно домен веб-сайта) и этому
конкретному адресу отказано в разрешении на доступ к веб-сайту.

*** 402 Требуется оплата
Зарезервировано для будущего использования. Первоначальное намерение заключалось в том, чтобы этот код мог
использоваться как часть какой-либо формы цифровых денег или схемы микроплатежей, как это предлагалось,
например, GNU Taler, но этого пока не произошло, и этот код широко не используется.

Google Developers API использует этот статус, если конкретный разработчик превысил дневной лимит запросов.
Sipgate использует этот код, если на счету недостаточно средств для совершения звонка.
Shopify использует этот код, когда магазин не оплатил комиссию и временно отключен.
Stripe использует этот код для неудачных платежей, если параметры были правильными, например, заблокированы
мошеннические платежи.

*** 403 Запрещено
Запрос содержал действительные данные и был понят сервером, но сервер отказывается выполнить действие. Это может быть
связано с тем, что у пользователя нет необходимых разрешений для ресурса, или ему нужна какая-либо учетная запись, или
он пытается выполнить запрещенное действие (например, создать дубликат записи там, где разрешена только одна). Этот
код также обычно используется, если запрос предоставил аутентификацию путем ответа на запрос поля заголовка
WWW-Authenticate, но сервер не принял эту аутентификацию. Запрос не должен повторяться.

*** 404 Не Найдено
Запрошенный ресурс не найден, но может быть доступен в будущем. Последующие запросы клиента допустимы.

*** 405 Метод не разрешен
Метод запроса не поддерживается для запрошенного ресурса; например, запрос GET к форме, которая требует представления
данных через POST, или запрос PUT к ресурсу, доступному только для чтения.

*** 406 Неприемлемо
Запрошенный ресурс способен генерировать только контент, неприемлемый согласно заголовкам Accept, отправленным в
запросе. См. Согласование контента - https://en.wikipedia.org/wiki/Content_negotiation

*** 407 Требуется аутентификация прокси
Клиент должен сначала аутентифицировать себя с помощью прокси.

*** 408 Тайм-аут запроса
На сервере истекло время ожидания запроса. Согласно спецификациям HTTP: «Клиент не выдал запрос в течение времени, пока
сервер был готов ждать. Клиент МОЖЕТ повторить запрос без изменений в любое время позже».

*** 409 Конфликт
Указывает, что запрос не удалось обработать из-за конфликта текущего состояния ресурса, например конфликта
редактирования между несколькими одновременными обновлениями.

*** 410 Ушел
Указывает, что запрошенный ресурс ранее использовался, но больше не доступен и не будет доступен снова. Это следует
использовать, когда ресурс был намеренно удален и ресурс необходимо очистить. Получив код состояния 410, клиент не
должен запрашивать ресурс в будущем. Клиентам, таким как поисковые системы, следует удалить ресурс из своих индексов.
В большинстве случаев использования клиенты и поисковые системы не требуют очистки ресурса, вместо этого можно
использовать код «404 Not Found».

*** 411 Требуемая длина
В запросе не указана длина его контента, необходимая для запрашиваемого ресурса.

*** 412 Предварительное условие не выполнено
Сервер не соответствует одному из предварительных условий, которые запрашивающая сторона заложила в поля заголовка
запроса.

*** 413 Полезная нагрузка слишком велика
Запрос больше, чем сервер желает или может обработать. Ранее называлось «Слишком большой объект запроса».

*** 414 URI слишком длинный
Предоставленный URI был слишком длинным для обработки сервером. Часто это результат того, что слишком много
данных кодируется как строка запроса GET-запроса, и в этом случае ее следует преобразовать в запрос POST.
Ранее называлось «Слишком длинный URI-запрос».

*** 415 Неподдерживаемый тип носителя
Объект запроса имеет тип носителя, который не поддерживается сервером или ресурсом. Например, клиент загружает
изображение как image/svg+xml, но сервер требует, чтобы изображения использовали другой формат.

*** 416 Диапазон неудовлетворителен
Клиент запросил часть файла (обслуживание байтов), но сервер не может предоставить эту часть. Например, если клиент
запросил часть файла, лежащую за концом файла. Ранее назывался «Запрошенный диапазон неудовлетворителен».

*** 417 Ожидание не оправдалось
Сервер не может соответствовать требованиям поля заголовка запроса Expect.

*** 418 Я чайник (RFC 2324, RFC 7168)
Этот код был определен в 1998 году как одна из традиционных первоапрельских шуток IETF в RFC 2324, протокол управления
гипертекстовым кофейником, и не ожидается, что он будет реализован реальными HTTP-серверами. В RFC указано, что этот
код должен возвращаться чайниками, запрашивающими заваривание кофе. Этот статус HTTP используется в качестве
пасхального яйца на некоторых веб-сайтах, таких как пасхальное яйцо Google.com «Я чайник». Иногда этот код состояния
также используется в качестве ответа на заблокированный запрос вместо более подходящего кода 403 «Запрещено».

*** 421 Неверно направленный запрос
Запрос был направлен на сервер, который не может дать ответ (например, из-за повторного использования соединения).

*** 422 Необработанный контент
Запрос был правильно сформирован (т. е. синтаксически корректен), но не мог быть обработан.

*** 423 Заблокировано (WebDAV; RFC 4918)
Ресурс, к которому осуществляется доступ, заблокирован.

*** 424 Неудачная зависимость (WebDAV; RFC 4918)
Запрос не выполнен, поскольку он зависел от другого запроса и этот запрос не выполнен (например, PROPPATCH).

*** 425 Слишком рано (RFC 8470)
Указывает, что сервер не желает рисковать обработкой запроса, который может быть воспроизведен.

*** 426 Требуется обновление
Клиенту следует переключиться на другой протокол, например TLS/1.3, указанный в поле заголовка «Обновление».

*** 428 Требуется предварительное условие (RFC 6585)
Исходный сервер требует, чтобы запрос был условным. Предназначен для предотвращения проблемы «потерянного обновления»,
когда клиент ПОЛУЧАЕТ состояние ресурса, изменяет его и отправляет обратно на сервер, в то время как третья сторона
изменила состояние на сервере, что привело к конфликту.

*** 429 Слишком много запросов (RFC 6585)
Пользователь отправил слишком много запросов за определенный промежуток времени. Предназначен для использования со
схемами ограничения скорости.

*** 431 Слишком большие поля заголовка запроса (RFC 6585)
Сервер не желает обрабатывать запрос, поскольку либо отдельное поле заголовка, либо все поля заголовка вместе взятые
слишком велики.

*** 451 недоступен по юридическим причинам (RFC 7725)
Оператору сервера поступило законное требование запретить доступ к ресурсу или к набору ресурсов, включающему
запрошенный ресурс. Код 451 был выбран в качестве ссылки на роман «451 градус по Фаренгейту» (см. Благодарности в RFC).

________________________________________________________________________________________________________________________
5xx ошибки сервера

Серверу не удалось выполнить запрос.

Коды состояния ответа, начинающиеся с цифры «5», обозначают случаи, когда сервер знает, что столкнулся с ошибкой или по
какой-либо причине неспособен выполнить запрос. За исключением ответа на запрос HEAD, сервер должен включать объект,
содержащий объяснение ошибочной ситуации, и указывать, является ли это временным или постоянным состоянием. Аналогично,
пользовательские агенты должны отображать пользователю любую включенную сущность. Эти коды ответа применимы к любому
методу запроса.

*** 500 - внутренняя ошибка сервера
Общее сообщение об ошибке, выдаваемое при возникновении непредвиденной ситуации и более конкретное сообщение не подходит.

*** 501 Не реализовано
Сервер либо не распознает метод запроса, либо у него нет возможности выполнить запрос. Обычно это подразумевает
доступность в будущем (например, новая функция API веб-сервиса).

*** 502 Неверный шлюз
Сервер действовал как шлюз или прокси-сервер и получил недопустимый ответ от вышестоящего сервера.

*** 503 Сервис недоступен
Сервер не может обработать запрос (поскольку он перегружен или отключен на техническое обслуживание). Как правило, это
временное состояние.

*** Ошибка 504 Время ответа сервера истекло
Сервер действовал как шлюз или прокси-сервер и не получил своевременного ответа от вышестоящего сервера.

*** 505 Версия HTTP не поддерживается
Сервер не поддерживает версию HTTP, использованную в запросе.

*** 506 вариант также согласовывается (RFC 2295)
Прозрачное согласование содержимого запроса приводит к возникновению циклической ссылки.

*** 507 Недостаточно места для хранения (WebDAV; RFC 4918).
Сервер не может сохранить представление, необходимое для выполнения запроса.

*** 508 Обнаружена петля (WebDAV; RFC 5842).
Сервер обнаружил бесконечный цикл при обработке запроса (отправлено вместо 208 уже сообщено).

*** 510 не расширен (RFC 2774)
Для того чтобы сервер выполнил его, требуются дальнейшие расширения запроса.

*** 511 Требуется сетевая аутентификация (RFC 6585)
Клиенту необходимо пройти аутентификацию, чтобы получить доступ к сети. Предназначен для использования путем перехвата
прокси-серверов, используемых для контроля доступа к сети (например, «порталов авторизации», используемых для
требования согласия с Условиями обслуживания перед предоставлением полного доступа в Интернет через точку доступа Wi-Fi).

________________________________________________________________________________________________________________________
*** Неофициальные коды ***

Следующие коды не определены ни одним стандартом.
________________________________________________________________________________________________________________________

- 218 Это нормально ( HTTP-сервер Apache ) - Используется серверами Apache. Состояние полной ошибки, позволяющее
передавать тела сообщений через сервер, если этот ProxyErrorOverride параметр включен. В этой ситуации оно отображается
вместо сообщения об ошибке 4xx или 5xx.

- 419 Срок действия страницы истек ( Laravel Framework ) - Используется фреймворком Laravel, когда токен CSRF
отсутствует или срок его действия истек.

- 420 Ошибка метода ( Spring Framework ) - Устаревший статус ответа, предложенный во время разработки WebDAV,
используемый Spring Framework в случае сбоя метода.

- 420 Улучшите свое спокойствие ( Твиттер ) - Возвращается версией 1 API поиска и тенденций Twitter, когда скорость
клиента ограничена; версии 1.1 и более поздние используют вместо этого код ответа 429 Too Many Requests. Фраза
«Увеличьте свое спокойствие» взята из фильма 1993 года «Разрушитель», и ее ассоциация с этим числом, вероятно,
является отсылкой к каннабису.

- 430 Поля заголовка запроса слишком велики ( Shopify ) - Устаревший ответ, используемый Shopify вместо кода ответа
429 Too Many Requests, когда в течение определенного периода времени запрашивается слишком много URL-адресов.

- 430 Отказ в безопасности Shopify ( Shopify ) - Используется Shopify для обозначения того, что запрос считается
вредоносным.

- 450 заблокировано родительским контролем Windows (Microsoft) - Код расширения Microsoft, указывающий, когда
родительский контроль Windows включен и блокирует доступ к запрошенной веб-странице.

- 498 Неверный токен (Esri) - Возвращается ArcGIS for Server. Код 498 указывает на просроченный или недействительный
токен.

- 499 Требуется токен (Esri) - Возвращается ArcGIS for Server. Код 499 указывает, что токен требуется, но не был
отправлен.

- 509 Превышен предел пропускной способности ( веб-сервер Apache / cPanel ) - Сервер превысил пропускную способность,
указанную администратором сервера; это часто используется провайдерами виртуального хостинга для ограничения пропускной
способности клиентов.

- 529 Сайт перегружен - Используется Qualys в API тестирования сервера SSLLabs, чтобы сигнализировать о том, что сайт
не может обработать запрос.

- 530 Сайт заморожен - Используется веб-платформой Pantheon Systems для обозначения сайта, который был заблокирован
из-за бездействия.

- 530 Ошибка DNS источника ( Shopify ) - Используется Shopify, чтобы указать, что Cloudflare не может разрешить
запрошенную запись DNS.

- 540 Временно отключен ( Shopify ) - Используется Shopify для указания того, что запрошенная конечная точка временно
отключена.

- 598 (неофициальное соглашение) Ошибка тайм-аута чтения по сети. - Используется некоторыми HTTP-прокси для
сигнализации тайм-аута сетевого чтения за прокси-сервером клиенту перед прокси-сервером.

- 599 Ошибка тайм-аута сетевого подключения - Ошибка, используемая некоторыми HTTP-прокси для сигнализации тайм-аута
сетевого подключения за прокси-сервером клиенту перед прокси-сервером.

- 783 Неожиданный токен ( Shopify ) - Используется Shopify, чтобы указать, что запрос содержит синтаксическую ошибку
JSON.

________________________________________________________________________________________________________________________
*** Информационные службы Интернета ***

Веб-сервер Microsoft Internet Information Services (IIS) расширяет пространство ошибок 4xx, чтобы сигнализировать об
ошибках в запросе клиента.
________________________________________________________________________________________________________________________

- 440 Тайм-аут входа в систему - Срок сеанса клиента истек, и ему необходимо войти снова.

- 449 Повторить попытку с - Сервер не может выполнить запрос, поскольку пользователь не предоставил необходимую
информацию.

- 451 Редирект - Используется в Exchange ActiveSync, когда доступен более эффективный сервер или когда сервер не может
получить доступ к почтовому ящику пользователя. Ожидается, что клиент повторно запустит операцию HTTP AutoDiscover,
чтобы найти более подходящий сервер.

IIS иногда использует дополнительные десятичные субкоды для более конкретной информации, однако эти субкоды появляются
только в полезных данных ответа и в документации, а не вместо фактического кода состояния HTTP.

________________________________________________________________________________________________________________________
*** nginx ***

Программное обеспечение веб-сервера nginx расширяет пространство ошибок 4xx, чтобы сигнализировать о проблемах с
запросом клиента.

- 444 Нет ответа - Используется внутри для указания серверу не возвращать никакой информации клиенту и немедленно
закрыть соединение.

- 494 Заголовок запроса слишком велик - Клиент отправил слишком большой запрос или слишком длинную строку заголовка.

- 495 Ошибка SSL-сертификата - Расширение кода ответа 400 Bad Request, используемое, когда клиент предоставил
недействительный сертификат клиента.

- 496 Требуется SSL-сертификат - Расширение кода ответа 400 Bad Request, используемое, когда сертификат клиента
требуется, но не предоставляется.

- 497 HTTP-запрос отправлен на порт HTTPS - Расширение кода ответа 400 Bad Request, используемое, когда клиент
отправил HTTP-запрос к порту, прослушивающему запросы HTTPS.

- 499 Запрос клиента на закрытие - Используется, когда клиент закрыл запрос до того, как сервер смог отправить ответ.

________________________________________________________________________________________________________________________
*** Cloudflare ***

Служба обратного прокси-сервера Cloudflare расширяет пространство ошибок серии 5xx, чтобы сигнализировать о проблемах с
исходным сервером.

- 520 Веб-сервер возвратил неизвестную ошибку - Исходный сервер вернул Cloudflare пустой, неизвестный или неожиданный
ответ.

- 521 Веб-сервер не работает - Исходный сервер отклонил соединения с Cloudflare. Решения безопасности в источнике могут
блокировать законные соединения с определенных IP-адресов Cloudflare.

- 522 Тайм-аут соединения - У Cloudflare истекло время ожидания связи с исходным сервером.

- 523 Происхождение недостижимо - Cloudflare не удалось связаться с исходным сервером; например, если записи DNS для
исходного сервера неверны или отсутствуют.

- 524 Произошел тайм-аут - Cloudflare смог установить TCP-соединение с исходным сервером, но не получил своевременного
HTTP-ответа.

- 525 SSL-квитирование не удалось - Cloudflare не удалось согласовать подтверждение SSL/TLS с исходным сервером.

- 526 Неверный SSL-сертификат - Cloudflare не удалось проверить сертификат SSL на исходном веб-сервере. Также
используется gorouter Cloud Foundry.

- 527 Ошибка рельсотрона - Ошибка 527 указывает на прерванное соединение между Cloudflare и сервером Railgun исходного
сервера.

- 530 Ошибка - 530 возвращается вместе с ошибкой 1xxx.

________________________________________________________________________________________________________________________
*** AWS Elastic Load Balancing - Эластичная балансировка нагрузки AWS ***

Elastic Load Balancing Amazon Web Services добавляет несколько пользовательских кодов возврата, чтобы сигнализировать о
проблемах либо с клиентским запросом, либо с исходным сервером.

- 000 - Возвращается с кадром HTTP/2 GOAWAY, если сжатая длина любого из заголовков превышает 8 КБ или если более
10 000 запросов, обработанных через одно соединение, превышают 10 000.

- 460 - Клиент закрыл соединение с балансировщиком нагрузки до истечения времени ожидания простоя. Обычно время
ожидания клиента превышает время ожидания Elastic Load Balancer.

- 463 - Балансировщик нагрузки получил заголовок запроса X-Forwarded-For с более чем 30 IP-адресами.

- 464 - Несовместимые версии протокола между клиентом и исходным сервером.

- 561 Несанкционированный - Ошибка аутентификации, возвращаемая сервером, зарегистрированным в балансировщике нагрузки.
Вы настроили правило прослушивателя для аутентификации пользователей, но поставщик удостоверений (IdP) вернул код
ошибки при аутентификации пользователя.