См. исх. (ENG): https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.html
________________________________________________________________________________________________________________________
****** Enum Class HttpStatus ******
________________________________________________________________________________________________________________________
Пакет: Package org.springframework.http
________________________________________________________________________________________________________________________
java.lang.Object
    java.lang.Enum<HttpStatus>
        org.springframework.http.HttpStatus

Все реализованные интерфейсы: Serializable,
                              Comparable<HttpStatus>,
                              Constable,
                              HttpStatusCode
________________________________________________________________________________________________________________________
public enum HttpStatus
        extends Enum<HttpStatus>
            implements HttpStatusCode
________________________________________________________________________________________________________________________
Перечисление кодов состояния HTTP.
Серию кодов состояния HTTP можно получить через метод *.series().
________________________________________________________________________________________________________________________
*** Вложенные классы ***

- static enum - HttpStatus.Series - Перечисление серий статусов HTTP см.:
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/HttpStatus.Series.html
________________________________________________________________________________________________________________________
*** Вложенные классы/интерфейсы, унаследованные от класса java.lang.Enum ***

Enum.EnumDesc<E extends Enum<E>> - https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Enum.EnumDesc.html
________________________________________________________________________________________________________________________
*** Enum константы ***

- CONTINUE - 100 Continue.
- SWITCHING_PROTOCOLS - 101 Switching Protocols.
- PROCESSING - 102 Processing.
- EARLY_HINTS - 103 Early Hints.

- OK - 200 OK.
- CREATED - 201 Created.
- ACCEPTED - 202 Accepted.
- NON_AUTHORITATIVE_INFORMATION - 203 Non-Authoritative Information.
- NO_CONTENT - 204 No Content.
- RESET_CONTENT - 205 Reset Content.
- PARTIAL_CONTENT - 206 Partial Content.
- MULTI_STATUS - 207 Multi-Status.
- ALREADY_REPORTED - 208 Already Reported.
- IM_USED - 226 IM Used.

- MULTIPLE_CHOICES - 300 Multiple Choices.
- MOVED_PERMANENTLY - 301 Moved Permanently.
- FOUND - 302 Found.
- SEE_OTHER - 303 See Other.
- NOT_MODIFIED - 304 Not Modified.
- TEMPORARY_REDIRECT - 307 Temporary Redirect.
- PERMANENT_REDIRECT - 308 Permanent Redirect.

- BAD_REQUEST - 400 Bad Request.
- UNAUTHORIZED - 401 Unauthorized.
- PAYMENT_REQUIRED - 402 Payment Required.
- FORBIDDEN - 403 Forbidden.
- NOT_FOUND - 404 Not Found.
- METHOD_NOT_ALLOWED - 405 Method Not Allowed.
- NOT_ACCEPTABLE - 406 Not Acceptable.
- PROXY_AUTHENTICATION_REQUIRED - 407 Proxy Authentication Required.
- REQUEST_TIMEOUT - 408 Request Timeout.
- CONFLICT - 409 Conflict.
- GONE - 410 Gone.
- LENGTH_REQUIRED - 411 Length Required.
- PRECONDITION_FAILED - 412 Precondition failed.
- PAYLOAD_TOO_LARGE - 413 Payload Too Large.
- URI_TOO_LONG - 414 URI Too Long.
- UNSUPPORTED_MEDIA_TYPE - 415 Unsupported Media Type.
- REQUESTED_RANGE_NOT_SATISFIABLE - 416 Requested Range Not Satisfiable.
- EXPECTATION_FAILED - 417 Expectation Failed.
- I_AM_A_TEAPOT - 418 I'm a teapot.
- UNPROCESSABLE_ENTITY - 422 Unprocessable Entity.
- LOCKED - 423 Locked.
- FAILED_DEPENDENCY - 424 Failed Dependency.
- TOO_EARLY - 425 Too Early.
- UPGRADE_REQUIRED - 426 Upgrade Required.
- PRECONDITION_REQUIRED - 428 Precondition Required.
- TOO_MANY_REQUESTS - 429 Too Many Requests.
- REQUEST_HEADER_FIELDS_TOO_LARGE - 431 Request Header Fields Too Large.
- UNAVAILABLE_FOR_LEGAL_REASONS - 451 Unavailable For Legal Reasons.

- INTERNAL_SERVER_ERROR - 500 Internal Server Error.
- NOT_IMPLEMENTED - 501 Not Implemented.
- BAD_GATEWAY - 502 Bad Gateway.
- SERVICE_UNAVAILABLE - 503 Service Unavailable.
- GATEWAY_TIMEOUT - 504 Gateway Timeout.
- HTTP_VERSION_NOT_SUPPORTED - 505 HTTP Version Not Supported.
- VARIANT_ALSO_NEGOTIATES - 506 Variant Also Negotiates
- INSUFFICIENT_STORAGE - 507 Insufficient Storage
- LOOP_DETECTED - 508 Loop Detected
- BANDWIDTH_LIMIT_EXCEEDED - 509 Bandwidth Limit Exceeded
- NOT_EXTENDED - 510 Not Extended
- NETWORK_AUTHENTICATION_REQUIRED - 511 Network Authentication Required.

- MOVED_TEMPORARILY - Устарело. Использовать FOUND которого будет возвращено HttpStatus.valueOf(302)
- METHOD_FAILURE - Устарело. См. проект изменений WebDAV.
- INSUFFICIENT_SPACE_ON_RESOURCE - Устарело. См. проект изменений WebDAV.
- CHECKPOINT - Устарело. Использовать EARLY_HINTS которого будет возвращено HttpStatus.valueOf(103)
- DESTINATION_LOCKED - Устарело. См. проект изменений WebDAV.
- REQUEST_ENTITY_TOO_LARGE - Устарело. Использовать PAYLOAD_TOO_LARGE которого будет возвращено HttpStatus.valueOf(413)
- REQUEST_URI_TOO_LONG - Устарело. Использовать URI_TOO_LONG которого будет возвращено HttpStatus.valueOf(414)
- USE_PROXY - Устарело. Из-за проблем безопасности, связанных с внутриполосной настройкой прокси-сервера
________________________________________________________________________________________________________________________
*** Методы ***

- String getReasonPhrase() - Верните фразу-причину этого кода состояния.

- boolean is1xxInformational() - Находится ли этот код состояния в информационном классе ( 1xx).

- boolean is2xxSuccessful() - Находится ли этот код состояния в классе Successful ( 2xx).

- boolean is3xxRedirection() - Находится ли этот код состояния в классе Redirection ( 3xx).

- boolean is4xxClientError() - Находится ли этот код состояния в классе ошибок клиента ( 4xx).

- boolean is5xxServerError() - Находится ли этот код состояния в классе ошибок сервера ( 5xx).

- boolean isError() - Находится ли этот код состояния в классе ошибок клиента или сервера.

- static HttpStatus resolve(int statusCode) - Если возможно, преобразуйте данный код состояния в HttpStatus.

- HttpStatus.Series series() - Верните серию статуса HTTP этого кода состояния.

- String toString() - Верните строковое представление этого кода состояния.

- int value() - Верните целочисленное значение этого кода состояния.

- static HttpStatus valueOf(int statusCode) - Верните HttpStatus константу перечисления с указанным числовым значением.

- static HttpStatus valueOf(String name) - Возвращает константу перечисления этого класса с указанным именем.

- static HttpStatus[] values() - Возвращает массив, содержащий константы этого класса перечисления, в том порядке,
                                 в котором они объявлены.
________________________________________________________________________________________________________________________
Методы, унаследованные от класса java.lang.Enum: clone, compareTo, describeConstable, equals, finalize,
                                                 getDeclaringClass, hashCode, name, ordinal, valueOf

Методы, унаследованные от класса java.lang.Object: getClass, notify, notifyAll, wait, wait, wait

Методы, унаследованные от интерфейса org.springframework.http.HttpStatusCode: isSameCodeAs
________________________________________________________________________________________________________________________