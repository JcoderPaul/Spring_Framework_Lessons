См. исходник (ENG):
https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/context/SecurityContextHolder.html
________________________________________________________________________________________________________________________
****** Class SecurityContextHolder ******

Пакет: org.springframework.security.core.context

java.lang.Object
    org.springframework.security.core.context.SecurityContextHolder

________________________________________________________________________________________________________________________
public class SecurityContextHolder extends Object
________________________________________________________________________________________________________________________
Связывает заданный SecurityContext с текущим потоком выполнения. Этот класс предоставляет ряд статических методов,
которые делегируют экземпляр SecurityContextHolderStrategy.

Цель класса — предоставить удобный способ указать стратегию, которую следует использовать для данной JVM. Это настройка
всей JVM, поскольку все в этом классе статично, что упрощает использование кода при вызове.

Чтобы указать, какую стратегию следует использовать, необходимо указать настройку режима. Параметр режима — это один из
трех допустимых параметров MODE_, определенных как статические конечные поля, или полное имя класса для конкретной
реализации SecurityContextHolderStrategy, которая предоставляет общедоступный конструктор без аргументов.

Есть два способа указать желаемую строку режима стратегии:
- Первый — указать его через системное свойство, указанное в ключе SYSTEM_PROPERTY.
- Второй — вызвать setStrategyName(String) перед использованием класса.

Если ни один из подходов не используется, класс по умолчанию будет использовать MODE_THREADLOCAL, который обратно
совместим, имеет меньше несовместимостей с JVM и подходит для серверов (тогда как MODE_GLOBAL определенно не подходит
для использования на сервере).
________________________________________________________________________________________________________________________
*** Поля ***

- static final String MODE_GLOBAL

- static final String MODE_INHERITABLETHREADLOCAL

- static final String MODE_THREADLOCAL

- static final String SYSTEM_PROPERTY

См. Constant Field Values - https://docs.spring.io/spring-security/site/docs/current/api/constant-values.html
________________________________________________________________________________________________________________________
*** Конструктор ***

SecurityContextHolder()
________________________________________________________________________________________________________________________
*** Методы ***

- static void clearContext() - Явно очищает значение контекста из текущего потока.

- static SecurityContext createEmptyContext() - Делегирует создание нового пустого контекста настроенной стратегии.

- static SecurityContext getContext() - Получите ток SecurityContext.

- static SecurityContextHolderStrategy getContextHolderStrategy() - Позволяет получить контекстную стратегию.

- static Supplier<SecurityContext> getDeferredContext() - Получает объект Supplier, который возвращает текущий контекст.

- static int getInitializeCount() - В первую очередь для целей устранения неполадок этот метод показывает, сколько раз
                                    класс повторно инициализировал свой файл SecurityContextHolderStrategy.

- static void setContext(SecurityContext context) - Связывает новый поток SecurityContext с текущим потоком выполнения.

________________________________________________________________________________________________________________________
- static void setContextHolderStrategy(SecurityContextHolderStrategy strategy) - Используйте эту
  SecurityContextHolderStrategy. Вызовите либо setStrategyName(String), либо этот метод, но не оба одновременно.
  Этот метод не является потокобезопасным. Изменение стратегии во время выполнения запросов может привести к
  возникновению условий гонки.

  SecurityContextHolder поддерживает статическую ссылку на предоставленный SecurityContextHolderStrategy. Это
  означает, что стратегия и ее элементы не будут подлежать сборке мусора, пока вы не удалите свою стратегию.
  Чтобы обеспечить сбор мусора, запомните исходную стратегию следующим образом:

************************************************************************************************************************
 SecurityContextHolderStrategy original = SecurityContextHolder.getContextHolderStrategy();
 SecurityContextHolder.setContextHolderStrategy(myStrategy);
************************************************************************************************************************

И затем, когда вы будете готовы к сбору мусора в myStrategy, вы можете сделать:

************************************************************************************************************************
SecurityContextHolder.setContextHolderStrategy(original);
************************************************************************************************************************

Параметр: strategy - используемый SecurityContextHolderStrategy;

________________________________________________________________________________________________________________________
- static void setDeferredContext(Supplier<SecurityContext> deferredContext) - Устанавливает объект Supplier (поставщика),
                                                                              который будет возвращать текущий контекст.
Реализации могут переопределить значение по умолчанию, чтобы избежать вызова Supplier.get().

Параметры: deferredContext — поставщик, который возвращает SecurityContext.

________________________________________________________________________________________________________________________
- static void setStrategyName(String strategyName) - Изменяет предпочтительную стратегию. НЕ вызывайте этот метод более
                                                     одного раза для данной JVM, так как это приведет к повторной
                                                     инициализации стратегии и отрицательно повлияет на любые
                                                     существующие потоки, использующие старую стратегию.

Параметры: StrategyName — полное имя класса стратегии, которую следует использовать.

________________________________________________________________________________________________________________________

- String toString()

________________________________________________________________________________________________________________________
Методы, унаследованные от класса java.lang.Object: clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait

________________________________________________________________________________________________________________________