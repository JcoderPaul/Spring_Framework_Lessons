См. исходник (ENG):
https://www.baeldung.com/spring-security-csrf
________________________________________________________________________________________________________________________
****** Руководство по защите CSRF в Spring Security ******

В этой статье мы обсудим атаки межсайтовой подделки запросов (CSRF) и способы их предотвращения с помощью Spring Security.

________________________________________________________________________________________________________________________
*** Две простые CSRF-атаки ***

Существует несколько форм CSRF-атак. Давайте обсудим некоторые из наиболее распространенных из них.

________________________________________________________________________________________________________________________
*** Примеры с методом GET ***

Давайте рассмотрим следующий запрос GET, используемый вошедшим в систему пользователем для перевода денег на определенный
банковский счет 1234:

************************************************************************************************************************
GET http://bank.com/transfer?accountNo=1234&amount=100
************************************************************************************************************************

Если злоумышленник вместо этого хочет перевести деньги со счета жертвы на свой собственный счет ( 5678 ), ему необходимо
заставить жертву инициировать запрос (при этом, жертва уже должна быть аутентифицирована на сайте bank.com):

************************************************************************************************************************
GET http://bank.com/transfer?accountNo=5678&amount=100000
************************************************************************************************************************

Есть несколько способов сделать это:
- Обычная ссылка, на некий развлекательный ресурс, например картинки кошаков, тут злоумышленник может убедить жертву нажать на
эту ссылку, для просмотра картинок котиков (однако, вместо крутой галереи с котейками, идет переход по злой ссылке):

************************************************************************************************************************
<a href="http://bank.com/transfer?accountNo=5678&amount=1000">
Show Kittens Pictures
</a>
************************************************************************************************************************

- Изображение, тут злоумышленник может использовать тег <img/> с целевым URL-адресом в качестве источника изображения.
Другими словами, щелчок на картинке даже не обязателен. Запрос будет автоматически выполнен при загрузке целевой
страницы:

************************************************************************************************************************
<img src="http://bank.com/transfer?accountNo=5678&amount=100000"/>
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** ПОСТ-пример ***

Предположим, что основной запрос должен быть POST-запросом:

************************************************************************************************************************
POST http://bank.com/transfer
accountNo=1234&amount=100
************************************************************************************************************************

В этом случае злоумышленнику необходимо заставить жертву выполнить аналогичный запрос, но с немного другими параметрами
в его теле:

************************************************************************************************************************
POST http://bank.com/transfer
accountNo=5678&amount=100000
************************************************************************************************************************

Ни теги <a>, ни <img/> в этом случае работать не будут. Злоумышленнику понадобится некая форма для заполнения <form>:

************************************************************************************************************************
<form action="http://bank.com/transfer" method="POST">
    <input type="hidden" name="accountNo" value="5678"/>
    <input type="hidden" name="amount" value="1000"/>
    <input type="submit" value="Show Kittens Pictures"/>
</form>
************************************************************************************************************************

Однако форму можно отправить автоматически с помощью JavaScript:

************************************************************************************************************************
<body onload="document.forms[0].submit()">
<form>
...
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Практическое моделирование ***

Теперь, когда мы понимаем, как выглядит CSRF-атака, давайте смоделируем эти примеры в приложении Spring.

Мы собираемся начать с простой реализации контроллера — BankController:

************************************************************************************************************************
@Controller
public class BankController {
    private Logger logger = LoggerFactory.getLogger(getClass());

    @RequestMapping(value = "/transfer", method = RequestMethod.GET)
    @ResponseBody
    public String transfer(@RequestParam("accountNo") int accountNo,
                           @RequestParam("amount") final int amount) {
        logger.info("Transfer to {}", accountNo);
        ...
    }

    @RequestMapping(value = "/transfer", method = RequestMethod.POST)
    @ResponseStatus(HttpStatus.OK)
    public void transfer2(@RequestParam("accountNo") int accountNo,
                          @RequestParam("amount") final int amount) {
        logger.info("Transfer to {}", accountNo);
        ...
    }
}
************************************************************************************************************************

Давайте также создадим базовую HTML-страницу, которая запускает операцию банковского перевода:

************************************************************************************************************************
<html>
<body>
    <h1>CSRF test on Origin</h1>
    <a href="transfer?accountNo=1234&amount=100">Transfer Money to John</a>

    <form action="transfer" method="POST">
        <label>Account Number</label>
        <input name="accountNo" type="number"/>

        <label>Amount</label>
        <input name="amount" type="number"/>

        <input type="submit">
    </form>
</body>
</html>
************************************************************************************************************************

Это страница основного приложения, работающего в исходном домене. Следует отметить, что мы реализовали GET через простую
ссылку и POST через простую <form>. Теперь посмотрим, как будет выглядеть страница злоумышленника:

************************************************************************************************************************
<html>
<body>
    <a href="http://localhost:8080/transfer?accountNo=5678&amount=1000">Show Kittens Pictures</a>

    <img src="http://localhost:8080/transfer?accountNo=5678&amount=1000"/>

    <form action="http://localhost:8080/transfer" method="POST">
        <input name="accountNo" type="hidden" value="5678"/>
        <input name="amount" type="hidden" value="100000"/>
        <input type="submit" value="Show Kittens Picture">
    </form>
</body>
</html>
************************************************************************************************************************

Эта страница будет работать на другом домене — домене злоумышленника. Наконец, давайте запустим как исходное приложение,
так и приложение злоумышленника локально. Чтобы атака сработала, пользователь должен пройти аутентификацию в исходном
приложении с помощью файла cookie сеанса.

Давайте сначала получим доступ к исходной странице приложения:

************************************************************************************************************************
http://localhost:8081/spring-rest-full/csrfHome.html
************************************************************************************************************************

В нашем браузере будет установлен файл cookie JSESSIONID. Затем давайте получим доступ к странице злоумышленника:

************************************************************************************************************************
http://localhost:8081/spring-security-rest/api/csrfAttacker.html
************************************************************************************************************************

Если мы отследим запросы, исходящие с этой страницы злоумышленника, мы сможем обнаружить те, которые попали в исходное
приложение. Поскольку файл cookie JSESSIONID автоматически отправляется вместе с этими запросами, Spring аутентифицирует
их, как если бы они поступали из исходного домена.

________________________________________________________________________________________________________________________
*** Spring MVC-приложение ***

Чтобы защитить приложения MVC, Spring добавляет токен CSRF в каждое сгенерированное представление. Этот токен должен
отправляться на сервер при каждом HTTP-запросе, изменяющем состояние (PATCH, POST, PUT и DELETE, но не GET). Это
защищает наше приложение от атак CSRF, поскольку злоумышленник не может получить этот токен со своей страницы.

Далее мы увидим, как настроить безопасность нашего приложения и как сделать наш клиент совместимым с ней.

________________________________________________________________________________________________________________________
*** Конфигурация безопасности Spring ***

В старой конфигурации XML (до Spring Security 4) защита CSRF была отключена по умолчанию, и мы могли включить ее при
необходимости через:

************************************************************************************************************************
<http>
    ...
    <csrf />
</http>
************************************************************************************************************************

Начиная с Spring Security 4.x, защита CSRF включена по умолчанию. Эта конфигурация по умолчанию добавляет токен CSRF к
атрибуту HttpServletRequest с именем _csrf. Если нам нужно, мы можем отключить эту конфигурацию:

************************************************************************************************************************
@Bean
public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    http
      .csrf().disable();
    return http.build();
}
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Конфигурация клиента ***

Теперь нам нужно включить токен CSRF в наши запросы. Атрибут _csrf содержит следующую информацию:
- token – значение токена CSRF.
- parameterName – имя параметра HTML-формы, которое должно включать значение токена.
- headerName – имя HTTP-заголовка, которое должно включать значение токена.

Если в наших представлениях используются HTML-формы, мы будем использовать значения parameterName и токена, чтобы
добавить скрытый ввод:

************************************************************************************************************************
<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/>
************************************************************************************************************************

Если наши представления используют JSON, нам нужно использовать значения headerName и токена, чтобы добавить заголовок
HTTP. Сначала нам нужно включить значение токена и имя заголовка в метатеги:

************************************************************************************************************************
<meta name="_csrf" content="${_csrf.token}"/>
<meta name="_csrf_header" content="${_csrf.headerName}"/>
************************************************************************************************************************

Затем давайте получим значения метатегов с помощью JQuery:

************************************************************************************************************************
var token = $("meta[name='_csrf']").attr("content");
var header = $("meta[name='_csrf_header']").attr("content");
************************************************************************************************************************

Наконец, давайте используем эти значения для установки нашего заголовка XHR:

************************************************************************************************************************
$(document).ajaxSend(function(e, xhr, options) {
    xhr.setRequestHeader(header, token);
});
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Spring API без сохранения состояния ***

Давайте рассмотрим случай Spring API без сохранения состояния, используемого внешним интерфейсом. Как объясняется в
нашей специальной статье - https://www.baeldung.com/csrf-stateless-rest-api, нам нужно понять, требуется ли CSRF-защита
для нашего API без сохранения состояния.

Если наш API без сохранения состояния использует аутентификацию на основе токенов, например JWT, нам не нужна защита
CSRF, и мы должны отключить ее, как мы видели ранее.

Однако, если наш API без сохранения состояния использует аутентификацию с использованием файлов cookie сеанса, нам
необходимо включить защиту CSRF, как мы увидим дальше.

________________________________________________________________________________________________________________________
*** Внутренняя конфигурация ***

Наш API без сохранения состояния не может добавить токен CSRF, как наша конфигурация MVC, поскольку он не генерирует
никакого HTML-представления. В этом случае мы можем отправить токен CSRF в файле cookie, используя
CookieCsrfTokenRepository:

************************************************************************************************************************
@Configuration
public class SecurityWithCsrfCookieConfig {
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
          .csrf()
          .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());
        return http.build();
    }
}
************************************************************************************************************************

Эта конфигурация установит файл cookie XSRF-TOKEN во внешний интерфейс. Поскольку мы установили для флага «Только HTTP»
значение false, интерфейсная часть сможет получить этот файл cookie с помощью JavaScript.

________________________________________________________________________________________________________________________
*** Внешняя конфигурация ***

С помощью JavaScript нам нужно найти значение файла cookie XSRF-TOKEN в списке document.cookie. Поскольку этот список
хранится в виде строки, мы можем получить его с помощью этого регулярного выражения:

************************************************************************************************************************
const csrfToken = document.cookie.replace(/(?:(?:^|.*;\s*)XSRF-TOKEN\s*\=\s*([^;]*).*$)|^.*$/, '$1');
************************************************************************************************************************

Затем мы должны отправить токен на каждый запрос REST, который изменяет состояние API: POST, PUT, DELETE и PATCH.
Spring ожидает получить его в заголовке X-XSRF-TOKEN. Мы можем просто установить его с помощью API JavaScript Fetch:

************************************************************************************************************************
fetch(url, {
  method: 'POST',
  body: /* data to send */,
  headers: { 'X-XSRF-TOKEN': csrfToken },
})
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Проверка отключения CSRF ***

Имея все это ввиду, давайте проведем небольшое тестирование. Давайте сначала попробуем отправить простой запрос POST,
когда CSRF ОТКЛЮЧЕН:

************************************************************************************************************************
@ContextConfiguration(classes = { SecurityWithoutCsrfConfig.class, ...})
public class CsrfDisabledIntegrationTest extends CsrfAbstractIntegrationTest {

    @Test
    public void givenNotAuth_whenAddFoo_thenUnauthorized() throws Exception {
        mvc.perform(post("/foos").contentType(MediaType.APPLICATION_JSON)
                                 .content(createFoo()))
                                 .andExpect(status().isUnauthorized());
    }

    @Test
    public void givenAuth_whenAddFoo_thenCreated() throws Exception {
        mvc.perform(post("/foos").contentType(MediaType.APPLICATION_JSON)
                                 .content(createFoo())
                                 .with(testUser()))
                                 .andExpect(status().isCreated());
    }
}
************************************************************************************************************************

Здесь мы используем базовый класс для хранения общей вспомогательной логики тестирования — CsrfAbstractIntegrationTest:

************************************************************************************************************************
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
public class CsrfAbstractIntegrationTest {
    @Autowired
    private WebApplicationContext context;

    @Autowired
    private Filter springSecurityFilterChain;

    protected MockMvc mvc;

    @Before
    public void setup() {
        mvc = MockMvcBuilders.webAppContextSetup(context)
          .addFilters(springSecurityFilterChain)
          .build();
    }

    protected RequestPostProcessor testUser() {
        return user("user").password("userPass").roles("USER");
    }

    protected String createFoo() throws JsonProcessingException {
        return new ObjectMapper().writeValueAsString(new Foo(randomAlphabetic(6)));
    }
}
************************************************************************************************************************

Следует отметить, что запрос был успешно выполнен, когда у пользователя были правильные учетные данные — никакой
дополнительной информации не требовалось. Это означает, что злоумышленник может просто использовать любой из ранее
обсуждавшихся векторов атаки для компрометации системы.

________________________________________________________________________________________________________________________
*** Тест с поддержкой CSRF ***

Теперь давайте включим защиту CSRF и посмотрим разницу:

************************************************************************************************************************
@ContextConfiguration(classes = { SecurityWithCsrfConfig.class, ...})
public class CsrfEnabledIntegrationTest extends CsrfAbstractIntegrationTest {

    @Test
    public void givenNoCsrf_whenAddFoo_thenForbidden() throws Exception {
        mvc.perform(post("/foos").contentType(MediaType.APPLICATION_JSON)
                                 .content(createFoo())
                                 .with(testUser()))
                                 .andExpect(status().isForbidden());
    }

    @Test
    public void givenCsrf_whenAddFoo_thenCreated() throws Exception {
        mvc.perform(post("/foos").contentType(MediaType.APPLICATION_JSON)
                                 .content(createFoo())
                                 .with(testUser())
                                 .with(csrf()))
                                 .andExpect(status().isCreated());
    }
}
************************************************************************************************************************

Мы видим, как в этом тесте используется другая конфигурация безопасности — та, в которой включена защита CSRF. Теперь
запрос POST просто завершится неудачно, если токен CSRF не включен, что, конечно, означает, что более ранние атаки
больше невозможны.

Кроме того, метод csrf() в тесте создает RequestPostProcessor, который автоматически заполняет действительный токен
CSRF в запросе в целях тестирования.

________________________________________________________________________________________________________________________
*** ИТОГ ***

Мы обсудили пару атак CSRF и способы их предотвращения с помощью Spring Security.
Код, представленный в этой статье, на GitHub -
https://github.com/eugenp/tutorials/tree/master/spring-security-modules/spring-security-web-mvc-custom.