См. исходник (ENG):
https://www.baeldung.com/spring-prevent-xss
________________________________________________________________________________________________________________________
****** Предотвратите межсайтовый скриптинг (XSS) в приложении Spring ******

При создании веб-приложения Spring важно сосредоточиться на безопасности. Межсайтовый скриптинг (XSS) — одна из наиболее
серьезных атак на веб-безопасность. Предотвращение XSS-атаки является непростой задачей в приложении Spring. Spring
предоставляет встроенную помощь для полной защиты.

В этой статье мы будем использовать доступные функции Spring Security.

________________________________________________________________________________________________________________________
*** Что такое атака с использованием межсайтового скриптинга (XSS)? ***

*** Определение проблемы ***

XSS — распространенный тип атаки с внедрением. В XSS злоумышленник пытается выполнить вредоносный код в веб-приложении.
Они взаимодействуют с ним через веб-браузер или инструменты HTTP-клиента, такие как Postman.

Существует два типа XSS-атак:
- Отраженный или непостоянный XSS;
- Сохраненный или постоянный XSS;

В отраженном или непостоянном XSS ненадежные пользовательские данные передаются в веб-приложение, которое немедленно
возвращается в ответе, добавляя на страницу ненадежный контент. Веб-браузер предполагает, что код пришел с веб-сервера,
и выполняет его. Это может позволить хакеру отправить вам ссылку, при переходе по которой ваш браузер получит ваши
личные данные с сайта, который вы используете, а затем перенаправит их на сервер хакера.

В хранимом или постоянном XSS ввод злоумышленника сохраняется на веб-сервере. Впоследствии любые будущие посетители
могут выполнить этот вредоносный код.

________________________________________________________________________________________________________________________
*** Защита от нападения ***

Основная стратегия предотвращения XSS-атак — очистить вводимые пользователем данные. В веб-приложении Spring ввод
пользователя представляет собой HTTP-запрос. Чтобы предотвратить атаку, мы должны проверить содержимое HTTP-запроса и
удалить все, что может быть исполняемым на сервере или в браузере.

Для обычного веб-приложения, доступ к которому осуществляется через веб-браузер, мы можем использовать встроенные
функции Spring Security (Reflected XSS).

________________________________________________________________________________________________________________________
*** Обеспечение XSS-безопасности приложения с помощью Spring Security ***

Spring Security по умолчанию предоставляет несколько заголовков безопасности. Он включает заголовок X-XSS-Protection.
X-XSS-Protection сообщает браузеру блокировать то, что выглядит как XSS. Spring Security может автоматически добавлять
этот заголовок безопасности в ответ. Чтобы активировать это, мы настраиваем поддержку XSS в классе конфигурации
Spring Security.

Используя эту функцию, браузер не выполняет рендеринг при обнаружении попытки XSS. Однако некоторые веб-браузеры не
реализовали аудитор XSS. В этом случае они не используют заголовок X-XSS-Protection. Чтобы решить эту проблему, мы
также можем использовать функцию политики безопасности контента (CSP) .

CSP — это дополнительный уровень безопасности, который помогает смягчить атаки XSS и инъекции данных. Чтобы включить
его, нам нужно настроить наше приложение на возврат заголовка Content-Security-Policy, предоставив bean-компонент
SecurityFilterChain:

************************************************************************************************************************
@Configuration
public class SecurityConf {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.headers(headers ->
                headers.xssProtection(
                        xss -> xss.headerValue(XXssProtectionHeaderWriter.HeaderValue.ENABLED_MODE_BLOCK)
                ).contentSecurityPolicy(
                        cps -> cps.policyDirectives("script-src 'self'")
                ));
        return http.build();
    }
}
************************************************************************************************************************

И так, мы кратко рассмотрели, как предотвратить XSS-атаки с помощью функции xssProtection Spring Security.

Исходный код можно найти на GitHub -
https://github.com/eugenp/tutorials/tree/master/spring-security-modules/spring-security-core-2;