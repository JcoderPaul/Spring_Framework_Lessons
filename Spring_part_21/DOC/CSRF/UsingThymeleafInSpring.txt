См. исходник (ENG):
https://www.baeldung.com/thymeleaf-in-spring-mvc
________________________________________________________________________________________________________________________
****** Введение в использование Thymeleaf в Spring ******

Thymeleaf — https://www.thymeleaf.org/, это шаблонизатор Java для обработки и создания HTML, XML, JavaScript, CSS и
текста. В этой статье мы обсудим, как использовать Thymeleaf с Spring, а также некоторые основные варианты использования
на уровне представления приложения Spring MVC.

Библиотека чрезвычайно расширяема, а ее естественные возможности создания шаблонов гарантируют, что мы можем создавать
прототипы шаблонов без серверной части. Это делает разработку очень быстрой по сравнению с другими популярными
механизмами шаблонов, такими как JSP.

________________________________________________________________________________________________________________________
*** Интеграция Thymeleaf со Spring ***

Сначала давайте посмотрим конфигурации, необходимые для интеграции со Spring. Для интеграции необходима библиотека
thymeleaf-spring. Мы добавим следующие зависимости в наш POM-файл Maven:

************************************************************************************************************************
<dependency>
    <groupId>org.thymeleaf</groupId>
    <artifactId>thymeleaf</artifactId>
    <version>3.1.2.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.thymeleaf</groupId>
    <artifactId>thymeleaf-spring5</artifactId>
    <version>3.1.2.RELEASE</version>
</dependency>
************************************************************************************************************************

Обратите внимание, что для проекта Spring 4 нам нужно использовать библиотеку thymeleaf-spring4 вместо thymeleaf-spring5.

Класс SpringTemplateEngine выполняет все шаги настройки.

Мы можем настроить этот класс как компонент в файле конфигурации Java:

************************************************************************************************************************
@Bean
@Description("Thymeleaf Template Resolver")
public ServletContextTemplateResolver templateResolver() {
    ServletContextTemplateResolver templateResolver = new ServletContextTemplateResolver();
    templateResolver.setPrefix("/WEB-INF/views/");
    templateResolver.setSuffix(".html");
    templateResolver.setTemplateMode("HTML5");

    return templateResolver;
}

@Bean
@Description("Thymeleaf Template Engine")
public SpringTemplateEngine templateEngine() {
    SpringTemplateEngine templateEngine = new SpringTemplateEngine();
    templateEngine.setTemplateResolver(templateResolver());
    templateEngine.setTemplateEngineMessageSource(messageSource());
    return templateEngine;
}
************************************************************************************************************************

Префикс и суффикс свойств bean-компонента templateResolver указывают расположение страниц представления в каталоге
веб-приложения и расширение их имени файла соответственно.

Интерфейс ViewResolver в Spring MVC сопоставляет имена представлений, возвращаемые контроллером, с реальными объектами
представления. ThymeleafViewResolver реализует интерфейс ViewResolver и используется для определения того, какие
представления Thymeleaf следует отображать, учитывая имя представления.

Последним шагом интеграции является добавление ThymeleafViewResolver в качестве bean-компонента:

************************************************************************************************************************
@Bean
@Description("Thymeleaf View Resolver")
public ThymeleafViewResolver viewResolver() {
    ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();
    viewResolver.setTemplateEngine(templateEngine());
    viewResolver.setOrder(1);
    return viewResolver;
}
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Thymeleaf в Spring Boot ***

Spring Boot обеспечивает автоматическую настройку Thymeleaf, добавляя зависимость Spring-boot-starter-thymeleaf:

************************************************************************************************************************
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
    <version>2.3.3.RELEASE</version>
</dependency>
************************************************************************************************************************

Никакой явной настройки не требуется. По умолчанию HTML-файлы должны размещаться в папке ресурсов/шаблонов.

________________________________________________________________________________________________________________________
*** Отображение значений из источника сообщения (файлы свойств) ***

Мы можем использовать атрибут тега th:text="#{key}" для отображения значений из файлов свойств. Чтобы это работало, нам
нужно настроить файл свойств как bean-компонент messageSource:

************************************************************************************************************************
@Bean
@Description("Spring Message Resolver")
public ResourceBundleMessageSource messageSource() {
    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();
    messageSource.setBasename("messages");
    return messageSource;
}
************************************************************************************************************************

Вот HTML-код Thymeleaf для отображения значения, связанного с ключом Welcome.message:

************************************************************************************************************************
<span th:text="#{welcome.message}" />
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Отображение атрибутов модели ***

*** Простые атрибуты ***

Мы можем использовать атрибут тега th:text="${attributename}" для отображения значения атрибутов модели. Добавим атрибут
модели с именем serverTime в класс контроллера:

************************************************************************************************************************
model.addAttribute("serverTime", dateFormat.format(new Date()));
************************************************************************************************************************

А вот HTML-код для отображения значения атрибута serverTime :

************************************************************************************************************************
Current time is <span th:text="${serverTime}" />
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Атрибуты коллекции ***

Если атрибут модели представляет собой набор объектов, мы можем использовать атрибут тега th:each для перебора по нему.
Давайте определим класс модели Student с двумя полями - id и name :

************************************************************************************************************************
public class Student implements Serializable {
    private Integer id;
    private String name;
    // standard getters and setters
}
************************************************************************************************************************

Теперь мы добавим список студентов в качестве атрибута модели в классе контроллера:

************************************************************************************************************************
List<Student> students = new ArrayList<Student>();
// logic to build student data
model.addAttribute("students", students);
************************************************************************************************************************

Наконец, мы можем использовать код шаблона Thymeleaf для перебора списка студентов и отображения всех значений полей:

************************************************************************************************************************
<tbody>
    <tr th:each="student: ${students}">
        <td th:text="${student.id}" />
        <td th:text="${student.name}" />
    </tr>
</tbody>
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Условная оценка ***

________________________________________________________________________________________________________________________
*** IF и UNLESS ***

Мы используем атрибут th:if="${condition}" для отображения части представления, если условие выполнено. И мы используем
атрибут th:unless="${condition}" для отображения части представления, если условие не выполнено. Давайте добавим поле
пола в модель Student :

************************************************************************************************************************
public class Student implements Serializable {
    private Integer id;
    private String name;
    private Character gender;

    // standard getters and setters
}
************************************************************************************************************************

Предположим, что это поле имеет два возможных значения (M или F) для указания пола учащегося. Если мы хотим отображать
слова «Мужской» или «Женский» вместо одного символа, мы можем сделать это, используя этот код Thymeleaf:

************************************************************************************************************************
<td>
    <span th:if="${student.gender} == 'M'" th:text="Male" />
    <span th:unless="${student.gender} == 'M'" th:text="Female" />
</td>
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** SWITCH and CASE ***

Мы используем атрибуты th:switch и th:case для условного отображения контента с использованием структуры оператора
переключателя. Давайте перепишем предыдущий код, используя атрибуты th:switch и th:case :

************************************************************************************************************************
<td th:switch="${student.gender}">
    <span th:case="'M'" th:text="Male" />
    <span th:case="'F'" th:text="Female" />
</td>
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Обработка ввода пользователя ***

Мы можем обрабатывать ввод формы, используя атрибуты th:action="@{url}" и th:object="${object}". Мы используем th:action
для предоставления URL-адреса действия формы и th:object для указания объекта, к которому будут привязаны отправленные
данные формы.

Отдельные поля сопоставляются с помощью атрибута th:field="*{name}", где имя — это соответствующее свойство объекта.
Для класса Student мы можем создать форму ввода:

************************************************************************************************************************
<form action="#" th:action="@{/saveStudent}" th:object="${student}" method="post">
    <table border="1">
        <tr>
            <td><label th:text="#{msg.id}" /></td>
            <td><input type="number" th:field="*{id}" /></td>
        </tr>
        <tr>
            <td><label th:text="#{msg.name}" /></td>
            <td><input type="text" th:field="*{name}" /></td>
        </tr>
        <tr>
            <td><input type="submit" value="Submit" /></td>
        </tr>
    </table>
</form>
************************************************************************************************************************

В приведенном выше коде /saveStudent — это URL-адрес действия формы, а студент — это объект, содержащий отправленные
данные формы. Метод saveStudent обрабатывает отправку формы:

************************************************************************************************************************
@RequestMapping(value = "/saveStudent", method = RequestMethod.POST)
public String saveStudent(Model model, @ModelAttribute("student") Student student) {
    // logic to process input data
}
************************************************************************************************************************

Аннотация @RequestMapping сопоставляет метод контроллера с URL-адресом, указанным в форме. Аннотированный метод
saveStudent() выполняет необходимую обработку отправленной формы. Наконец, аннотация @ModelAttribute привязывает
поля формы к объекту студента.

________________________________________________________________________________________________________________________
*** Отображение ошибок проверки ***

Мы можем использовать функцию #fields.hasErrors(), чтобы проверить, есть ли в поле какие-либо ошибки проверки. И мы
используем функцию #fields.errors() для отображения ошибок для определенного поля. Имя поля является входным параметром
для обеих этих функций.

Давайте посмотрим на HTML-код для перебора и отображения ошибок для каждого поля формы:

************************************************************************************************************************
<ul>
    <li th:each="err : ${#fields.errors('id')}" th:text="${err}" />
    <li th:each="err : ${#fields.errors('name')}" th:text="${err}" />
</ul>
************************************************************************************************************************

Вместо имени поля приведенные выше функции принимают подстановочный знак * или константу all для обозначения всех полей.
Мы использовали атрибут th:each для перебора нескольких ошибок, которые могут присутствовать в каждом из полей. Вот
предыдущий HTML-код, переписанный с использованием подстановочного знака * :

************************************************************************************************************************
<ul>
    <li th:each="err : ${#fields.errors('*')}" th:text="${err}" />
</ul>
************************************************************************************************************************

И здесь мы используем константу all:

************************************************************************************************************************
<ul>
    <li th:each="err : ${#fields.errors('all')}" th:text="${err}" />
</ul>
************************************************************************************************************************

Аналогичным образом мы можем отображать глобальные ошибки в Spring, используя глобальную константу. Вот HTML-код для
отображения глобальных ошибок:

************************************************************************************************************************
<ul>
    <li th:each="err : ${#fields.errors('global')}" th:text="${err}" />
</ul>
************************************************************************************************************************

Кроме того, мы можем использовать атрибут th:errors для отображения сообщений об ошибках. Предыдущий код для отображения
ошибок в форме можно переписать, используя атрибут th:errors :

************************************************************************************************************************
<ul>
    <li th:errors="*{id}" />
    <li th:errors="*{name}" />
</ul>
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** Использование конверсий ***

Мы используем синтаксис двойных скобок {{}} для форматирования данных для отображения. При этом используются средства
форматирования, настроенные для этого типа поля в bean - компоненте преобразования Service контекстного файла. Давайте
посмотрим, как отформатировать поле имени в классе Student:

************************************************************************************************************************
<tr th:each="student: ${students}">
    <td th:text="${{student.name}}" />
</tr>
************************************************************************************************************************

В приведенном выше коде используется класс NameFormatter, настроенный путем переопределения метода addFormatters() из
интерфейса WebMvcConfigurer. Для этой цели наш класс @Configuration переопределяет класс WebMvcConfigurerAdapter:

************************************************************************************************************************
@Configuration
public class WebMVCConfig extends WebMvcConfigurerAdapter {
    // ...
    @Override
    @Description("Custom Conversion Service")
    public void addFormatters(FormatterRegistry registry) {
        registry.addFormatter(new NameFormatter());
    }
}
************************************************************************************************************************

Класс NameFormatter реализует интерфейс Spring Formatter. Мы также можем использовать утилиту #conversions для
преобразования объектов для отображения. Синтаксис служебной функции: #conversions.convert(Object, Class), где
Object преобразуется в тип класса.

Вот как отобразить процентное поле объекта учащегося с удаленной дробной частью:

************************************************************************************************************************
<tr th:each="student: ${students}">
    <td th:text="${#conversions.convert(student.percentage, 'Integer')}" />
</tr>
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** ИТОГ ***

В этой статье мы увидели, как интегрировать и использовать Thymeleaf в приложении Spring MVC. Мы также видели примеры
того, как отображать поля, принимать входные данные, отображать ошибки проверки и преобразовывать данные для
отображения.

Пример кода доступен на GitHub - https://github.com/eugenp/tutorials/tree/master/spring-web-modules/spring-thymeleaf