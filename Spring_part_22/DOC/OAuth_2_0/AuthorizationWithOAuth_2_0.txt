См. исходники и дополнения (RUS):
https://habr.com/ru/companies/dododev/articles/520046/
https://habr.com/ru/companies/nixys/articles/566910/

https://ru.wikipedia.org/wiki/OAuth
https://datatracker.ietf.org/doc/html/rfc6749

https://alexkosarev.name/
________________________________________________________________________________________________________________________
****** Технология OAuth 2.0 ******

________________________________________________________________________________________________________________________
*** Взаимодействие между пользователем и приложениями без OAuth ***

В простом и честном мире (почти честном) нам бы не пришлось заботиться о безопасности наших данных и возможно
взаимодействие обычного пользователя с различными сервисами (приложениями) выглядело бы так см.
DOC/OAuth_2_0/images/SimpleOperationApplicationsWithoutOAuth.jpg.

В данном случае, одно приложение - 'Кинокасса', после покупки билетов, просит у пользователя разрешение на доступ к
приложению - 'Календарь'. Причем не просто доступ на разовую операцию - добавить напоминание о походе в кино, а полный
доступ (в плоть до уничтожения всех данных, не по злобе, а так, случайно). 'Календарь' может содержать массу
конфиденциальной информации (данные пользователя, расписание встреч, данные партнеров пользователя и т.д.), которая
также может утечь на сторону. Выглядит не очень кошерно. Необходимо как-то ограничить перечень разрешенных действий для
приложения 'Кинокасса', возможно вплоть до одного, а также ограничить доступ к информации хранимой в приложении
'Календарь'.

Решением может быть введение 'посредника' между приложениями 'Кинокасса' и 'Календарь', который раздает разрешения и
ограничения на доступ к данным и их модификации (конечно с разрешения пользователя обоих приложений) см.
DOC/OAuth_2_0/images/SimpleOAuthModel.jpg. Тут происходит следующее:
- 'Кинокасса' (Клиент) просит у владельца ресурсов (пользователя) разрешение на добавление события в календарь.
- 'Пользователь' (Владелец ресурсов) разрешение дает, при этом оговариваются параметры разрешения (чего зя чего не зя).
- 'Кинокасса' обращается к 'Сервису авторизации' и просит у него ключ доступа к 'Календарю' (естественно с разрешения
  владельца ресурсов).
- 'Сервис авторизации' отдает 'Кинокассе' ключ доступа к 'Календарю'.
- 'Кинокасса' передает ключ доступа 'Календарю' и вносит событие 'поход в кино' и не более того (т.к. ключ доступа
  имеет параметры доступа, срок жизни и т.д.).

!!! В этой схеме очень важно !!!
1. Наш пользователь или 'Владелец ресурсов', должен иметь учетную запись на 'Сервисе авторизации' именно как
   'Владелец ресурсов'.
2. Приложение 'Кинокасса' или 'Клиент' должно быть зарегистрированно на 'Сервисе авторизации' именно как 'Клиент'.
3. Приложение 'Календарь' должно доверять ключам доступа выданным 'Сервисом авторизации'.

Такой вариант взаимодействия приложений и есть работа по протоколу OAuth.

Актуальная версия OAuth описана в RFC 6749. Он описывает, как должно реализовываться взаимодействие между сервисами для
обеспечения безопасной авторизации. Многие нюансы описаны достаточно подробно, например, flow взаимодействия узлов между
собой, но некоторые отдаются на откуп конкретной реализации.

Особенности:
- Разделение сущности пользователя и приложения, запрашивающего доступ. Благодаря этому разделению мы можем управлять
  правами приложения отдельно от прав пользователя.
- Вместо привычных логина и пароля, которые имеют определенный набор прав и время жизни, мы получаем доступ к ресурсам
  с помощью случайно сгенерированных строк — токенов.
- Можно выдавать права максимально точечно, опираясь на собственные пожелания, а не на заранее определённый набор прав.

________________________________________________________________________________________________________________________
*** Основные понятия и особенности ***

*** Роли ***

В OAuth 2.0 определены четыре роли:
- Resource owner (Владелец ресурса) - сущность, которая имеет права доступа на защищённый ресурс. Сущность может быть
                                      конечным пользователем (конкретный человек) или какой-либо системой. Защищённый
                                      ресурс - HTTP endpoint, которым может быть что угодно: API endpoint, файл на CDN,
                                      web-сервис.
- Resource server (Сервер ресурсов) - сервер, на котором хранится защищённый ресурс, к которому имеет доступ владелец
                                      ресурса (resource owner). Он защищает ресурсы пользователя и получает запросы на
                                      доступ от клиента (приложения, сервиса). Он принимает и проверяет токен, после
                                      чего возвращает соответствующие ресурсы.
- Client (Клиент) - приложение, которое запрашивает доступ к защищённому ресурсу от имени собственника ресурса (resource
                    owner) и с его разрешения. Термин «клиент» не подразумевают каких-либо конкретных характеристик
                    реализации (например, выполняется ли приложение на сервере, настольном компьютере или другом
                    устройства).
- Authorization server (Сервер авторизации) - сервер, который выдаёт клиенту токен для доступа к защищённому ресурсу,
                                              после успешной авторизации владельца ресурса (resource owner).

Каждый участник взаимодействия может совмещать в себе несколько ролей. Например, клиент может быть одновременно resource
owner, и запрашивать доступ к своим же ресурсам. Схему взаимодействия рассмотрим дальше.

!!! Еще раз, очень важно: Клиент должен быть заранее зарегистрирован в Сервисе авторизации !!!

________________________________________________________________________________________________________________________
*** Регистрация клиента ***

Вне зависимости от того, с каким именно сервисом выполняется интеграция вашего приложения, его необходимо в первую
очередь зарегистрировать, как было сказано ранее. Делается это с помощью специального портала на сайте сервиса, с
которым выполняется интеграция, например, https://console.cloud.google.com для Google.
Заполняются все необходимые сведения о приложении:
- тип,
- используемые сервисы,
- название,
- информация о разработчике и т.д.

Способ регистрации клиента, например, ручной или service discovery, вы выбираете сами, в зависимости от конкретной
реализации. Но при любом способе при регистрации, кроме ID клиента, должны быть обязательно указаны 2 параметра:
redirection URI и client type:
- Redirection URI — адрес, на который отправится владелец ресурса после успешной авторизации. Кроме авторизации, адрес
                    используется для подтверждения, что сервис, который обратился за авторизацией, тот, за кого себя
                    выдаёт.
- Client type — тип клиента, от которого зависит способ взаимодействия с ним. Тип клиента определяется его возможностью
                безопасно хранить свои учётные данные для авторизации — токен. Существует всего 2 типа клиентов см.
                DOC/OAuth_2_0/images/OAuthTypesClients.jpg:
                    - Confidential — клиент, который может безопасно хранить свои учётные данные. Например, к такому
                                     типу клиентов относят web-приложения, имеющие backend.
                    - Public — не может безопасно хранить свои учётные данные. Этот клиент работает на устройстве
                               владельца ресурса, например, браузерные или мобильные приложения.

На финальном этапе вам будут предоставлены два строковых ключа: client_id (ID клиента) и client_secret (секрет клиента).
Первый служит для идентификации приложения, а также генерации авторизационных URL для пользователей - параметр является
публичным. Client_secret - предназначен для проверки подлинности приложения сервисом авторизации в тот момент, когда оно
запрашивает доступ к пользовательскому аккаунту. Client_secret должен быть известен только приложению и сервису
авторизации.
________________________________________________________________________________________________________________________
*** Токены ***

Токен в OAuth 2.0 - это строка, непрозрачная для клиента. Обычно строка выглядит как случайно сгенерированная, её формат
не имеет значения для клиента. Токен — это ключ доступа к чему-либо, например, к защищённому ресурсу (access token) или
к новому токену (refresh Token) см. DOC/OAuth_2_0/images/KeysTokens.jpg.

У каждого токена своё время жизни. Но у refresh token оно должно быть больше, т.к. он используется для получения access
token. Например, если срок жизни access token около часа, то refresh token можно оставить жить на целую неделю. Refresh
token опционален и доступен только для confedential клиентов. Пользуясь опциональностью токена, в некоторых реализациях
время жизни access token сделано очень большим, а refresh token вообще не используется, чтобы не заморачиваться с
обновлением. Но это не безопасно. Если access token был скомпрометирован, его можно обнулить, а сервис получит новый
Access token с помощью refresh token. В случае, если refresh token-а нет, то потребуется проходить процесс авторизации
заново.

За access token закреплён определённый набор прав доступа, который выдаётся клиенту (приложению) во время авторизации.
Давайте разберёмся, как выглядят права доступа в OAuth 2.0.

________________________________________________________________________________________________________________________
*** Права доступа ***

Права доступа выдаются клиенту в виде scope см. DOC/OAuth_2_0/images/TokenScope.jpg. Scope – это параметр, который
состоит из разделённых пробелами строк: scope-token. Каждый scope-token представляет определённые права, выдающиеся
клиенту. Например, scope-token doc_read может предоставлять доступ на чтение к какому-то документу на resource server-e,
а employee - доступ к функционалу приложения только для работников фирмы. Итоговый scope может выглядеть так:
email doc_read employee.

В OAuth 2.0 мы сами создаём scope-token, настраивая их под свои нужды. Имена scope-token ограничиваются только фантазией
и двумя символами таблицы ASCII — " и \.

На этапе регистрации клиента, в настройках сервиса авторизации клиенту выдаётся стандартный scope по умолчанию. Но
клиент может запросить у сервера авторизации scope, отличный от стандартного. В зависимости от политик на сервере
авторизации и выбора владельца ресурса, итоговый набор scope может выглядеть совсем иначе. В дальнейшем, после
авторизации клиента, владелец ресурсов может отобрать часть прав без повторной авторизации сервиса, но, чтобы выдать
дополнительные разрешения, потребуется повторная авторизация клиента см. DOC/OAuth_2_0/images/FinalScope.jpg.

________________________________________________________________________________________________________________________
*** Абстрактный OAuth 2.0. Flow c применением Access token ***

Мы рассмотрели роли, рассмотрели виды токенов, а также как выглядят scope. Посмотрим на flow предоставления доступа к
сервису. Ниже представлена абстрактная схема (или flow) взаимодействия между участниками
см. DOC/OAuth_2_0/images/AbstractDescriptionOAuth.jpg или более предметно DOC/OAuth_2_0/images/SimpleOAuthModel.jpg.
Все шаги на данной схеме выполняются строго сверху вниз.
Разберём по шагам (повторяет выше описанный процесс с 'Кинокассой' и 'Календарем', только еще более абстрактно):
- Шаг 1. - Приложение клиент (Client) отправляет запрос на доступ к нужному ресурсу владельцу ресурса (Resource owner)
           или запрос на авторизацию (Authorization request).
- Шаг 2. - Resource owner дает Client-у разрешение на доступ или разрешение на авторизацию (Authorization grant),
           который подтверждает личность Resource owner-a и его права на ресурс, доступ к которому запрашивает Сlient.
           В зависимости от flow это может быть токен или учётные данные.
- Щаг 3. - Client отправляет Authorization grant, полученный в предыдущем шаге на сервер авторизации (Authorization
           server), ожидая от него ключ или токет доступа (Access token) к защищённому ресурсу.
- Шаг 4. - Authorization server убеждается в валидности Authorization grant, после чего отсылает Access token клиенту
           в ответ.
- Шаг 5. - Получив Access token, клиент запрашивает защищённый ресурс у сервера ресурсов (Resource server).
- Шаг 6. - Resource server убеждается в корректности Access token, после чего предоставляет доступ к защищённому
           ресурсу.

________________________________________________________________________________________________________________________
*** Абстрактный OAuth 2.0. Flow c применением Refresh token ***

Первый и второй шаги опущены из данной схемы — они ничем не отличаются от схемы абстрактного flow. В общем случае схема
с применением Refresh token-а будет выглядеть так см. DOC/OAuth_2_0/images/AbstractOAuthWithRefreshToken.jpg. Схема по
шагам (еще раз 1-ый и 2-ой шаги опущены, но они есть):
- Шаг 3. - Client отправляет Authorization grant на Authorization server и просит предоставить ему ключ доступа Access
           token и токен на обновление ключа доступа (Refresh token).
- Шаг 4. - Authorization server убеждается, что с Authorization grant всё нормально и возвращает клиенту запрошенные
           Access token и Refresh token.
- Шаг 5. - Client с Access token-ом запрашивает защищённый ресурс, пока не получит первую ошибку доступа к ресурсу или
           invalid token error (Access token error), что говорит об окончании срока жизни ключа доступа.
- Шаг 6. - После получения ошибки доступа, клиент идет к Authorization server с Refresh token-ом и просит заменить
           просроченный Access token на новый.
- Шаг 7. - В ответ клиент получает новый Access token, а также новый Refresh token, либо продлевается время жизни
           старого Refresh token-a.

________________________________________________________________________________________________________________________
*** Что такое grant? ***

Grant (предоставить) - это данные, которые представляют из себя успешную авторизацию клиента владельцем ресурса,
используемые клиентом для получения access token-а. Или другими словами владелец ресурса предоставил приложению-клиенту
заранее определенные полномочия на дальнейшие действия со своей ресурсной базой.

Например, когда мы где-либо аутентифицируемся с помощью Google, перед глазами всплывает уведомление. В нём говорится,
что такой-то сервис хочет получить доступ к данным о вас или к вашим ресурсам (выводятся запрашиваемые scope-token).
Это уведомление называется «Consent Screen».

В момент, когда мы нажимаем «ОК», в базу данных попадает тот самый grant: записываются данные о том, что такой-то
пользователь дал такие-то доступы такому-то сервису. Клиент получает какой-то идентификатор успешной аутентификации,
например строку, которая ассоциируется с данными в базе данных.

Существует 4 + 1 способа получения grant — grant type:
- Authorization code — используется для confedencial клиентов — web-сервисов, см.
                       DOC/OAuth_2_0/images/AuthorizationCodeGrant.jpg
- Client credentials — используется для confedential клиентов, которые запрашивают доступ к своим ресурсам или ресурсам,
                       заранее согласованным с сервером авторизации, см. DOC/OAuth_2_0/images/ClientCredentials.jpg
- Implicit — использовался public-клиентами, которые умеют работать с redirection URI (например, для браузерных и
             мобильных приложений), но был вытеснен Authorization code grant с PKCE (Proof Key for Code Exchange —
             дополнительная проверка, позволяющая убедиться, что token получит тот же сервис, что его и запрашивал.
             Прочитать подробнее — RFC 7636), см. DOC/OAuth_2_0/images/ImplicitGrant.jpg
- Resource owner password credentials - в RFC 6819, посвящённому безопасности в OAuth 2.0, данный тип grant считается
                                        ненадёжным. Если раньше его разрешалось использовать только для миграции
                                        сервисов на OAuth 2.0, то в данный момент его не разрешено использовать совсем,
                                        см. DOC/OAuth_2_0/images/ResourceOwnerPasswordCredentials.jpg
- Device authorization (добавлен в RFC 8628) – используется для авторизации устройств, которые могут не иметь
                                               веб-браузеров, но могут работать через интернет. Например, это консольные
                                               приложения, умные устройства или Smart TV, см.
                                               DOC/OAuth_2_0/images/DeviceAuthorizationGrant.jpg

Актуальными можно считать только Authorization code (с PKCE), Client credentials и Device authorization grant, но мы
рассмотрим все. Рассматривать Grant будем в порядке возрастания сложности понимания.

________________________________________________________________________________________________________________________
*** Client credentials grant flow ***

Имеет самый простой flow, напоминающий обычную авторизацию на любом сервисе. Она выполняется с помощью учётных данных
клиента, которые представляют собой client id и client secret — аналог логина и пароля для пользователя. Так как для
аутентификации требуется client secret, который должен соответствующе храниться, данный flow могут использовать только
confedential клиенты см. DOC/OAuth_2_0/images/OAuthTypesClients.jpg.

Схема проста: клиент аутентифицируется на сервере авторизации передавая client id и client secret. В ответ получает
access token, с которым уже может получить доступ к нужному сервису см. DOC/OAuth_2_0/images/ClientCredentials.jpg или

Этот flow требуется, когда клиент пытается получить доступ к своим ресурсам или ресурсам, заранее согласованным с
сервером авторизации. Например, сервису А нужно время от времени ходить в сервис Б и актуализировать там данные о
количестве пиццерий в сети. Т.е. обычно это взаимодействие отдельных сервисов в некой мультисервисной структуре
корпоративной системы.

________________________________________________________________________________________________________________________
*** Resource owner password credentials flow ***

По текущим рекомендациям безопасности описанных в данном RFC, данный flow не рекомендуется использовать вовсе из-за
явных проблем с безопасностью см. DOC/OAuth_2_0/images/ResourceOwnerPasswordCredentials.jpg

Resource owner передаёт свой логин и пароль клиенту, например, через формы на клиенте. Клиент, в свою очередь, с помощью
него получает access token (и, опционально, refresh token). Здесь есть проблема. Resource owner просто берёт и отдаёт в
открытом виде свой логин и пароль клиенту, что не безопасно. Изначально он был сделан только для клиентов, которым вы
доверяете или тех, что являются частью операционной системы. Позже он был разрешён только для миграции с аутентификации
по логину и паролю на OAuth 2.0.

Текущие рекомендации по безопасности запрещают его использование.

________________________________________________________________________________________________________________________
*** Authorization code ***

Самый распространённый flow на данный момент см. DOC/OAuth_2_0/images/AuthorizationCodeGrant.jpg.

В основном используется для confidential клиентов, но с появлением дополнительной проверки с помощью PKCE, может
применяться и для public-клиентов.

В данном flow взаимодействие client с resource owner проходит через user-agent (браузер). К user-agent есть одно
требование: он должен уметь работать с HTTP-редиректами. Без этого resource owner не сможет попасть к серверу
авторизации и вернуться обратно с grant.

Данный flow сложнее, чем предыдущие, поэтому будем разбирать его по шагам. Для начала представим, что мы - resource
owner (владелец ресурсов) и перешли на страницу сервиса "Кинокасса" (или онлайн-обучения), который хочет сохранять
данные о купленном билете в кино в наш "Календарь" (или результаты обучения к нам в облако). Этому сервису требуется
получить доступ к нашему ресурсу "Календарь" (или определённой директории в облаке). Мы нажимаем на "Добавить событие"
или "Авторизоваться" и цепочка "Authorization code grant flow" разворачивается (выше мы проходили похожее, повторим):

- Шаг 1. - На первом шаге клиент (приложение, сервис) перенаправляет Resource owner (т.е. нас владельцев ресурса) с
           помощью User-agent (или страницы браузера) на страницу авторизации Authorization server. В URI он указывает
           client ID и redirection URI. Redirection URI используется для понимания, куда вернуть Resource owner после
           того, когда авторизация пройдёт успешно (Resource owner выдаст разрешение на scope, запрашиваемый клиентом).
- Шаг 2. - Взаимодействуя с сервером авторизации Resource owner проходит аутентификацию на сервере авторизации.
- Шаг 3. - Resource owner проверяет права, которые запрашивает клиент на consent screen и разрешает их выдачу (или
           ограничивает до приемлемых) см. DOC/OAuth_2_0/images/FinalScope.jpg
- Шаг 4. - Resource owner возвращается клиенту обратно на URI, который был указан как redirection URI. В качестве
           query-параметра будет добавлен Authorization code — строка, подтверждающая то, что Resource owner выдал
           необходимые права сервису.
- Шаг 5. - С этим Authorization code клиент отправляется на сервер авторизации, чтобы получить в ответ Access token
           (и Refresh token, если требуется).
- Шаг 6. - Сервер авторизации валидирует Authorization code, убеждаясь, что токен корректный и выдаёт клиенту Access
           token (и опционально Refresh token). С его помощью клиент сможет получить доступ к заветному ресурсу.

Если представить нас на месте Resource owner, то мы видим просто перенаправление на сервер авторизации,
аутентифицируемся, подтверждаем доступ на Consent screen и нас отправляет на уже работающий сервис. Например, мы
проходим это много раз, когда заходим на сервис под учётной записью Google, Facebook или Apple.

Следующий flow построен на основе данного.

________________________________________________________________________________________________________________________
*** Implicit grant ***

Это оптимизация Authorization code grant flow для public-клиентов см. DOC/OAuth_2_0/images/OAuthTypesClients.jpg,
которые умеют работать с redirection URI. Например, для браузерных приложений на JavaScript, или мобильных приложений.
Требование к User-agent, с помощью которого взаимодействуют клиент (приложение, сервис) и Resource owner, сохраняется:
он должен уметь работать с HTTP-редиректами.

Между Authorization code и Implicit есть основное отличие: вместо получения Authorization code и Access token в данном
случае, мы сразу получаем Access token после успешной авторизации Resource owner. Кроме того, здесь не используется
Client secret из соображений безопасности — приложение можно дизассемблировать и получить его. Подлинность проверяется
только по redirection URI.

Многие шаги из данной схемы похожи на шаги из Authorization code, но предлагаю их разобрать также подробно. Представим,
что некое браузерное приложение хочет сохранять свои настройки в нашем Git-репозитории (ну или снова сервис "Кинокасса",
или похожий, хочет сохранять события в нашем "Календаре"). Мы нажимаем «Войти в GitHub» (или "Войти в Google") и
на этом этапе начинается работа Implicit flow:

- Шаг 1. - Клиент с помощью User-agent и HTTP-редиректа перенаправляет Resource owner (т.е. нас) на сервер авторизации.
           В параметрах запроса передает client ID и redirection URI, которые нужны для аутентификации клиента и
           последующего возврата Resource owner обратно.
- Шаг 2. - Resource owner аутентифицируется, взаимодействуя через user-agent с сервером авторизации. Заодно подтверждает
           выдачу grant клиенту, с client ID которого он пришёл.
- Шаг 3. - После подтверждения выдачи grant (нажатия «allow» на consent screen), user-agent возвращает Resource owner-a
           на redirection URI. Кроме того, в URI fragment передаётся Access token (URI fragment — это то, что обычно
           идёт в URI после символа ‘#’).
- Шаг 4. - Сам фрагмент сохраняется локально в user-agent. User-agent двигается дальше по redirection URI за
           web-страницей, которая нужна для получения Access token и других необходимых данных из фрагмента. Она может
           находиться как на самом клиенте, так и на удалённом ресурсе (Например, на CDN - Сеть доставки контента – это
           сеть взаимосвязанных серверов, которая ускоряет процесс загрузки веб-страниц приложений с высокой нагрузкой)
- Шаг 5. - Web-ресурс возвращает web-страницу (может содержать в себе скрипт), которая может прочитать полностью
           redirection URI, в том числе и значение, указанное в фрагменте.
- Шаг 6. - User-agent отрисовывает локально полученную страницу, включая исполнение скриптов, которые он получил от
           web-hosted client resource, которые получают Access token.
- Шаг 7. - Полученный Access token user-agent просто передаёт клиенту.

Это сложный flow. Он мало используется в реальных сценариях. Но его всё ещё можно встретить в legacy-проектах.

________________________________________________________________________________________________________________________
*** Device authorization (RFC 8628) ***

Начиная с 2012 г. появилось много умных устройств, на которых неудобно авторизоваться. Например, неудобно вводить
сложный логин и пароль на телевизоре каждый раз при открытии ресурса. На некоторых устройствах это невозможно, например
на серверных ОС без графического интерфейса.

В августе 2019 этот flow появился как раз для таких сценариев.

Есть, как минимум, 3 требования к устройствам, чтобы работа с помощью Device authoraztion grant flow была возможна:
- Устройство должно иметь возможность совершать исходящие HTTPS-запросы.
- Устройство должно иметь возможность отображать URI и код пользователю.
- Каждое авторизуемое устройство принадлежит Resource owner-у, который для успешной авторизации должен иметь другое
  устройство с браузером, чтобы перейти по указанному URI и ввести указанный код.

Возможно, схема кажется сложной из-за обилия стрелок. Разберём её также пошагово, как и разбирали сложные flow до него
см. DOC/OAuth_2_0/images/DeviceAuthorizationGrant.jpg

Представим, что мы пытаемся авторизоваться на web-сервисе с помощью телевизора. Мы видим кнопку «Авторизоваться как
устройство» и нажимаем. В этот момент начинается наш Device flow:

- Шаг 1. - Наш телевизор делает запрос на сервер авторизации, передавая ему свой client ID.
- Шаг 2. - Сервер авторизации убеждается, что такой клиент зарегистрирован и имеет соответствующий тип grant.
- Шаг 3. - Если всё хорошо, то Authorization server возвращает device code, user code и verification URI.
           Device code — это уникальный идентификатор устройства, которое авторизуется в системе.
- Шаг 4. - Устройство отображает user code и verification URI владельцу этого устройства — Resource owner-у (т.е. нам).
           Redirection URI может быть передан как строкой, так и с помощью QR-кода — ограничений нет.
- Шаг 5. - После того, как устройство отобразило user code и verification URI, оно начинает с некоторой периодичностью
           опрашивать сервер авторизации о её успешности.
- Шаг 6. - Дальше Resource owner (т.е. мы) переходит по указанному verification URI, аутентифицируется и вводит
           user code, который он получил от устройства, подтверждая выдачу необходимых scope устройству. На этом
           действия от имени Resource owner закончены.
- Шаг 7. - Всё это время устройство (наш телевизор, пункт 5) опрашивало сервер авторизации о её успешности. Устройство
           в очередной раз идёт к серверу авторизации со своим device code и client ID в надежде, что авторизация на
           этот раз прошла.
- Шаг 8. - В этот раз, когда Resource owner подтвердил передачу необходимых прав устройству, сервер авторизации
           возвращает в ответе на запрос Access token (если предусмотрено настройками сервера и refresh token).
           И с помощью токена устройство уже может продолжать работу с ресурсом.

Несмотря на кажущуюся сложность со стрелочками, этот flow тоже достаточно прост. Если вам требуется взаимодействовать с
устройствами, то вам стоит использовать этот flow.

________________________________________________________________________________________________________________________
*** ИТОГ ***

Если хотите погрузиться в тематику детальнее, то рекомендую:
- RFC 6749 (для OAuth 2.0) - https://datatracker.ietf.org/doc/html/rfc6749;
- RFC 8628 (для Device Flow) - https://datatracker.ietf.org/doc/html/rfc8628;

Кроме того, следить за актуальными версиями RFC можно на ресурсе, посвящённому OAuth - https://oauth.net/2/

Еще Полезные ссылки:

- RFC OAuth 2.0 - https://datatracker.ietf.org/doc/html/rfc6749 ;
- RFC OAuth 2.0 Device Grant - https://datatracker.ietf.org/doc/html/rfc8628 ;
- RFC Proof Key for Code Exchange by OAuth Public Clients - https://datatracker.ietf.org/doc/html/rfc7636 ;
- Security best current practice - https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics-15 ;
- OAuth community site - https://oauth.net/ ;
- OAuth community site — list all documents about OAuth 2.0 - https://oauth.net/2/ ;