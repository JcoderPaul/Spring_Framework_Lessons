
Фреймворк Spring Boot предварительно настроен для использования с Logback в качестве реализации
концепции логирования (записи процессов) по-умолчанию в Spring Framework (Spring Boot в частности).

*** Важность логирования ***

Решения о том, что и где логировать (записывать в журнал событий), часто носят стратегический характер
и принимаются с учетом того, что приложение может работать неправильно в реальных средах. Журналы играют
ключевую роль, помогая приложению быстро восстанавливаться после любых таких сбоев и возобновлять
нормальную работу.

1. Делаем ошибки в точках интеграции видимыми: Распределенная природа сегодняшних приложений, построенных
   с использованием микросервисной архитектуры, вводит множество рабочих частей. Таким образом, естественно
   можно столкнуться с проблемами из-за временных сбоев в любой из инфраструктурных систем.

   Журналы исключений, регистрирующие проблемы в точках интеграции, позволяют нам обнаружить основную причину
   прерывания и позволяют нам предпринимать соответствующие действия для восстановления с минимальным влиянием
   на работу конечного пользователя.

2. Диагностика функциональных ошибок в производственной системе: Например, могут возникнуть жалобы клиентов
   на неправильную сумму транзакции. Чтобы диагностировать это, нам нужно детализировать наши журналы, чтобы
   найти последовательность операций, начиная с данных запроса при вызове API до данных ответа в конце работы
   API обработки.

3. Анализ истории событий: Записи журнала фиксируют последовательность выполнения приложения. Мы обращаемся к
   этим журналам постфактум, чтобы проанализировать любое нормальное или неожиданное поведение приложения для
   различных задач.

   Мы можем узнать количество пользователей, вошедших в систему в течение определенного временного окна, или
   сколько пользователей активно используют любую недавно выпущенную функцию, что является ценной информацией
   для планирования изменений для будущих выпусков.

4. Мониторинг: Инструменты мониторинга отслеживают журналы в режиме реального времени для сбора важных
   показателей, полезных как для бизнеса, так и для операций, а также могут быть настроены для подачи сигналов
   тревоги, когда эти показатели превышают определенные пороговые значения. Разработчики используют журналы
   для отладки и трассировки и даже для записи важных событий для сборки и тестирования в конвейерах CI / CD.

*** Конфигурация журнала Spring Boot по умолчанию ***

Конфигурация ведения журнала по умолчанию в Spring Boot - это реализация Logback на уровне информации для
записи вывода на консоль (см. DOC/Logging_System.jpg).

Давайте посмотрим на это поведение в действии, создав минимальное приложение Spring Boot. Далее мы добавляем
несколько операторов журнала в файл класса приложения:

****************************************************************************************************************
@SpringBootApplication
public class SpringLoggerApplication {
    static final Logger log =
        LoggerFactory.getLogger(SpringLoggerApplication.class);

    public static void main(String[] args) {
     /* Фиксируем просто информацию до старта приложения */
     log.info("Before Starting application");

     SpringApplication.run(SpringLoggerApplication.class, args);

     /* Префикс log. говорит о том, что идет взаимодействия с системой логирования */
     log.debug("Starting my application in debug with {} args", args.length);
     log.info("Starting my application with {} args.", args.length);
     }
  }
****************************************************************************************************************

*** Высокоуровневая конфигурация ведения журнала ***

Spring Boot предлагает значительную поддержку для настройки ведения журнала в соответствии с нашими требованиями
(пожеланиями) к ведению журнала.

****************************************************************************************************************
См. документацию: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging
****************************************************************************************************************

На высоком уровне мы можем изменить параметры командной строки или добавить свойства application.properties
(или application.yml), чтобы настроить некоторые функции ведения журнала.