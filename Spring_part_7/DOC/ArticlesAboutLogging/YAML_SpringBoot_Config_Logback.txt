* - переводная статья

****** Использование YAML в Spring Boot для настройки журнала ******

Когда дело доходит до входа в корпоративные приложения, функция logback становится отличным выбором: она проста
и быстра, имеет мощные возможности настройки и требует небольшого объема памяти. Я представил журналирование
во вступительной статье см. DOC/ArticlesAboutLogging/LoggingBegin.txt. YAML — это лишь один из вариантов, который
вы можете использовать для настройки Spring Boot.

Logback можно настроить с использованием XML, YAML и Groovy и использовать Logback в приложениях Spring Boot.

Рассмотрим, как настроить Logback с помощью файла конфигурации YAML Spring Boot. Если вы опытный пользователь
Spring Framework, вы обнаружите YAML — относительно новый вариант конфигурации, доступный вам при использовании
Spring Boot.

*** Создание регистратора ***

Мы будем использовать 'простое веб-приложение' Spring Boot и настроим в этом приложении вход в систему с помощью
YAML. Приложение будет содержать контроллер - IndexController, к которому мы добавим код ведения журнала, например:

IndexController.java
*******************************************************************************************************************
    package spring.oldboy.springframework.controllers;

    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.RequestMapping;

    @Controller
    public class IndexController {
        private final Logger logger = LoggerFactory.getLogger(this.getClass());
        @RequestMapping("/")
        String index(){
            logger.debug("This is a debug message");
            logger.info("This is an info message");
            logger.warn("This is a warn message");
            logger.error("This is an error message");
            return "index";
        }
    }
*******************************************************************************************************************

Поскольку Logback является средством ведения журнала по умолчанию в Spring Boot, вам не нужно включать какие-либо
дополнительные зависимости для Logback или SLF4J.

В консоли мы скорее всего увидим сообщения логера, от IndexController, которые отправляются на консоль root-овым
логером. Однако, отладочные (debug) сообщение IndexController не будут логироваться. Хотя по-умолчанию, при
входе в лог должны записываться сообщения уровня отладки (debug). Дело в том, что команда Spring Boot
предоставляет нам конфигурацию по умолчанию для логирования в файле конфигурации Spring Boot: base.xml.
Кроме того, Spring Boot предоставляет два предварительно настроенных appender-a: console-appender.xml и
file-appender.xml и base.xml файл ссылается на них обоих.

Пример кода base.xml из репозитория github Spring-Boot:

***********************************************************************************************************
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
    Base logback configuration provided for compatibility with Spring Boot 1.1
    -->
    <included>
      <include resource="org/springframework/boot/logging/logback/defaults.xml" />
      <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
      <include resource="org/springframework/boot/logging/logback/console-appender.xml" />
      <include resource="org/springframework/boot/logging/logback/file-appender.xml" />
      <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="FILE" />
      </root>
    </included>
***********************************************************************************************************

Тут видно, что Spring Boot переопределил уровень ведения журнала по умолчанию, установив для корневого
регистратора значение ИНФОРМАЦИЯ (INFO), поэтому мы не увидели отладочные (debug) сообщения в приведенном выше
примере. Изменить уровни журнала в Spring Boot очень просто.

*** Конфигурация Spring Boot через файл application.yml ***

В приложении Spring Boot вы можете экспортировать конфигурацию для работы с одним и тем же кодом приложения в
разных средах. Файл application.yml - это один из многих способов экстернализации конфигурации. Давайте
используем его для экстернализации (внешнего) конфигурирования процесса логирования.

Если вы хотите использовать YAML для конфигурации Spring, вам просто нужно создать файл *.YAML. Spring Boot будет
искать файл application.yml в настройках пути к классам (classpath). В структуре веб-приложения Spring Boot по
умолчанию вы можете поместить файл в папку Resources. Для анализа файлов YAML вам понадобится парсер YAML. Но,
вам не нужно ничего делать, чтобы включить поддержку YAML в Spring Boot - Spring Boot YAML уже готов к работе.

Простой пример application.yml файла с базовой настройкой:

***********************************************************************************************************
    spring:
    logging:
      level:
        org.springframework.web: DEBUG
        spring.oldboy.springframework.controllers: DEBUG
        org.hibernate: DEBUG
***********************************************************************************************************

В приведенном выше YAML коде конфигурации мы устанавливаем уровни журналирования среды Spring, для любого
средства логирования в пакете spring.oldboy.springframework.controllers и его под-пакетах, а так же и в
Hibernate в режим - ОТЛАЖИВАТЬ (DEBUG). Хотя мы можем и не использовать Hibernate, я добавил конфигурацию
ведения журнала Hibernate в демонстрационных целях, чтобы вы могли увидеть, как настроить ведение журнала
для различных пакетов Java через YAML файл.

Если сейчас запустить приложение, то вы увидите сообщения ОТЛАЖИВАТЬ (DEBUG) о запуске Spring Frameworks
на консоли, так же при обращении к приложению из браузера в логере появится сообщения от IndexController
фиксирующие DEBUG события.

На этом этапе сообщения журнала отправляются только на консоль. Вы можете настроить Spring Boot для
дополнительной регистрации сообщений в файлах для логирования. Вы также можете установить шаблоны сообщений
журнала-логера, как для консоли, так и для файла отдельно, вот так:

***********************************************************************************************************
spring:
logging:
  file: logs/dev_app.log
  pattern:
    console: "%d %-5level %logger : %msg%n"
    file: "%d %-5level [%thread] %logger : %msg%n"
  level:
    org.springframework.web: DEBUG
    spring.oldboy.springframework.controllers: DEBUG
    org.hibernate: DEBUG
***********************************************************************************************************

*** Spring Active Profile Properties in YAML ***

Профили Spring обычно используются для настройки Spring для различных сред развертывания. Например, при
разработке на локальном компьютере обычно устанавливается уровень журнала ОТЛАЖИВАТЬ (DEBUG). Это даст вам
подробные сообщения журнала для использования в разработке. Во время работы обычно уровень журнала
устанавливается на - ПРЕДУПРЕЖДАТЬ (WARN) или выше. Это делается для того, чтобы избежать заполнения журналов
излишней отладочной информацией и возникновения накладных расходов, связанных с чрезмерным ведением журналов.

Вы можете разделить конфигурацию YAML на отдельные профили (profile) с помощью spring.profiles, задав ключ для
каждого профиля. Затем добавить необходимый код конфигурации ведения журнала в каждый профиль и убедиться, что
списки профилей разделены: --- . В том же файле вы можете использовать spring.profiles.active для установки
активного профиля. Однако это не является обязательным. Вы также можете настроить активный профиль для
использования программно или передать его в качестве системного свойства или аргумента JVM при запуске
приложения.

Пример файла application.yml с базовой конфигурацией логирования для Spring profiles:

**********************************************************************************************************
    spring:
      profiles.active: dev
    ---
    spring:
      profiles: dev
    logging:
      file: logs/dev_app.log
      pattern:
        console: "%d %-5level %logger : %msg%n"
        file: "%d %-5level [%thread] %logger : %msg%n"
      level:
        org.springframework.web: DEBUG
        spring.oldboy.springframework.controllers: DEBUG
        org.hibernate: DEBUG
    ---
    spring:
      profiles: production
    logging:
      file: logs/production_app.log
      pattern:
        file: "%d %-5level [%thread] %logger{0} : %msg%n"
      level:
        org.springframework.web: WARN
        spring.oldboy.springframework.controllers: WARN
        org.hibernate: WARN
**********************************************************************************************************

В приведенном выше коде конфигурации мы определили два профиля: dev и production с различными конфигурациями
журналирования (логирования). Мы также установили активный профиль на dev.

Когда вы запускаете приложение и получаете к нему доступ, конфигурация журнала dev будет использоваться профиль.

*** Разделение профилей в файлах конфигурации YAML ***

Файл конфигурации Spring Boot не ограничивается только записью конфигураций. Обычно в разные профили
корпоративного приложения входят несколько различных типов конфигураций. Конфигурации могут включать
регистрацию компонентов, настройки подключения к базе данных, настройки SMTP и т. д., распределенные
по профилям разработки, тестирования, подготовки, производства и другим профилям.

Поддерживать один файл с несколькими профилями, каждый из которых содержит разные типы параметров конфигурации,
утомительно и подвержено ошибкам. Помните, что на чтение кода и файлов конфигурации тратится гораздо больше
времени, чем на его написание. В какой-то момент в будущем вы или кто-то другой будете читать или обновлять
файлы конфигурации. А для монолитных конфигурационных файлов с плохой читабельностью высока вероятность
проникновения ошибок. Spring решает такие проблемы, позволяя использовать отдельные файлы конфигурации -
по-одному для каждого профиля. Благодаря отдельным файлам конфигурации вы повышаете удобство обслуживания вашего
приложения в долгосрочной перспективе.

Каждый такой файл конфигурации должен соответствовать application-... .yml соглашение об именовании. Например,
для профилей: dev и production, нам нужны файлы с именами: application-dev.yml и application-production.yml в
соответствующих папках, с указанием пути к классам (classpath). Вам также следует добавить файл
application-default.yml, содержащий конфигурации по умолчанию. Если активный профиль не установлен, Spring Boot
обратится к конфигурациям по умолчанию в application-default.yml.

Важно отметить, что если на вашем пути есть файл application.yml (без суффикса), он всегда будет включен Spring,
независимо от того, какие профили активны или нет.

Структура проекта веб-приложения Spring Boot с различными файлами конфигурации для конкретного профиля может
выглядеть как на рис. см. DOC/ArticlesAboutLogging/ArticlesPictures/ProjectStructureSpringBootWebApp.jpg

Ниже приведен код для каждого из файлов конфигурации:

application-default.yml
**********************************************************************************************************
    logging:
      pattern:
        console: "%msg%n"
      level:
        org.springframework.web: INFO
        spring.oldboy.springframework.controllers: INFO
        org.hibernate: INFO
**********************************************************************************************************

application-dev.yml
**********************************************************************************************************
    logging:
      file: logs/dev_profile_app.log
      pattern:
        console: "%d %-5level %logger : %msg%n"
        file: "%d %-5level [%thread] %logger : %msg%n"
      level:
        org.springframework.web: DEBUG
        spring.oldboy.springframework.controllers: DEBUG
        org.hibernate: DEBUG
**********************************************************************************************************

application-production.yml
**********************************************************************************************************
    logging:
      file: logs/production_profile_app.log
      pattern:
        file: "%d %-5level [%thread] %logger{0} : %msg%n"
      level:
        org.springframework.web: WARN
        spring.oldboy.springframework.controllers: WARN
        org.hibernate: WARN
**********************************************************************************************************

*** Заключение ***

Файл конфигурации YAML в Spring Boot предоставляет очень удобный синтаксис для хранения конфигураций
журналирования (логирования) в иерархическом формате. Конфигурация YAML, аналогичная конфигурации свойств,
не может поддерживать некоторые расширенные функции, такие как различные типы конфигураций appender-ов, а
также кодировщики и конфигурации макета.

Функционально YAML практически аналогичен использованию традиционного файла свойств. Формат YAML кажется
интересным для написания свойств. Он кажется более выразительным, чем файлы свойств старой школы, и у него
приятный чистый синтаксис. Часто вам не будут нужны многие из более продвинутых функций ведения журнала
логирования в Logback.

Итак, вы можете использовать простоту конфигурации файла YAML.

Я столкнулся с одной проблемой при использовании файлов YAML для конфигурации Spring Boot. При настройке
теста JUnit вне Spring Boot было проблематично прочитать файл свойств YAML только с помощью Spring.
Помните, что поддержка YAML специфична для Spring Boot.