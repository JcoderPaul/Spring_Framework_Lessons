Исходная статья: https://www.cloudbees.com/blog/ultimate-feature-flag-guide
________________________________________________________________________________________________________________________
****** Руководство по началу работы с флагом Ultimate Feature ******

В этом кратком руководстве, как следует из названия, мы поговорим все о флаге функции.

        Флаг — это один или несколько битов данных, используемых для хранения двоичных значений
        в качестве определенных индикаторов структуры программы. Флаг — это компонент структуры
        данных языка программирования.

        Компьютер интерпретирует значение флага в относительном выражении или на основе структуры
        данных, представленной во время обработки, и использует флаг для обозначения конкретной
        структуры данных. Таким образом, значение флага напрямую влияет на результат обработки.

Что такое флаги функций?
Как вы их используете?
Как начать?

Обо всем этом и многом другом я расскажу. Флаги функций интересны тем, что это обманчиво простая тема. Вы можете
ответить на вопрос «что такое флаг функции», написав несколько предложений или написав книгу. В зависимости от контекста
подойдет любой из них.

Итак, чтобы охватить все эти основы, давайте начнем с максимально простого и постепенно углубимся в детали.

________________________________________________________________________________________________________________________
*** Что такое флаги функций? ***

В программном обеспечении флаг — это «один или несколько битов, используемых для хранения двоичных значений». Итак, это
логическое значение, которое может быть либо истинным, либо ложным. И вы бы проверили это с помощью оператора if. В том
же контексте, что и программное обеспечение, функция — это часть функциональности, которая представляет определенную
ценность.

Таким образом, флаг функции, проще говоря, представляет собой оператор if, окружающий некоторую часть функциональности
вашего программного обеспечения. Конечно, здесь есть гораздо больше нюансов. В противном случае я бы не писал руководство
по этому вопросу. Но если вы пришли сюда в поисках быстрого определения, то это оно.

Флаги функций, простейший пример, который может работать:

************************************************************************************************************************
if(configFile["IsHoliday"] == true) {
  writeGreetingMessage("Happy holidays!");
}
************************************************************************************************************************

Здесь происходят три довольно простых вещи, но все они важны:
1. Мы обращаемся к файлу за пределами работающего программного обеспечения, чтобы получить некоторую информацию о
   конфигурации.
2. Если в информации о конфигурации указано, что сегодня праздник, то мы переходим к рассматриваемой функции.
3. Речь идет о показе праздничного поздравления.

Это очень простой флаг функции. Если это какой-то праздник, покажите пользователю приветственное сообщение с пожеланиями
счастливых праздников. В противном случае не делайте этого.

Флаг функции - это способ изменить функциональность вашего программного обеспечения без изменения и повторного
развертывания оного.

________________________________________________________________________________________________________________________
*** Флаги функций: немного более формальное определение ***

Вы заметите, что в пример вкралось что-то, чего я не упомянул в первоначальном, предельно простом определении. Я говорил
о чтении чего-либо из файла. Чтобы понять почему, давайте немного расширим определение.

        Флаг функции — это способ изменить функциональность вашего программного обеспечения без изменения
        и повторного развертывания кода.

Оба определения верны, но это еще немного обобщает ситуацию. По своей сути флаг функции означает размещение операторов
if вокруг участков исходного кода. Но причина этого лежит немного глубже. Причина в том, что вам нужна гибкость,
позволяющая изменять поведение вашего программного обеспечения во время выполнения.

Возвращаясь к нашему примеру, именно поэтому был важен момент чтения из файла. Если бы мы просто определили и прочитали
локальную переменную, у нас был бы оператор if и закрытая функциональность, но у нас не было бы возможности менять
что-то на лету.

Эта возможность имеет решающее значение.

Если вы думаете о том, что мы делаем в примере, это имеет смысл. Идея здесь в том, что у нас где-то работает часть
программного обеспечения. Мы хотим иметь возможность на лету определять, что сегодня праздник, и соответственно
приветствовать пользователей. Но вы не хотите развертывать свой код каждый раз, когда наступают праздники, а затем
повторно развертывать его, когда праздник закончится. Это какое-то безумие.

Итак, вы придумываете способ включать и выключать эту функциональность без повторного развертывания.

________________________________________________________________________________________________________________________
*** Флаг функции под любым другим именем: Flippers, Toggles, Controls, Oh My ***

Я собираюсь углубиться в флаги функций, но прежде чем я это сделаю, важно кое-что прояснить. Вы, наверное, видели другие
названия флагов функций. Я знаю, что в своих путешествиях я встречал некоторые из них, например следующие:

- Feature toggles;
- Feature flippers;
- Feature controls;
- CloudBees Feature Management flags;

Вероятно, есть еще и другие. Хотя вы можете увидеть некоторые тонкие семантические аргументы в пользу того, что это
несколько разные концепции, для наших целей я бы использовал все это как взаимозаменяемые.

Итак, если вы пришли сюда в поисках информации о переключателях или флипперах, вы попали по адресу, хотя на протяжении
всего поста я буду называть их флажками функций.

________________________________________________________________________________________________________________________
*** Facebook и пионеры гибкости производства ***

Хотя в последнее время об этом упоминалось в новостях по менее благоприятным причинам, Facebook, пожалуй, наиболее
известен в мире программного обеспечения своими новаторскими методами развертывания. Компания создала огромную
социальную сеть более десяти лет назад, а ее требования к бесперебойной работе и масштабы были таковы, что традиционные
подходы к обслуживанию сайтов были недостаточно хороши.

Другими словами, даже 10 лет назад вы никогда не видели этого сообщения:
- Facebook будет отключен на ночь в следующий четверг, чтобы мы могли развернуть нашу замечательную версию Facebook V3.0!

Вместо этого Facebook просто тихо и без помпы выпустил нескончаемый поток обновлений. День за днём сайт менялся,
добавляя и совершенствуя функциональность. Но это никогда не было событием. За кулисами это был позорный инженерный
подвиг. Facebook усовершенствовал и внедрил развертывание почти до совершенства.

Другие технологические гиганты также разработали аналогичные возможности развертывания, установив стандарт современной
зрелости развертывания.

Почему я упоминаю об этом в руководстве по флагам функций? Я упоминаю об этом, потому что флаг функции имел философскую
основу для этого развития. Флаги функций предназначены не только для переключения случайных приветственных сообщений.
Они являются частью гораздо более масштабного и важного движения в разработке программного обеспечения.

И именно поэтому определение может быть простым... или очень, очень сложным.

________________________________________________________________________________________________________________________
*** Варианты использования, ориентированные на продукт ***

Давайте теперь поговорим о вариантах использования флага функции. Хотя, если быть точным, на самом деле это варианты
использования более широкой концепции систем управления флагами функций, которые представляют собой совокупность всех
флагов функций, которые вы используете в своем приложении.

Подробнее об управлении флагами функций чуть позже.

Facebook и подобные компании не осознали огромную ценность случайной смеси производственных флагов. Они осознали
огромную ценность использования флагов функций для решения этих случаев использования.

________________________________________________________________________________________________________________________
*** Отделение развертывания от развертывания функций ***

Возможно, это не пришло вам в голову сразу, но существуют несколько разные риски при развертывании кода и развертывании
функций. Большинству из нас — особенно разработчикам, которые давно работают в отрасли — это кажется странным заявлением.

Как вы можете разделить эти два понятия? Ваши функции - это ваш код, так что это все та же куча риска. Ну не совсем,
если вдуматься:
- Развертывание кода несет в себе то, что я называю техническим риском. Программное обеспечение может выйти из строя
  или могут возникнуть ошибки.
- Развертывание функций несет в себе риск, связанный с пользователем. Например, пользователи могут ненавидеть новые
  функции или у вас могут возникнуть проблемы с управлением учетными записями.

При традиционном развертывании вы сразу берете на себя весь этот риск. Но системы управления флагами функций дают вам
возможность разделить эти риски, рассматривая их по одному. Вы запускаете новый код в производство, смотрите, как все
пойдет, а затем включаете функции позже, когда они будут решены с технической точки зрения.

________________________________________________________________________________________________________________________
*** Канареечные запуски ***

Говоря о снижении рисков, отметим, что флаги функций позволяют улучшить даже ту схему, которую я только что упомянул.
Я говорил о развертывании кода, а затем о переключении новых функций одним махом. Это нормально, но вы можете еще больше
снизить риск с помощью канареечной версии. В канареечной версии вы постепенно вводите новый код в свою базу
пользователей.

Первыми это видят пресловутые канарейки в угольной шахте. Если есть проблема, вы можете узнать ее, увидев ее только
часть пользовательской базы, а не все сразу заваливают вас запросами на поддержку. Конечно, если все пойдет хорошо, вы
знакомите с новым функционалом все больше и больше пользователей, пока он не станет доступен всем.

________________________________________________________________________________________________________________________
*** Производственные испытания ***

Традиционная мудрость всегда считала, что вы не тестируете в производстве. Вот для чего нужны группы контроля качества,
изолированные среды и все остальное внутреннее. Это ваши генеральные репетиции, а постановка — настоящее шоу.

Но Facebook, Netflix и другие перевернули это с ног на голову, как я упоминал ранее. Эти компании не могут воссоздать
свою производственную среду для тестирования, поэтому им приходится проводить контроль качества на производстве. И тем
самым они доказали, что эта деятельность имеет огромную ценность.

Таким образом, используя флаги функций, вы можете снизить риск развертывания функций, производственное поведение которых
вам неизвестно. Конечно, всегда хочется протестировать все, что можно, как можно раньше. Но приятно, когда есть варианты.

________________________________________________________________________________________________________________________
*** Выключение с помощью аварийного выключателя ***

Точно так же, как вы можете использовать флаги функций, чтобы увеличить количество пользователей, которые видят функцию,
вы также можете пойти в противоположном направлении. Вы можете уменьшить количество просмотров, в том числе немедленно
уменьшить его до нуля с помощью концептуального переключателя уничтожения.

Конечно, это может пригодиться, если вы внедрили некорректную функцию. Вы можете отключить его, позволить жизни ваших
пользователей вернуться в нормальное русло, а затем дожить до следующего дня. Но он также может пригодиться для
завершения работы и последующего вывода из эксплуатации функций.

________________________________________________________________________________________________________________________
*** Проведение экспериментов ***

Последний вариант использования, ориентированный на продукт, который я упомяну — это использование флагов функций для
запуска производственных экспериментов. Самый простой из них для объяснения — это A/B-тест. Идея A/B-тестирования
состоит в том, что вы запускаете в производство две разные версии чего-то, чтобы увидеть, какая из них работает лучше
всего.

Например, возможно, вы управляете сайтом электронной коммерции и хотите посмотреть, приведет ли зеленая или красная
кнопка «Купить» к большему количеству лайков. Вы можете развернуть обе кнопки и использовать функциональный флаг, чтобы
разделить базу пользователей пополам и посмотреть, какая кнопка работает лучше всего. Вы могли бы придумать всевозможные
эксперименты, которые можно было бы проводить подобным образом, по самым разным причинам. На самом деле нет предела
тому, как вы можете использовать флаги функций и данные, которые вы собираете в ходе экспериментов, для улучшения вашего
приложения.

________________________________________________________________________________________________________________________
*** Варианты использования, связанные с инфраструктурой и процессами ***

Разумеется, системы управления флагами функций имеют большое значение для программных продуктов. Но у них также есть
применение, которое больше связано с инфраструктурой и внутренними процессами. Давайте посмотрим на пару из них.

* Миграции *

Вы переходите на использование новой версии какого-либо веб-сервиса? Или, возможно, вы выполняете знаменитую миграцию
базы данных? Традиционно ИТ-организации в этих сценариях склонны прибегать к ужасной модернизации 'вилочного погрузчика'.
Они переписывают большие фрагменты кода, чтобы использовать новую внешнюю зависимость, затем выполняют однократную
миграцию, которая наверняка не потерпит неудачу, потому что откат будет в лучшем случае болезненным, а в худшем -
невозможным.

* Флаги функций *

Флаги функций могут избавить вас от этого нервного подхода. Вы можете просто начать встраивать вызовы к новой службе
или базе данных прямо в существующее приложение и без лишнего шума развернуть их. Затем вы можете дискретно
протестировать новое соединение в какое-то время с минимальным риском, чтобы убедиться, что оно работает.

К тому времени, когда вы будете готовы к полной миграции, код уже будет находиться в рабочей среде в течение длительного
времени, и вы уже протестируете его. Щелчок выключателя не будет событием.

* Сотрудничество разработчиков: ветки функций или флаги функций *

Cуществует проблема процесса разработки программного обеспечения: ветки функций и флаги функций. Вкратце они
представляют собой два разных подхода команды разработчиков программного обеспечения к сотрудничеству. Используя
ветвление функций, команды работают со своими собственными копиями кода и, как правило, реже объединяют все изменения
вместе, эффективно откладывая сложность.

Используя флаги функций (см. https://www.cloudbees.com/blog/using-feature-flags-across-cicd), легче отключить функции,
над которыми работают другие, что позволяет всем разработчикам более непрерывно интегрировать свой код с веткой
контроллера. Ветвление функций имеет свои недостатки и риски (см. https://www.cloudbees.com/blog/pitfalls-feature-branching),
поэтому многие команды рассматривают использование флагов функций как предпочтительную альтернативу.

________________________________________________________________________________________________________________________
*** Более реальный пример ***

Понимая варианты использования флагов функций, давайте теперь расширим наш игрушечный пример, чтобы он был немного более
репрезентативным для реального мира. Представьте себе приложение электронной коммерции. У него не будет просто одного
места для приветствия пользователей, и он не будет принимать решение об этом на основе содержимого какого-то одноразового
файла. Вместо этого у вас, вероятно, будет такая конструкция для верхней части страницы (top of a page):

************************************************************************************************************************
if(feature.isActive("holiday-greeting")) {
  print("Happy holidays," + user.name + "!");
}
************************************************************************************************************************

И потом, возможно, что-то вроде этого внизу (at the bottom):

************************************************************************************************************************
if(feature.isActive("holiday-greeting")) {
  printLink("Click to see more holiday daeals", "~/holidayDeals");
}
************************************************************************************************************************

Другими словами, когда вы решите, что пришло время отпуска, вполне вероятно, что у вас будет несколько мест, которые
будут вести себя по-разному в режиме отпуска. Возможно, у вас будут десятки. Вам не захочется определять разные флаги
функций для каждого из них или даже повторно хэшировать одну и ту же реализацию в каждом месте.

И еще есть определяющий фактор для включения флага функции. Хотите, чтобы функция «поздравление с праздником»
активировалась вручную с помощью настройки, которой кто-то управляет? Или вы хотите, чтобы он автоматически
активировался в определенные даты и в определенное время? Или какая-то комбинация того и другого?

В реальном мире «как» управлять флагами функций требует некоторого планирования и проектирования. Это нетривиальные
решения, и они суммируются по мере того, как ваше приложение становится более сложным.

________________________________________________________________________________________________________________________
*** Анатомия флага функции ***

Чтобы понять, что здесь происходит, давайте более подробно рассмотрим анатомию схемы управления флагами функций. Как я
сказал вначале, вы можете определить это очень просто, а можете и очень сложно. Эти термины помогут вам понять, что
происходит на более сложном уровне.

- Точка переключения (Toggle point) - в нашем примере каждое появление проверки Feature.isActive("Holiday-Greeting")
                                      представляет одну точку переключения. Поскольку функция редко представляет собой
                                      всего лишь несколько линейных строк кода, для включения и выключения функции может
                                      потребоваться множество точек переключения.
- Переключить маршрутизатор (Toggle router) - метод Feature.isActive(string) представляет переключаемый маршрутизатор.
                                              Переключатель-маршрутизатор сопоставляет точки переключения состоянию
                                              флага функции. Таким образом вы поддерживаете согласованную единую точку
                                              знаний о состоянии функции во многих точках переключения.
- Контекст переключения (Toggle context) - контекст переключения представляет контекстную информацию, которую
                                           маршрутизатор учитывает при вычислении состояния функции. Например, я
                                           упомянул, что функция «поздравление с праздником» может зависеть от даты.
                                           Текущая дата является примером контекста. Другие примеры могут включать
                                           вошедшего в систему пользователя, информацию о геолокации пользователя,
                                           ссылающийся URL-адрес и т. д.
- Конфигурация переключения (Toggle configuration) - помимо окружающего контекста вы также можете контролировать
                                                     результаты переключения маршрутизатора для функции на основе
                                                     простой конфигурации. В нашем примере у вас может быть окружающий
                                                     контекст, который включает праздничное поздравление, но у вас
                                                     также есть возможность отключить его вручную.

________________________________________________________________________________________________________________________
*** С чего начать: реализация ***

На этом этапе вы можете подумать, что включение или выключение одной маленькой вещи в вашем приложении кажется чрезмерным.
В конце концов, возможно, вы просто пришли сюда в поисках самого простого учебника и читаете его просто ради дополнительной
информации и потому, что нашли меня остроумным.

Вам действительно нужно все это понимать? Ответ: не сначала. Но вы это сделаете прежде, чем узнаете об этом.

Подумайте об идее ведения журнала приложений. Если вы новичок в программировании или написании какой-то игрушечной
реализации, на самом деле, возможно, было бы проще просто использовать файловый API вашего языка для вывода некоторого
случайного текста в файл, чем установить и настроить полноценную структуру журналирования.

Но как долго это будет продолжаться? Сможете ли вы продержаться, пока вам не придется думать об уровнях журналов?
Различные стили приложения? Многопоточность? Рано или поздно продолжать использовать это самостоятельно станет более
болезненно, чем возвращаться и использовать устоявшееся решение. То же самое касается и управления флагами функций.
Если вы новичок в этом и увлекаетесь этим, я бы рекомендовал реализовать его вручную. Вы поймете, как это работает,
и позже сможете принимать более правильные решения. Но если вы снова окажетесь здесь, просматривая эти определения
с целью реализовать собственную обширную реализацию, не делайте этого. Развитые сторонние системы управления флагами
функций существуют, и вы должны их использовать.

________________________________________________________________________________________________________________________
*** Флаги функций и технический долг ***

Одним из исторических недостатков использования флагов функций является то, что они создают технический долг. Это вполне
понятное мнение, поскольку, реализованные вручную, они могут привести к огромным, случайным путаницам условной логики в
вашей кодовой базе. И это может быть совершенно неприятно.

Это одна из причин, по которой я выступаю за выбор сторонней системы управления. Эти системы действительно могут избавить
вас от технического долга, даже если его может вызвать ваше собственное, домашнее решение. Но даже с такой системой нужно
быть осторожным.

В общем, кодовые базы имеют тенденцию к энтропии - они имеют тенденцию гнить, если вы не будете активно их курировать.
То же самое можно сказать и о вашей реализации управления флагами функций. Постарайтесь сгруппировать точки переключения
как можно ближе друг к другу, а не размазывать функции по всему приложению.

В этом поможет соблюдение принципов SOLID, а также сохранение вашего кода (и логики флагов функций) DRY. И обязательно
безжалостно отбраковывайте устаревшие точки переключения и маршрутизаторы, а также планируйте удаление своих флагов
функций.

Это должно дать вам немного информации для начала — что, почему и как использовать флаги функций, от простого к сложному.
В заключение я предложу некоторые подробные ресурсы помимо тех, на которые мы ссылались в этом посте. Это подробные
руководства для конкретного технического стека по началу работы с флагами функций:

Руководство по флагам функций Android - https://www.cloudbees.com/blog/guide-getting-started-quickly-android-feature-flags
Руководство по флагам функций JavaScript - https://www.cloudbees.com/blog/started-quickly-javascript-feature-flags
Руководство по флагам функций NodeJS - https://www.cloudbees.com/blog/getting-started-nodejs-feature-flags
Руководство по флагам функций Angular - https://www.cloudbees.com/blog/guide-feature-toggle-angular
Руководство по флагам функций .NET - https://www.cloudbees.com/blog/guide-getting-started-net-feature-flags
Руководство по флагам функций iOS - https://www.cloudbees.com/blog/feature-toggle-objective-c
Руководство по флагам функций Swift - https://www.cloudbees.com/blog/feature-toggle-swift