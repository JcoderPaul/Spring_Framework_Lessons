Исходная статья: https://www.cloudbees.com/blog/reducing-database-migration-risk-feature-flags
________________________________________________________________________________________________________________________
****** Снижение риска миграции базы данных с помощью флагов функций ******

Почти каждый разработчик программного обеспечения любит проекты с нуля. Вот тогда жизнь приносит удовольствие, потому
что ты просто создаешь что-то, не особо беспокоясь. Вы делаете вещь. И только позже, когда вы развернетесь и деньги
начнут поступать, они начнут, медленно, но верно, переходить к чему-то другому.

И я говорю не просто о том, что проект меняет цвет с зеленого на коричневый. Я говорю о корпоративной заботе о снижении
рисков. Я имею в виду, вау. Это даже звучит скучно. В какой-то момент ваш проект превращается из одного из безграничных
возможностей в погоне за творчеством в один из попыток защитить свою территорию от срыва сроков, срыва бюджета и
разгневанных пользователей.

       Гринфилд - Greenfield
       В других дисциплинах, таких как разработка программного обеспечения, «с нуля» также является проектом,
       в котором отсутствуют какие-либо ограничения, налагаемые предыдущей работой. Аналогия аналогична
       строительству на новых землях, когда нет необходимости реконструировать или сносить существующую
       постройку.

       (из http://en.wikipedia.org/wiki/Greenfield_project)

       Браунфилд - Brownfield
       «Разработка уже существующих» — это термин, обычно используемый в ИТ-индустрии для описания проблемных
       областей, требующих разработки и развертывания новых программных систем при непосредственном присутствии
       существующих (устаревших) программных приложений/систем. Это означает, что любая новая архитектура
       программного обеспечения должна учитывать и сосуществовать с уже существующим программным обеспечением.

       (из http://en.wikipedia.org/wiki/Brownfield_(software_development))

И дело не только в том, что здесь происходит тяжелая работа. То же самое происходит со стрессом и экзистенциальным
беспокойством о работе. Снижение рисков является задачей руководства. А проблемы управления могут внезапно стать
глубокими и унизительными проблемами разработчиков.

________________________________________________________________________________________________________________________
*** Рассказ о незначительной миграции базы данных ***

Давайте посмотрим на проблему, которая не возникает на первых порах реализации нового проекта. Но это случается, когда
вы выпускаете свое программное обеспечение в открытый доступ и начинаете защищать свою территорию. Предположим, вы
добавили новые поля в зеркало заднего вида и несете ответственность за производство веб-приложения для электронной
коммерции.

Неудивительно, что в этом приложении у вас есть клиенты, и у них есть данные о клиентах. Еще в бурные дни «зеленых
полей» вы приняли прискорбное решение хранить в своей базе данных перечисление под названием «CustomerType», и в
результате это привело к вводу ключей в некоторые другие вспомогательные таблицы, которые составляют так много хлама
в вашей схеме.

Прожив какое-то время с растущим техническим долгом в этом направлении, вы сказали «хватит!» пришло время стиснуть зубы
и удалить эту конструкцию во время довольно крупного релиза. Вам больше не понадобится этот столбец перечисления или
любая из связанных с ним неуклюжих таблиц. Вместо этого вы пересмотрели свой граф объектов, осознав, что вы можете
определить тип клиента в коде вашего приложения, используя другие сохраненные данные.

Итак, вы ставите в очередь основной выпуск с сопровождающим его сценарием миграции базы данных. Вы сообщаете своим
пользователям о сбое и готовите сценарии миграции SQL одновременно с развертыванием кода приложения. Но...

________________________________________________________________________________________________________________________
*** Миграция пошла не так ***

Наступает время выпуска, и вы отправляете код на сервер. Затем вы направляете сценарии миграции схемы на базу данных и
позволяете ей копировать. Вы, конечно, сделали резервные копии. Когда свет снова включается, и вы проводите быструю
внутреннюю проверку работоспособности, все кажется хорошо. Итак, вы снова делаете сервер общедоступным, чувствуя себя
достаточно уверенно. Пользователи начинают поступать, а затем возвращаются в систему, и данные начинают поступать.

Люди покупают вещи, обновляют свои записи, и все идет по плану. Э, ну, в основном по плану. Праздничное пиво в руке, вы
делаете паузу, прежде чем открыть его, потому что замечаете что-то... странное. Квитанции еще не обрабатываются. Вы
запускаете браузер запросов и заглядываете в базу данных с нарастающим чувством холодного страха.

Квитанции не просто задерживаются в обработке — их не существует. Безумные запросы, шифрование и двойная проверка
исходного кода подтверждают ваши худшие опасения. Модуль генерации квитанций сохраняет рудиментарную зависимость от
несуществующего теперь поля типа клиента.

Вы продаете вещи людям. Вы отправляете им товары. Но вы не генерируете и не храните информацию о квитанциях. У вас нет
записей о совершенных покупках. Вот срач...

Чем вы сейчас занимаетесь?

________________________________________________________________________________________________________________________
*** Флаги функций как средство снижения риска ***

На этом этапе вашего развертывания вы сталкиваетесь, по сути, с двумя ужасными вариантами. Вы можете продолжить работу,
пытаясь исправить программное обеспечение, протестировать его (вы шутите) и развернуть, устранив проблему. Или можно
откатиться назад.

Но, откат предполагает восстановление старой версии базы данных и приложения, что фактически уничтожает все транзакции
с момента запуска. Вам придется выследить всех этих новых клиентов и транзакции, вручную возвращая им деньги и
воссоздавая их данные в вашей старой схеме.

Это своего рода (интенсивная) болезнь роста, которая неизменно подвергает разработчиков и организации испытаниям в
какой-то момент их жизни. И существуют всевозможные стратегии для смягчения этого типа риска. Но я хотел бы предложить
одну вещь, которая может показаться неочевидной: ФЛАГ ФУНКЦИИ.

Вы, вероятно, думаете о флагах функций в контексте простых визуальных элементов (и поддерживающего их кода). Разверните
новый внешний вид экрана администратора клиента, но с переключателем, позволяющим вернуться к старому. Но флаги функций
могут существовать на всех уровнях вашего приложения, со всеми формами концептуальных функций.

Представьте себе мир, в котором вы подошли к проблеме «типа клиента» немного по-другому. Вместо того, чтобы одним махом
исключить ее из кода и схемы, вы добавили новую логику обработки, защищенную специальным флагом. Затем вы могли бы
выполнить незначительное развертывание приложения без каких-либо изменений схемы.

Тогда вы могли бы включить новую обработку для одного клиента и проверить результаты с крайне небольшим риском. После
этого включаем на 10, а потом на 100 и далее все, если все прошло хорошо. И только после этого вы перенесете схему базы
данных, отбросив хлам, который все равно больше никто не использует.

________________________________________________________________________________________________________________________
*** Мыслить масштабно: модернизация 'вилочного погрузчика' ***

       Что означает модернизация вилочного погрузчика?
       Модернизация 'погрузчика' относится к любому внедрению технологии, которое требует серьезных изменений
       в существующей ИТ-инфраструктуре. Модернизация 'вилочных погрузчиков' может быть результатом относительно
       незначительных усовершенствований, которые невозможно реализовать поэтапно из-за возраста существующей
       системы.

       В этом случае большую часть аппаратного и программного обеспечения, возможно, придется обновлять
       одновременно, создавая настолько большую работу, что для ее выполнения потребуется метафорический
       'вилочный погрузчик'.

Поскольку теперь вы думаете о флагах функций как о чем-то большем, чем просто косметическом и визуально ориентированном,
давайте подумаем еще шире. Как консультант, который часто помогает корпоративным программам работать более гладко, я
вижу невероятно распространенную разновидность ошибок.

Я говорю об обновлении погрузчика. Аргументация понятна. У вас есть приложение, основанное на какой-то устаревшей и
загадочной технологии баз данных, и вы решаете перейти на что-то современное, чтобы действительно иметь возможность
нанимать людей с соответствующим набором навыков.

Что вы делаете?

Итак, вы предпринимаете масштабный проект по обновлению всего в вашей кодовой базе, которая ссылается на старую базу
данных, и ссылается на новую. На это уходят годы, гигантские планы миграции, доски, полные стратегии ETL, кровь, пот и
слезы. Когда этот день наконец наступает, вы глубоко вздыхаете, развертываете программное обеспечение, щелкаете
гигантским переключателем и молитесь.

Я понимаю. Но, пожалуйста, пожалуйста, не делай этого таким образом. Это огромный риск. И если вы считаете, что откат от
прошлой истории был плохим, то эта будет где-то между катастрофической и невозможной.
________________________________________________________________________________________________________________________
*** Флаги функций в коде доступа к данным ***

При миграции я рекомендую вам принять гибкую концепцию (см. https://dzone.com/articles/how-thin-thin-example) маленьких
и тонких срезов. Например, разверните небольшую версию новой базы данных, содержащую только таблицу клиентов. А затем
разверните следующую версию вашего приложения с флажками функций для записи в таблицу клиентов. У вас будет флаг для
нового и флаг для старого, чтобы вы могли писать в любой из них или в оба.

Теперь вы можете запустить схему параллельной записи, постепенно параллельно заполняя новую базу данных данными. Это
позволяет вам без риска проверять целостность новой базы данных по ходу работы. Если что-то пойдет не так, вы можете
просто отключить этот флаг и вернуть свою старую систему. И это позволяет вам постепенно создавать новую схему, таблица
за таблицей, запись за записью, пока у вас не будет полностью параллельная база данных. Как только вы это получите, вы
также можете начать отмечать чтения.

Постепенно, в течение месяцев или лет, вы можете поэтапно внедрять новую базу данных, одновременно выводя из
эксплуатации старую. Метод модернизации 'вилочного погрузчика' переносит буквально все риски на тот момент, когда вы
нажмете этот ужасающий переключатель.

Метод маркировки распределяет риск крошечным, тонким слоем на все, что вы делаете, что делает его довольно несущественным.

________________________________________________________________________________________________________________________
*** Флаги функций как архитектурная стратегия ***

Главный и более широкий вывод здесь связан с тем, как вы понимаете флаги функций. Как я упоминал ранее, многие люди
думают о них просто как о включении и выключении некоторых функций, ориентированных на пользователя. И действительно,
это отличный вариант использования. Но вам также следует рассмотреть возможность их использования как часть вашей
архитектурной стратегии, в том числе с различными вариантами миграции баз данных.

Вам нужно позаботиться о том, чтобы избежать сложности и технического долга с помощью этой стратегии, но, если все
сделано правильно, она даст вам гораздо более мощный и гибкий сценарий. Они помогут вам снизить риск, чтобы все были
довольны, а также помогут разработчикам снова получить удовольствие от создания продукта и не беспокоиться об ужасных
историях развертывания.