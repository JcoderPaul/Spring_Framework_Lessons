Исходный текст: https://www.cloudbees.com/blog/database-migration
________________________________________________________________________________________________________________________
****** Миграция базы данных: что это такое и как это сделать ******

Примерно в то же время, когда Git стал популярным, стала широко известна тенденция написания веб-приложений с
использованием библиотек объектно-реляционного отображения (ORM). Ключевая идея заключалась в следующем: поскольку
разработчики могут вносить в код изменения, которые легко откатить с помощью Git, почему разработчики не могут делать
то же самое, когда дело касается изменений схемы (schema)?

В конце концов, любая разумная новая функция предполагает изменения кода и схемы. Такие популярные фреймворки, как Rails
и Django, добавили в свои предложения ORM и миграцию баз данных (также известную как schema migration). Но миграция баз
данных как концепция не ограничивается популярными веб-фреймворками. Существуют автономные библиотеки программного
обеспечения для миграции БД - это Flyway и Liquibase.

Можете ли вы представить себе возможность откатывать детальные изменения в схеме во время написания кода? Слишком часто
я обнаруживаю, что в статьях о миграции баз данных не обсуждается, что значит активно выполнять ее в качестве
разработчика. Имея это в виду, сегодня я дам общее представление о том, что включает в себя миграция базы данных и как
это сделать в активной среде разработки. Я разобью это на три раздела, в которых опишу, что происходит в процессе
миграции, общие используемые инструменты, подводные камни, которые могут возникнуть во время миграции базы данных.
Это должно дать начинающему разработчику инструменты для быстрого изучения ключевых идей, лежащих в основе миграции
данных, а также узнать о потенциальных ловушках, которых следует избегать при использовании миграции базы данных как
части своего набора инструментов разработки.
________________________________________________________________________________________________________________________
*** Что происходит во время миграции базы данных? ***

Теперь, когда вы знаете, как возникла миграция баз данных, позвольте мне рассказать вам, что она на самом деле влечет за
собой.

*** Детальные изменения генерируются как отдельные файлы сценариев ***

Я упомянул, что миграция базы данных в основном отслеживает детальные изменения в схеме вашей базы данных (а иногда и в
ваших данных). Эти детальные изменения обычно отражаются в виде отдельных файлов сценариев. Таким образом, ваши детальные
изменения схемы отражаются в виде кода, который можно записать с помощью любого программного обеспечения для контроля
версий.

Это пример файла миграции в Rails:

************************************************************************************************************************
class CreateProducts < ActiveRecord::Migration[5.0]
  def change
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end
end
************************************************************************************************************************

Вы можете не только создавать миграции в виде отдельных файлов, но и использовать текущую схему базы данных в виде
отдельного файла (см. https://edgeguides.rubyonrails.org/active_record_migrations.html#schema-dumping-and-you). Обычно
это называется файлом схемы (schema file).

*** Скрипты миграции базы данных зависят от инструмента ***

Вернитесь к сценарию миграции базы данных на Ruby из нашего предыдущего примера. Вот еще один файл миграции базы данных
из независимого источника управления для программного обеспечения баз данных Liquibase.

************************************************************************************************************************
<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="1" author="bob">
        <createTable tableName="department">
            <column name="id" type="int">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar(50)">
                <constraints nullable="false"/>
            </column>
            <column name="active" type="boolean" defaultValueBoolean="true"/>
        </createTable>
    </changeSet>

</databaseChangeLog>
************************************************************************************************************************

На этот раз файл имеет формат XML. На самом деле, Liquibase может производить изменения миграции (или наборы изменений,
как их любят называть) в нескольких форматах, таких как XML и JSON (см. https://docs.liquibase.com/concepts/changelogs/home.html).
Поэтому, если вы не хотите вручную записать миграцию базы данных в формате SQL, не существует реальных стандартов
создания файлов миграции. Конечно, вы можете написать свои собственные сценарии миграции базы данных в файлах SQL. Но
зачем писать вручную и случайно вносить ошибки, если можно использовать инструменты для автоматической генерации
миграции базы данных?
________________________________________________________________________________________________________________________
*** Как выполнить миграцию базы данных? ***

Теперь вы знаете, что такое миграция базы данных. Вам также необходимо знать (хотя бы концептуально), как выполнить
миграцию базы данных. К сожалению, для файлов миграции баз данных вообще не существует стандартов, а это значит, что мы
не можем вдаваться в подробности того, как их создавать. Другими словами, способ выполнения миграции базы данных во
многом зависит от конкретного инструмента, который вы используете для этой задачи.

В этом разделе я расскажу о двух наиболее распространенных способах миграции базы данных.

- Вариант 1. Используйте библиотеку, зависящую от платформы/языка:

             Если вы используете популярный язык (Ruby, PHP, Python и т. д.) или фреймворк (Rails, Django и т. д.), то
             существуют хорошо документированные библиотеки для миграции данных внутри выбранной среды/языка. Популярные
             веб-фреймворки, естественно, будут поставляться в комплекте с функциями миграции баз данных. В зависимости
             от настройки вы даже можете заменить собственную миграцию базы данных на другие библиотеки на выбранном
             языке. Обычно в этом сценарии файлы миграции создаются с помощью командной строки. Иногда вам может
             потребоваться написать собственный код для некоторых изменений, например для переноса данных или даже для
             отмены самого изменения. Помимо этого, библиотека, выбранная в рамках/языке, в значительной степени
             позаботится об этом за вас.

- Вариант 2. Используйте независимое программное обеспечение, ориентированное на миграцию баз данных:

             В некоторых случаях вам захочется использовать такое программное обеспечение, как Flyway или Liquibase,
             которое действует просто как система контроля версий для вашей базы данных. Поступая так, вы избегаете
             привязки к определенной структуре или языку. Это не означает, что у вас нулевая привязка. Возьмем, к
             примеру, Flyway (см. https://documentation.red-gate.com/fd/#java-based-migrations), который хорошо работает
             с различными базами данных, такими как Oracle, MySQL и MariaDB.

             Если вы не используете миграцию на основе Java Flyway (которая привязывает вас к Java и Flyway), вы можете
             в конечном итоге использовать миграцию на основе SQL (которая привязывает вас к выбору базы данных и
             Flyway). Хорошей новостью является то, что Flyway и Liquibase относительно просты в использовании. Они
             также предоставляют способ создания миграций с помощью командной строки и позволяют настраивать код для
             регистрации миграций схемы базы данных (database schema migrations).

- Выбор лучшего варианта для вас:

             Вот мое мнение о выборе между любым вариантом. Я склонен видеть, что большинство разработчиков выбирают
             вариант 1. Обычно это происходит потому, что у разработчиков уже есть предпочтительный язык/фреймворк,
             поэтому с когнитивной точки зрения не возникает ощущения, что они изучают (пока) другую часть программного
             обеспечения. И привязка (в случае варианта 1 это будет к фреймворку и языку) полностью добровольна и
             желательна.

             Вы можете обосновать вариант 2, если ваша команда не полностью привержена определенному языку или
             платформе. Что бы вы ни выбрали, избегайте без необходимости менять свой выбор на полпути разработки.
             Миграция базы данных — это не та область, где изменение инструментов дает огромные преимущества.
             Большинство преимуществ достигается за счет простой настройки миграции базы данных.
________________________________________________________________________________________________________________________
*** Опасности миграции баз данных и как их избежать ***

В предыдущем разделе я рассмотрел два основных типа инструментов для миграции баз данных: зависящее от платформы/языка и
автономное программное обеспечение. Оба типа просты в использовании. Теперь я порекомендую три передовых метода, когда
дело доходит до фактического выполнения миграции базы данных.

Эти советы касаются основной опасности миграции базы данных - как избежать внесения необратимых изменений!

*** Выберите один инструмент миграции базы данных и придерживайтесь его ***

Я кратко упомянул об этом ранее, но стоит подчеркнуть: я хочу предостеречь от внесения ненужных изменений в набор
инструментов просто потому, что 'это круто'. Напомним, что сценарии миграции базы данных зависят от инструмента,
который вы используете для их создания. Для этих сценариев не существует надлежащих стандартов. Если вы действительно
этого хотите, вы можете даже написать свои собственные операторы SQL. Это порождает собственный набор проблем; например,
ваши сценарии SQL, вероятно, могут зависеть от базы данных. Запросы MySQL могут не работать в PostgreSQL, и наоборот.

Таким образом, либо вы привязаны к своему инструменту миграции базы данных, либо вы привязаны к выбору базы данных, а в
некоторых случаях даже к тому и другому сразу. Частое переключение набора инструментов не дает очевидных преимуществ,
поэтому я предлагаю выбрать один инструмент миграции базы данных и придерживаться его. Есть вещи поважнее, чем можно
занять свое временя, нет необходимости гнать порожняк.

*** Удаляйте строки или столбцы только тогда, когда вы абсолютно уверены, что вам это нужно ***

Когда дело доходит до миграции, по большей части вы можете отменить ее, когда вам нужно. Типичные инструменты миграции
базы данных могут обрабатывать простые обратимые изменения. И даже если они не могут этого сделать, вы можете легко
добавить свой собственный код, который поможет выполнить реверс.

Например, в Rails вы просто добавляете код в раздел reversible:

************************************************************************************************************************
class ChangeProductsPrice < ActiveRecord::Migration[5.0]
  def change
    reversible do |dir|
      change_table :products do |t|
        dir.up   { t.change :price, :string }
        dir.down { t.change :price, :integer }
      end
    end
  end
end
************************************************************************************************************************

Самые сложные изменения, которые можно отменить, обычно связаны с удалением данных: в частности, удалением столбцов или
строк данных. Если ваша база данных содержит много данных, вам может потребоваться написать значительный объем
специального кода, чтобы попытаться отменить изменения.

Поэтому, если вы планируете удалить данные из своей базы данных, будьте особенно осторожны. Такие изменения трудно
отменить. Другие изменения, которые трудно отменить, включают переименование столбцов и изменение типа данных столбцов,
которые уже содержат данные.

!!! Одно практическое правило, которого я люблю придерживаться, заключается в следующем:

    Почти никогда не следует удалять столбцы до следующего основного (вы ведь знаете semver - см. https://semver.org/,
    верно?) выпуска.

    Это правило применяется, даже если у меня есть столбцы, которые я хочу прекратить использовать. Вместо
    удаления столбцов я объявлю во второстепенных версиях, какие столбцы в будущем станут устаревшими. Когда
    придет время выпуска основного релиза, я полностью оставлю эти колонки. Таким образом, я уменьшаю вероятность
    выполнения случайного, нежелательного изменения, отменить которое вручную будет очень сложно !!!

*** Реализация флагов функций ***

Еще одна отличная стратегия миграции базы данных — внедрение флагов функций, особенно если у вас большая команда и
несколько человек пытаются реализовать разные функции для одной и той же базы кода. По словам Мартина Фаулера, флаги
функций — это «мощный метод, позволяющий командам изменять поведение системы без изменения кода». Фактически, чем больше
ваша команда и чем сложнее ваша кодовая база, тем больше флагов функций.

Флаги функций помогают снизить риски, связанные с миграцией баз данных. Попытка распутать изменения, когда вам нужно
откатить определенные функции, может стать настоящим кошмаром. Флаги функций работают одинаково хорошо независимо от
того, хотите ли вы внести небольшие или большие изменения в схему базы данных.

При использовании флагов функций я рекомендую стремиться к более частым и детальным изменениям в целом. И вы
действительно можете увидеть, как флаги функций помогают вашему процессу разработки, когда вы выполняете масштабное
изменение схемы.

Пожалуйста, по-прежнему стремитесь разбить это масштабное изменение схемы на более мелкие и тонкие кусочки. Вам не нужно
никого впечатлять тем, как много вы можете втиснуть в одно изменение. Лучше добавить меры безопасности в свою практику
разработки, выполнив все три рекомендации, о которых я говорил в этом разделе.
________________________________________________________________________________________________________________________
*** Заключение ***

Разработчикам нужны все доступные инструменты, чтобы облегчить себе жизнь. Миграция базы данных — один из тех
обязательных инструментов в наборе инструментов разработчика. В будущем я предвижу, что миграция баз данных
превратится из передовой практики разработки в стандартную практику разработки. Люди будут смешно смотреть на
вас из-за того, что вы вообще не используете миграцию базы данных.

Тем не менее, важно помнить, что миграция базы данных может иметь неприятные последствия, особенно в случае
труднообратимых изменений схемы. Будьте абсолютно уверены в этих изменениях, прежде чем вводить их в действие.

Если вы еще не используете миграцию базы данных в своем процессе, чего вы ждете? Его легко начать, и вы даже можете
добавить его в середине цикла разработки. Вы будете благодарны, что сделали это. Потому что, когда наступит день, когда
вам нужно будет откатить изменения, а изменения коснутся базы данных, вам захочется, чтобы у вас было что-то, что могло
бы помочь вам сделать это за считанные секунды. Миграция базы данных — это то, что вам хотелось бы иметь.