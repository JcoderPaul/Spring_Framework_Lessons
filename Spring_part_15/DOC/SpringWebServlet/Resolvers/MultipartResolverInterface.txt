****** Interface MultipartResolver ******
________________________________________________________________________________________________________________________
Пакет: org.springframework.web.multipart

Реализующие классы: StandardServletMultipartResolver

См. также: MultipartHttpServletRequest,
           MultipartFile,
           ByteArrayMultipartFileEditor,
           StringMultipartFileEditor,
           DispatcherServlet
________________________________________________________________________________________________________________________
public interface MultipartResolver
________________________________________________________________________________________________________________________
Стратегический интерфейс для разрешения загрузки составных файлов в соответствии с RFC 1867. Реализации обычно можно
использовать как в контексте приложения, так и автономно.

Spring предоставляет следующую конкретную реализацию:

- StandardServletMultipartResolver для Servlet Part API

Для Spring DispatcherServlets не используется реализация преобразователя по умолчанию, поскольку приложение может
самостоятельно анализировать свои составные запросы. Чтобы определить реализацию, создайте bean-компонент с
идентификатором «multipartResolver» в контексте приложения DispatcherServlet. Такой преобразователь применяется ко всем
запросам, обрабатываемым этим DispatcherServlet.

Если DispatcherServlet обнаружит составной запрос, он разрешит его через настроенный MultipartResolver и передаст
завернутый HttpServletRequest. Затем контроллеры могут передать данный запрос интерфейсу MultipartHttpServletRequest,
который обеспечивает доступ к любому MultipartFiles.

Обратите внимание, что это приведение поддерживается только в случае фактического составного запроса.

************************************************************************************************************************
 public ModelAndView handleRequest(HttpServletRequest request,
                                   HttpServletResponse response) {

   MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
   MultipartFile multipartFile = multipartRequest.getFile("image");
   ...
 }
************************************************************************************************************************

Вместо прямого доступа контроллеры команд или форм могут зарегистрировать ByteArrayMultipartFileEditor или
StringMultipartFileEditor со своим связывателем данных, чтобы автоматически применять составное содержимое для
формирования свойств bean-компонента.

В качестве альтернативы использованию MultipartResolver с DispatcherServlet, MultipartFilter можно зарегистрировать
в web.xml. Он будет делегировать соответствующие функции MultipartResolver в контексте корневого приложения. В основном
это предназначено для приложений, которые не используют собственную веб-инфраструктуру MVC Spring.

ПРИМЕЧАНИЕ. Вряд ли когда-либо возникнет необходимость доступа к самому MultipartResolver из кода приложения. Он просто
            будет выполнять свою работу «за кулисами», делая MultipartHttpServletRequests доступными для контроллеров.
________________________________________________________________________________________________________________________
*** Методы ***

- void cleanupMultipart(MultipartHttpServletRequest request) - Очистите все ресурсы, используемые для обработки составных
                                                               частей, например хранилище для загруженных файлов.

- boolean isMultipart(HttpServletRequest request) - Определите, содержит ли данный запрос многочастный контент.

- MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) - Разберите данный HTTP-запрос на составные
                                                                             файлы и параметры и оберните запрос внутри
                                                                             объекта, MultipartHttpServletRequest который
                                                                             обеспечивает доступ к файловым дескрипторам
                                                                             и делает содержащиеся параметры доступными
                                                                             через стандартные методы ServletRequest.
________________________________________________________________________________________________________________________
См. оригинал (ENG):
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/multipart/MultipartResolver.html
________________________________________________________________________________________________________________________