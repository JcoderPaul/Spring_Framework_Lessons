****** Spring Boot ******

Настройка Spring для корпоративных приложений могут быть весьма утомительной и кропотливое с точки зрения
отлова ошибок. Особенно это относится к приложениям, которые используют несколько сторонних библиотек.
Каждый раз, создавая очередное корпоративное Java-приложение на основе Spring, нам необходимо повторять
одни и те же рутинные шаги по его настройке (в зависимости от типа создаваемого приложения):
- импортировать необходимые Spring-модули(Spring MVC, Spring JDBC, Spring ORM и т. д.);
- импортировать библиотеку web-контейнеров (в случае web-приложений);
- импортировать необходимые сторонние библиотеки (например, Hibernate, Jackson), при этом мы должны искать
версии, совместимые с применяемой версией Spring-а;
- конфигурировать компоненты DAO, такие, как: источники данных, управление транзакциями и т. д.
- конфигурировать компоненты web-слоя, такие, как: диспетчер ресурсов, view resolver;
- определить класс, который загрузит все необходимые конфигурации;

*** Особенности Spring Boot ***

Авторы Spring решили предоставить разработчикам некоторые утилиты, которые автоматизируют процедуру настройки
и ускоряют процесс создания и развертывания Spring-приложений, под общим названием Spring Boot.

Spring Boot - проект, целью которого является упрощение создания приложений на основе Spring. Он позволяет
наиболее простым способом создать, например, web-приложение, требуя от разработчиков минимум усилий по его
настройке и написанию кода.

Spring Boot обладает большим функционалом, но его наиболее значимыми особенностями являются:
- управление зависимостями;
- автоматическая конфигурация;
- встроенные контейнеры сервлетов;

*** Простота управления зависимостями - SpringBoot Starters ***

Чтобы ускорить процесс управления зависимостями, Spring Boot неявно упаковывает необходимые сторонние
зависимости для каждого типа приложения на основе Spring и предоставляет их разработчику посредством
так называемых starter-пакетов (spring-boot-starter-web, spring-boot-starter-data-jpa и т. д.).

Starter-пакеты представляют собой набор удобных дескрипторов зависимостей, которые можно включить в свое
приложение. Это позволит получить универсальное решение для всех, связанных со Spring технологий, избавляя
программиста от лишнего поиска примеров кода и загрузки из них требуемых дескрипторов зависимостей.

Например, если мы хотим начать использовать Spring Data JPA для доступа к базе данных, просто включаем в
свой проект зависимость - spring-boot-starter-data-jpa, и все. Нам не придется искать совместимые драйверы
баз данных и библиотеки Hibernate.

Если мы хотим создать Spring web-приложение, просто добавляем зависимость - spring-boot-starter-web, которая
подтянет в проект все библиотеки, необходимые для разработки Spring MVC-приложений, таких как: spring-webmvc,
jackson-json, validation-api и Tomcat.

И так, Spring Boot собирает все необходимые зависимости и определяет их в одном месте. Это позволяет нам как
разработчикам, просто использовать их, вместо того, чтобы изобретать колесо каждый раз, когда мы создаем новое
приложение.

****************************************************************************************************************
Чтобы ознакомиться со всеми Spring Boot starter-пакетами см.
https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using.build-systems.starters
****************************************************************************************************************

*** Автоматическая конфигурация Spring Boot приложения ***

Второй превосходной возможностью Spring Boot является автоматическая конфигурация приложения.

После выбора подходящего starter-пакета, Spring Boot попытается автоматически настроить Spring-приложение на
основе добавленных нами jar-зависимостей. Например, если мы добавим 'spring-boot-starter-web', то Spring Boot
автоматически сконфигурирует зарегистрированные bean-ы: DispatcherServlet, ResourceHandlers, MessageSource.
Если мы используем 'spring-boot-starter-jdbc', то Spring Boot автоматически зарегистрирует bean-ы: DataSource,
EntityManagerFactory, TransactionManager и считывает информацию для подключения к БД из файла, например,
application.properties.

Если мы не собираемся использовать БД, и не предоставляем никаких подробных сведений о подключении в ручном
режиме, Spring Boot автоматически настроит базу в памяти, без какой-либо дополнительной конфигурации с нашей
стороны, естественно при наличии H2 или HSQL библиотек.

Автоматическая конфигурация может быть полностью переопределена в любой момент с помощью пользовательских
настроек.

*** Встроенная поддержка сервера приложений — контейнера сервлетов ***

Каждое Spring Boot web-приложение включает встроенный web-сервер.

****************************************************************************************************************
См. список контейнеров сервлетов, «из коробки»:
https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#getting-started.system-requirements.servlet-containers
****************************************************************************************************************

Нам не надо беспокоиться о настройке контейнера сервлетов и развертывании приложения на нем. Теперь приложение
может запускаться само, как исполняемый jar-файл с использованием встроенного сервера. Если нам нужно использовать
отдельный HTTP-сервер, для этого достаточно исключить зависимости по умолчанию. Spring Boot предоставляет
отдельные starter-пакеты для разных HTTP-серверов.

Создание автономных web-приложений со встроенными серверами не только удобно для разработки, но и является
допустимым решением для приложений корпоративного уровня и становится все более полезно в мире микросервисов.
Возможность быстро упаковать весь сервис (например, аутентификацию пользователя) в автономном и полностью
развертываемом артефакте, который также предоставляет API — делает установку и развертывание приложения
значительно проще.

*** Самописные Starter-ы ***

Уже понятно, что удобство Spring Boot основано на использовании Starter-ов, которые позволяют получить набор
сконфигурированных bean-ов, готовых к использованию и доступных для конфигурации через properties-файлы. Но,
что делать, если для нужной технологии еще не написано стартера? Например, если нам нужен стартер для приложения,
которое взаимодействует с соц.сетью VK, назовем его Spring-social-vkontakte.

Spring Social - это один из модулей Spring Framework, используемый для интеграции с социальными сетями. В проект
Spring Boot включены стартеры для социальных сетей:
- Facebook (spring-boot-starter-social-facebook);
- Twitter (spring-boot-starter-social-twitter);
- LinkedIn (spring-boot-starter-social-twitter);

Нам интересна социальная сеть Вконтакте (VK.COM), для которой существует сторонний модуль spring-social-vkontakte.
Допустим, стартера для этого модуля нет. Значит нам придется писать такой стартер самим и Spring Boot открыт для
подобных экспериментов.