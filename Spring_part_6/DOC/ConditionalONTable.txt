Со Spring-ом идет уже множество готовых решений на расширение @Condition,
которые представлены ниже.

- @ConditionalOnBean - Условие выполняется, в случае если присутствует нужный бин в BeanFactory.
- @ConditionalOnClass - Условие выполняется, если нужный класс есть в classpath.
- @ConditionalOnCloudPlatform - Условие выполняется, когда активна определенная платформа.
- @ConditionalOnExpression - Условие выполняется, когда SpEL выражение вернуло положительное значение.
- @ConditionalOnJava - Условие выполняется, когда приложение запущено с определенной версией JVM.
- @ConditionalOnJndi - Условие выполняется, только если через JNDI доступен определенный ресурс.
- @ConditionalOnMissingBean - Условие выполняется, в случае если нужный бин отсутствует в BeanFactory.
- @ConditionalOnMissingClass - Условие выполняется, если нужный класс отсутствует в classpath.
- @ConditionalOnNotWebApplication - Условие выполняется, если контекст приложения не является веб контекстом.
- @ConditionalOnProperty - Условие выполняется, если в файле настроек заданы нужные параметры.
- @ConditionalOnResource - Условие выполняется, если присутствует нужный ресурс в classpath.
- @ConditionalOnSingleCandidate - Условие выполняется, если bean-компонент указанного класса уже
                                  содержится в BeanFactory и он единственный.
- @ConditionalOnWebApplication - Условие выполняется, если контекст приложения является веб контекстом.

Все их можно применять совместно над одним определением bean-a.

Таким образом, @Conditional представляет из себя довольно мощный инструмент по конфигурированию контекста,
позволяя делать приложения еще более гибкими. Но стоит учитывать тот факт, что использовать данную аннотацию
нужно аккуратно, так как поведение контекста становится не таким очевидным как при использовании профилей -
при большом количестве сконфигурированных bean-ов можно быстро запутаться. Желательно тщательно документировать
и логгировать ее применение в своем проекте, иначе поддержка кода вызовет трудности.