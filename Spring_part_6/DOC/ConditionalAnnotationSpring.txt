****** @Conditional в Spring ******

Аннотация Conditional и интерфейс Condition используется Spring Boot для управления содержимым контейнера bean-ов.
Поскольку контекст Spring-а - это контейнер bean-ов, как Spring-а, так и пользовательских, существует потребность
гибкого управления этим контейнером. Аннотация @Conditional создана для этого.

Самым распространенным способом управления контекстом Spring-a являются профили. Они позволяют быстро и просто
регулировать создание bean-ов. Но иногда может потребоваться более тонкая настройка. Например, во время
тестирования, возникает проблема: unit-тест на машине разработчика требует для своей работы bean типа X,
при прогоне этого же теста на сервере сборки необходим bean Y, а на продакшене требуется bean Z.

@Conditional предлагает в этом случае простое и легкое решение. Так же, как часто бывает при работе в
несинхронизированных командах, кто-то не успевает к сроку выполнить свою доработку, а наш функционал уже
готов. Нужно подстраиваться под данные условия и изменять поведение приложения. То есть, добавить возможность
изменять контекст приложения без перекомпиляции, например, изменяя только один параметр в конфигурации.

Над каждым бином в исходном коде мы можем добавить @Conditional и Spring при его создании автоматически
проверит условия, указанные в данной аннотации.

В официальной документации она объявлена так:

***************************************************************************************************************
    @Target(value={TYPE,METHOD})
    @Retention(value=RUNTIME)
    @Documented
    public @interface Conditional
***************************************************************************************************************

Эту аннотацию можно ставить, над классом, интерфейсом, над другой аннотацией, методом (тем, что помечен аннотацией
@Bean), посему мы можем по некому условию подключать, или отключать, те или иные bean-ы к (от) контексту(а). При
этом, передавать в нее нужно набор условий: Class<? extends Condition>[] value(), где Conditional - функциональный
интерфейс, который содержит метод:

***************************************************************************************************************
boolean matches(ConditionContext context,  AnnotatedTypeMetadata metadata)
***************************************************************************************************************

В этом методе есть ConditionContext, т.е. мы можем получить все необходимые данные из контекста:
- BeanDefinitionRegistry - мы имеем доступ к bean конструкторам;
- ConfigurableListableBeanFactory - имеем доступ к фабрике bean-ов (т.е. к любым bean-ам в контексте);
- Environment - имеем доступ к свойствам окружения;
- ResourceLoader - имеем доступ к ресурсам (файлы в classpath);
Также AnnotatedTypeMetadata позволяет получить данные о других аннотациях.

И данный метод возвращает boolean, т.е. можно передать набор классов, которые при нужных условиях загружаются
или нет в контекст. Например, @Conditional({OnLoggableAnnotation.class, AnnotationAndPropertyCondition.class}),
оба должны вернуть - true, чтобы условие выполнялось и бин создался.