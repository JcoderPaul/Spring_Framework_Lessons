****** Yet Another Markup Language - YAML ******

YAML — это язык для сериализации данных, который отличается простым синтаксисом и позволяет хранить
сложноорганизованные данные в компактном и читаемом формате. Дружественный формат сериализации данных,
концептуально близкий к языкам разметки, но ориентированный на удобство ввода-вывода типичных структур
данных многих языков программирования.

Язык похож на XML и JSON, но использует более минималистичный синтаксис при сохранении аналогичных
возможностей. YAML обычно применяют для создания конфигурационных файлов в программах типа
'Инфраструктура как код' - (Iac), или для управления контейнерами в работе DevOps.

Чаще всего с помощью YAML создают протоколы автоматизации, которые могут выполнять последовательности
команд записанные в YAML-файле. Это позволяет нашей системе быть более независимой и отзывчивой без
дополнительного внимания разработчика.

Всё больше и больше компаний используют DevOps и виртуализацию, поэтому YAML необходим для современного
разработчика. Кроме того, YAML легко интегрировать, благодаря поддержке Python (используя PyYAML библиотеку,
Docker или Ansible) и других популярных технологий.

-----------------------------------------------------------------------------------------------------------------

*** YAML vs JSON vs XML ***

1. YAML (.yml) и его особенности:
- понятный человеку код;
- минималистичный синтаксис;
- заточен под работу с данными;
- встроенный стиль, похожий на JSON (YAML является его надмножеством);
- поддерживает комментарии;
- поддерживает строки без кавычек;
- считается «чище», чем JSON;
- дополнительные возможности (расширяемые типы данных, относительные якоря и маппинг типов с сохранением
  порядка ключей).

Применение: YAML лучше всего подходит для приложений с большим объемом данных, которые используют DevOps
            конвейеры или виртуальные машины. Кроме того, улучшение читаемости данных пригодится в командах,
            где разработчики часто с ними взаимодействуют.

2. JSON и его особенности:
- труднее читать (в сравнении с YAML);
- явные, строгие требования к синтаксису;
- встроенный стиль, похожий на YAML (некоторые парсеры YAML могут читать JSON-файлы);
- нет комментариев;
- строкам нужны двойные кавычки.

Применение: JSON используется в веб-разработке — это лучший формат для сериализации и передачи данных через
            HTTP-соединение.

3. XML и его особенности:
- труднее читать (по сравнению с другими форматами);
- более многословный;
- действует как язык разметки, а YAML, как язык для форматирования данных;
- больше возможностей чем у YAML, например атрибуты тегов;
- более жёсткая схема документа.

Применение: XML идеален для сложных проектов, которым требуется тонкий контроль над валидацией, схемой и
            пространством имён. Язык обладает плохой читаемостью, требует большей пропускной способности и
            ёмкости хранилища, но обеспечивает беспрецедентный контроль.

-----------------------------------------------------------------------------------------------------------------

*** Характерные особенности YAML ***
- 1 - Поддержка мультидокументов: Мы можем объединить несколько YAML-документов в один YAML-файл для облегчения
                              организации файлов и парсинга данных.

Документы разделяются тремя дефисами (—):

*****************************************************************************************************************
---

player: playerOne
action: attack (miss)
---

player: playerTwo
action: attack (hit)
---
*****************************************************************************************************************

- 2 - Поддержка комментариев: YAML позволяет добавлять комментарии после символа #, как в Python:

*****************************************************************************************************************
key: #Это однострочный комментарий
   - value line 5
   #Это
   #многострочный комментарий
 - value line 13
*****************************************************************************************************************

- 3 - Легко читаемый синтаксис: В синтаксисе YAML-файлов используется система отступов, как в Python. Необходимо
                            использовать пробелы, а не табуляцию, чтобы избежать путаницы. Это избавляет от
                            лишних символов, которые есть в JSON и XML (кавычки, скобки, фигурные скобки).
                            В итоге читаемость файла значительно повышается.

Пример YAML:

*****************************************************************************************************************
#YAML
 Imaro:
 author: Charles R. Saunders
 language: English
 publication-year: 1981
 pages: 224
*****************************************************************************************************************

Пример JSON:

*****************************************************************************************************************
{
   "Imaro": {
      "author": "Charles R. Saunders",
      "language": "English",
      "publication-year": "1981",
      "pages": 224
   }
}
*****************************************************************************************************************

- 4 - Явная и неявная типизация: YAML предлагает как автоопределение типов, так и возможность явно указать тип
                                 данных. Чтобы использовать конкретный тип, нужно написать !![тип] перед значением.

*****************************************************************************************************************
# Это значение преобразуется в int:
is-an-int: !!int 14.10
# Превращает любое значение в строку:
is-a-str: !!str 67.43
# Значение должно быть boolean:
is-a-bool: !!bool yes
*****************************************************************************************************************

- 5- Отсутствие исполняемых файлов: YAML не содержит исполняемых файлов. Поэтому можно безопасно обмениваться
                                    YAML-файлами с третьей стороной. Чтобы использовать исполняемые файлы, YAML
                                    нужно интегрировать с другими языками, например Perl или Java.

-----------------------------------------------------------------------------------------------------------------

*** Синтаксис YAML ***

В языке есть несколько базовых концепций, которые позволяют обрабатывать большинство данных:
1. Пары ключ-значение: Большинство данных в YAML-файле хранятся в виде пары ключ-значение, где ключ — это имя
                       пары, а значение — связанные данные.
2. Скаляры и маппинг: Скаляр представляет собой одно значение, которому соответствует имя.
3. YAML поддерживает стандартные типы: int и float, boolean, string и null. Они могут быть представлены в разных
                                       видах: шестнадцатеричном, восьмеричном или экспоненциальном.
4. YAML имеет специальные типы для математических сущностей, такие как: плюс-бесконечность, минус-бесконечность и
                                                                        NAN.

Пример:
*****************************************************************************************************************
integer: 25
hex: 0x12d4 #равно 4820
octal: 023332 #равно 9946
float: 25.0
exponent: 12.3015e+05 #равно 1230150.0
boolean: Yes
string: "25"
infinity: .inf # преобразуется в бесконечность
neginf: -.Inf #преобразуется в минус бесконечность
not: .NAN #Not a Number
null: ~
*****************************************************************************************************************

5. Строки: Строка — это коллекция символов, которая может содержать слово или предложение. Можно использовать
           либо |, для отдельных строк, либо >, для параграфов. Кавычки в YAML не нужны.

Пример:
*****************************************************************************************************************
str: Hello World
data: |
   Это
   Отдельные
   Строки
data: >
   Это
   один параграф
   текста
*****************************************************************************************************************

6. Последовательности: Последовательности — это структуры данных похожие на списки или массивы, которые хранят
                       несколько значений под одним ключом. Они определяются с помощью отступов или [].

Пример:
*****************************************************************************************************************
shopping:
- milk
- eggs
- juice
*****************************************************************************************************************

7. Однострочные последовательности: выглядят лаконичнее, но хуже читаются.

Пример:
*****************************************************************************************************************
shopping: [milk, eggs, juice]
*****************************************************************************************************************

8. Словари: Словари — это коллекции пар ключ-значение, которые хранятся под одним ключом. Они позволяют разделить
            данные на логические категории.

Пример:
*****************************************************************************************************************
Employees:

- dan:
    name: Dan D. Veloper
    job: Developer
    team: DevOps
- dora:
   name: Dora D. Veloper
   job: Project Manager
   team: Web Subscriptions
*****************************************************************************************************************

Словари могут содержать более сложные структуры, что позволяет хранить сложные реляционные данные.

YAML позволяет (использовать и взаимодействовать):
- Anchors (якоря);
- Templates (шаблоны);
- Взаимодействие с Docker, Ansible и т. д.;
- Расширенные последовательности и маппинг;
- Расширенные типы данных (timestamp, null и т. д.);