См. исходник (ENG): https://www.baeldung.com/spring-template-engines
________________________________________________________________________________________________________________________

****** Spring Boot и Thymeleaf ******

Веб-фреймворк Spring построен на основе шаблона MVC (Модель-Представление-Контроллер), который упрощает разделение
задач в приложении. Это дает возможность использовать различные технологии представления, от хорошо зарекомендовавшей
себя технологии JSP до различных механизмов шаблонов (template engines).

Ниже кратко описан механизмы шаблонов, которые можно использовать со Spring, их конфигурацию и примеры использования.

________________________________________________________________________________________________________________________
*** 2. Технологии Spring View ***

Учитывая, что задачи в приложении Spring MVC четко разделены, переключение с одной технологии представления на другую в
первую очередь является вопросом конфигурации.

Для рендеринга каждого типа представления нам необходимо определить bean-компонент ViewResolver, соответствующий каждой
технологии. Это означает, что мы можем затем возвращать имена представлений из методов сопоставления @Controller так же,
как мы обычно возвращаем файлы JSP.

Ниже кратко рассмотрим более традиционные технологии, такие как Java Server Pages, а также механизм шаблонов,
которые можно использовать с Spring это Thymeleaf (он не единственный, мы можем с легкостью работать и с Groovy,
и с FreeMarker, и с Jade)

Мы бегло рассмотрим необходимую конфигурацию как в стандартном приложении Spring, так и в приложении, созданном с
использованием Spring Boot.

________________________________________________________________________________________________________________________
*** 3. Страницы Java-сервера ***

JSP — одна из самых популярных технологий представления для приложений Java, которая поддерживается Spring «из коробки».
Данную технологию мы использовали в предыдущих уроках. Для рендеринга файлов JSP обычно используемым типом
bean-компонента ViewResolver является InternalResourceViewResolver:

************************************************************************************************************************
@EnableWebMvc
@Configuration
public class ApplicationConfiguration implements WebMvcConfigurer {
    @Bean
    public ViewResolver jspViewResolver() {
        InternalResourceViewResolver bean = new InternalResourceViewResolver();
        bean.setPrefix("/WEB-INF/views/");
        bean.setSuffix(".jsp");
        return bean;
    }
}
************************************************************************************************************************

Далее мы можем начать создавать файлы JSP, например, в папке /WEB-INF/views:

************************************************************************************************************************
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>
<html>
    <head>
        <meta http-equiv="Content-Type"
          content="text/html; charset=ISO-8859-1">
        <title>User Registration</title>
    </head>
    <body>
        <form:form method="POST" modelAttribute="user">
            <form:label path="email">Email: </form:label>
            <form:input path="email" type="text"/>
            <form:label path="password">Password: </form:label>
            <form:input path="password" type="password" />
            <input type="submit" value="Submit" />
        </form:form>
    </body>
</html>
************************************************************************************************************************

Если мы добавляем файлы в приложение Spring Boot, то вместо класса ApplicationConfiguration мы можем определить
следующие свойства в файле application.properties:

************************************************************************************************************************

spring.mvc.view.prefix: /WEB-INF/views/
spring.mvc.view.suffix: .jsp

************************************************************************************************************************

В нашем случае это файл application.yml и часть настройки префикса и суффикса выглядят так:

************************************************************************************************************************
...
spring:
  mvc:
    view:
      prefix: /WEB-INF/jsp/
      suffix: .jsp
...
************************************************************************************************************************

На основе этих свойств Spring Boot автоматически настроит необходимый ViewResolver.

________________________________________________________________________________________________________________________
*** 4. Thymeleaf ***

Thymeleaf — это механизм шаблонов Java (шаблонизатор), который может обрабатывать файлы HTML, XML, текст, JavaScript
или CSS. В отличие от других механизмов шаблонов, Thymeleaf позволяет использовать шаблоны в качестве прототипов, то
есть их можно просматривать как статические файлы.

________________________________________________________________________________________________________________________
*** 4.1. Зависимости Maven ***

Чтобы интегрировать Thymeleaf с Spring, нам нужно добавить зависимости тимелеафа и тимелеафа-spring4 :

<dependency>
    <groupId>org.thymeleaf</groupId>
    <artifactId>thymeleaf</artifactId>
    <version>3.1.2.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.thymeleaf</groupId>
    <artifactId>thymeleaf-spring5</artifactId>
    <version>3.1.2.RELEASE</version>
</dependency>

Если у нас проект Spring 4, нам нужно добавить thymeleaf-spring4.

________________________________________________________________________________________________________________________
*** 4.2. Spring конфигурация ***

Далее нам нужно добавить конфигурацию, для которой требуется bean-компонент SpringTemplateEngine, а также bean-компонент
TemplateResolver, который определяет расположение и тип файлов представления.

SpringResourceTemplateResolver интегрирован с механизмом разрешения ресурсов Spring :

************************************************************************************************************************
@Configuration
@EnableWebMvc
public class ThymeleafConfiguration {

    @Bean
    public SpringTemplateEngine templateEngine() {
        SpringTemplateEngine templateEngine = new SpringTemplateEngine();
        templateEngine.setTemplateResolver(thymeleafTemplateResolver());
        return templateEngine;
    }

    @Bean
    public SpringResourceTemplateResolver thymeleafTemplateResolver() {
        SpringResourceTemplateResolver templateResolver
          = new SpringResourceTemplateResolver();
        templateResolver.setPrefix("/WEB-INF/views/");
        templateResolver.setSuffix(".html");
        templateResolver.setTemplateMode("HTML5");
        return templateResolver;
    }
}
************************************************************************************************************************

Также нам понадобится bean-компонент ViewResolver типа ThymeleafViewResolver :

************************************************************************************************************************
@Bean
public ThymeleafViewResolver thymeleafViewResolver() {
    ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();
    viewResolver.setTemplateEngine(templateEngine());
    return viewResolver;
}
************************************************************************************************************************

________________________________________________________________________________________________________________________
*** 4.3. Шаблоны Thymeleaf ***

Теперь мы можем добавить HTML-файл в папку WEB-INF/views :

************************************************************************************************************************

<html>
    <head>
        <meta charset="ISO-8859-1" />
        <title>User Registration</title>
    </head>
    <body>
        <form action="#" th:action="@{/register}"
          th:object="${user}" method="post">
            Email:<input type="text" th:field="*{email}" />
            Password:<input type="password" th:field="*{password}" />
            <input type="submit" value="Submit" />
        </form>
    </body>
</html>
************************************************************************************************************************

Шаблоны Thymeleaf по синтаксису очень похожи на шаблоны HTML.

Некоторые функции, доступные при использовании Thymeleaf в приложении Spring:
- поддержка определения поведения форм;
- привязка входных данных формы к моделям данных;
- проверка входных данных формы;
- отображение значений из источников сообщений;
- рендеринг фрагментов шаблона;

Подробнее об использовании шаблонов Thymeleaf можно прочитать тут: DOC/ThymeleafManual

________________________________________________________________________________________________________________________
*** 4.4. Thymeleaf в Spring Boot ***

Spring Boot обеспечит автоматическую настройку Thymeleaf, добавив зависимость Spring-boot-starter-thymeleaf (для Maven):

************************************************************************************************************************
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
    <version>2.5.6</version>
</dependency>
************************************************************************************************************************

Для build.gradle:

************************************************************************************************************************

implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

************************************************************************************************************************

Никакой явной настройки не требуется. По умолчанию HTML-файлы должны размещаться в папке ресурсов/шаблонов.