****** Inheritance Mapping Strategies - Стратегии наследования мапинга ******

В JPA описаны три стратегии наследования мапинга (Inheritance Mapping Strategies), то есть, как JPA будет работать
с классами-наследниками Entity:
1) одна таблица на всю иерархию наследования (a single table per class hierarchy) - все Entity, со всеми
   наследниками записываются в одну таблицу, для идентификации типа Entity определяется специальная колонка
   “discriminator column”.

   Например, если есть Entity Animals c классами-потомками Cats и Dogs, при такой стратегии все Entity
   записываются в таблицу Animals, но при это имеют дополнительную колонку animalType в которую соответственно
   пишется значение «cat» или «dog».

   Минусом является то, что в общей таблице, будут созданы все поля уникальные для каждого из классов-потомков,
   которые будет пусты для всех других классов-потомков.

   Например, в таблице animals окажется и скорость лазанья по дереву от cats и может ли пес приносить тапки от
   dogs, которые будут всегда иметь null для dog и cat соответственно.

2) объединяющая стратегия (joined subclass strategy) - в этой стратегии каждый класс Entity сохраняет данные в
   свою таблицу, но только уникальные колонки (не унаследованные от классов-предков) и первичный ключ, а все
   унаследованные колонки записываются в таблицы класса-предка, дополнительно устанавливается связь
   (relationships) между этими таблицами, например в случае классов Animals (см.выше), будут три таблицы: animals,
   cats, dogs. Причем в cats будет записана только ключ и скорость лазанья, в dogs — ключ и умеет ли пес приносить
   палку (тапки), а в animals все остальные данные cats и dogs c ссылкой на соответствующие таблицы.

   Минусом тут являются потери производительности от объединения таблиц (join) для любых операций.

3) одна таблица для каждого класса (table per concrete class strategy) - тут все просто каждый отдельный
   класс-наследник имеет свою таблицу, т.е. для cats и dogs (см.выше) все данные будут записываться просто
   в таблицы cats и dogs как если бы они вообще не имели общего супер-класса.

   Минусом является плохая поддержка полиморфизма (polymorphic relationships) и то что для выборки всех классов
   иерархии потребуются большое количество отдельных sql запросов или использование UNION запроса.

Для задания стратегии наследования используется аннотация Inheritance (или соответствующие блоки)
*****************************************************************************************************************
Более подробно см.: https://github.com/JcoderPaul/Hibernate_Lessons/tree/master/Hibernate_part_3
*****************************************************************************************************************